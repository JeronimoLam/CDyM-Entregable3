
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000482  00800100  00000cf0  00000d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000239  00800582  00800582  00001206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d97  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4e  00000000  00000000  00003277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001194  00000000  00000000  00003ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  0000505c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099e  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf4  00000000  00000000  00006006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00006bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
<<<<<<< HEAD
  38:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_18>
  4c:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_19>
=======
  38:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_18>
  4c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_19>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
<<<<<<< HEAD
  68:	78 02       	muls	r23, r24
  6a:	7a 02       	muls	r23, r26
  6c:	7c 02       	muls	r23, r28
  6e:	70 02       	muls	r23, r16
  70:	72 02       	muls	r23, r18
  72:	74 02       	muls	r23, r20
  74:	76 02       	muls	r23, r22
=======
  68:	85 02       	muls	r24, r21
  6a:	87 02       	muls	r24, r23
  6c:	89 02       	muls	r24, r25
  6e:	7d 02       	muls	r23, r29
  70:	7f 02       	muls	r23, r31
  72:	81 02       	muls	r24, r17
  74:	83 02       	muls	r24, r19
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	15 e0       	ldi	r17, 0x05	; 5
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  88:	e0 ef       	ldi	r30, 0xF0	; 240
  8a:	fc e0       	ldi	r31, 0x0C	; 12
=======
  88:	ec e4       	ldi	r30, 0x4C	; 76
  8a:	fd e0       	ldi	r31, 0x0D	; 13
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 38       	cpi	r26, 0x82	; 130
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	27 e0       	ldi	r18, 0x07	; 7
  9a:	a2 e8       	ldi	r26, 0x82	; 130
  9c:	b5 e0       	ldi	r27, 0x05	; 5
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
<<<<<<< HEAD
  a2:	ab 3b       	cpi	r26, 0xBB	; 187
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
  ac:	0c 94 76 06 	jmp	0xcec	; 0xcec <_exit>
=======
  a2:	ae 3e       	cpi	r26, 0xEE	; 238
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
  ac:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <_exit>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <AUDIO_get_songs_menu>:
// @brief *resumen*
// @param  *parametrsoq que resumen*
// @return *lo que retorna*
unsigned int get_tempo() {
	return tempo;
}
<<<<<<< HEAD
  b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <songs_menu>
  b8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <songs_menu+0x1>
  bc:	08 95       	ret

000000be <set_song>:
  be:	e8 2f       	mov	r30, r24
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	ed 5f       	subi	r30, 0xFD	; 253
  c8:	fe 4f       	sbci	r31, 0xFE	; 254
  ca:	80 81       	ld	r24, Z
  cc:	91 81       	ldd	r25, Z+1	; 0x01
  ce:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <__data_end+0x1>
  d2:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <__data_end>
  d6:	08 95       	ret

000000d8 <set_duration_timer>:
  d8:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <duration_timer+0x1>
  dc:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <duration_timer>
  e0:	08 95       	ret

000000e2 <set_sound_playing>:
  e2:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <sound_playing+0x1>
  e6:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <sound_playing>
  ea:	08 95       	ret

000000ec <get_duration_timer>:
  ec:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <duration_timer>
  f0:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <duration_timer+0x1>
  f4:	08 95       	ret

000000f6 <sound>:
=======
  b4:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <__data_end>
  b8:	e8 2f       	mov	r30, r24
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	ef 5f       	subi	r30, 0xFF	; 255
  c2:	fe 4f       	sbci	r31, 0xFE	; 254
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <song+0x1>
  cc:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <song>
  d0:	08 95       	ret

000000d2 <set_duration_timer>:
  d2:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <duration_timer+0x1>
  d6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <duration_timer>
  da:	08 95       	ret

000000dc <set_sound_playing>:
  dc:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <sound_playing+0x1>
  e0:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <sound_playing>
  e4:	08 95       	ret

000000e6 <get_duration_timer>:
  e6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <duration_timer>
  ea:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <duration_timer+0x1>
  ee:	08 95       	ret

000000f0 <sound>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5


// Saco el sonido por el PIN5 del PORTD: freq en Hz, dur en ms
void sound(unsigned int freq, unsigned int dur)
{
<<<<<<< HEAD
  f6:	9c 01       	movw	r18, r24
	while (sound_playing && song_playing);      // Si hay alg?n sonido presente, espero a que termine
  f8:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <sound_playing>
  fc:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <sound_playing+0x1>
 100:	45 2b       	or	r20, r21
 102:	21 f0       	breq	.+8      	; 0x10c <sound+0x16>
 104:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	91 11       	cpse	r25, r1
 10a:	f6 cf       	rjmp	.-20     	; 0xf8 <sound+0x2>

	duration_timer = dur;       // Seteo el tiempo de duraci?n
 10c:	70 93 8b 05 	sts	0x058B, r23	; 0x80058b <duration_timer+0x1>
 110:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <duration_timer>

	// Activo la salida y configuro el timer para que genere la se?al de la frecuencia apropiada
	TCCR1A|=(1<<COM1A0);
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24

	// Actualizo el valor de OCR1A para que produzca la nota adecuada
	OCR1A=(8000000/(freq))-1;
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	72 e1       	ldi	r23, 0x12	; 18
 126:	8a e7       	ldi	r24, 0x7A	; 122
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 09 06 	call	0xc12	; 0xc12 <__divmodsi4>
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	31 09       	sbc	r19, r1
 132:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	sound_playing = 1;          // Activo el flag para avisar que hay una nota sonando
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <sound_playing+0x1>
 142:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <sound_playing>
 146:	08 95       	ret

00000148 <stop_song>:
=======
  f0:	9c 01       	movw	r18, r24
	while (sound_playing && song_playing);      // Si hay alg?n sonido presente, espero a que termine
  f2:	40 91 bd 04 	lds	r20, 0x04BD	; 0x8004bd <sound_playing>
  f6:	50 91 be 04 	lds	r21, 0x04BE	; 0x8004be <sound_playing+0x1>
  fa:	45 2b       	or	r20, r21
  fc:	21 f0       	breq	.+8      	; 0x106 <sound+0x16>
  fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	91 11       	cpse	r25, r1
 104:	f6 cf       	rjmp	.-20     	; 0xf2 <sound+0x2>

	duration_timer = dur;       // Seteo el tiempo de duraci?n
 106:	70 93 c4 04 	sts	0x04C4, r23	; 0x8004c4 <duration_timer+0x1>
 10a:	60 93 c3 04 	sts	0x04C3, r22	; 0x8004c3 <duration_timer>

	// Activo la salida y configuro el timer para que genere la se?al de la frecuencia apropiada
	TCCR1A|=(1<<COM1A0);
 10e:	e0 e8       	ldi	r30, 0x80	; 128
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24

	// Actualizo el valor de OCR1A para que produzca la nota adecuada
	OCR1A=(8000000/(freq))-1;
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	72 e1       	ldi	r23, 0x12	; 18
 120:	8a e7       	ldi	r24, 0x7A	; 122
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divmodsi4>
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	31 09       	sbc	r19, r1
 12c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 130:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	sound_playing = 1;          // Activo el flag para avisar que hay una nota sonando
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <sound_playing+0x1>
 13c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <sound_playing>
 140:	08 95       	ret

00000142 <stop_song>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

void stop_song()
{
	song_playing = 0;           // Activo el flag para avisar que hay una nota sonando
<<<<<<< HEAD
 148:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sound_playing = 0;          // Activo el flag para avisar que hay una nota sonando
 14c:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <sound_playing+0x1>
 150:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <sound_playing>
	TCCR1A&=~(1<<COM1A0);       // Desactivo la salida
 154:	e0 e8       	ldi	r30, 0x80	; 128
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8f 7b       	andi	r24, 0xBF	; 191
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret

00000160 <play_song>:
=======
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sound_playing = 0;          // Activo el flag para avisar que hay una nota sonando
 146:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <sound_playing+0x1>
 14a:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <sound_playing>
	TCCR1A&=~(1<<COM1A0);       // Desactivo la salida
 14e:	e0 e8       	ldi	r30, 0x80	; 128
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8f 7b       	andi	r24, 0xBF	; 191
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <play_song>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

// Esta funci?n reproduce una canci?n que se le pase en un string con formato RTTTL
void play_song()
{
<<<<<<< HEAD
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
	unsigned char temp_duration, temp_octave, current_note, dot_flag;
	unsigned int calc_duration;
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <duration>
	tempo = 63;                   // Tempo est?ndar = 63 bpm
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <tempo+0x1>
 176:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tempo>
	octave = 6;                   // Octava est?ndar = 6th
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <octave>
	while (*song != ':' && song_playing) song++;  // Busca el primer ':'
 180:	05 c0       	rjmp	.+10     	; 0x18c <play_song+0x2c>
 182:	31 96       	adiw	r30, 0x01	; 1
 184:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 188:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 18c:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 190:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 194:	80 81       	ld	r24, Z
 196:	8a 33       	cpi	r24, 0x3A	; 58
 198:	21 f0       	breq	.+8      	; 0x1a2 <play_song+0x42>
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	81 11       	cpse	r24, r1
 1a0:	f0 cf       	rjmp	.-32     	; 0x182 <play_song+0x22>
	song++;                       // Saltea el primer ':'
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 1a8:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
	while (*song!=':' && song_playing)            // Repite hasta encontrar ':'
 1ac:	51 c1       	rjmp	.+674    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	{
		if (*song == 'd')           // Entra si es el seteo de la duraci?n
 1ae:	84 36       	cpi	r24, 0x64	; 100
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <play_song+0x54>
 1b2:	5c c0       	rjmp	.+184    	; 0x26c <play_song+0x10c>
		{
			duration = 0;             // Seteo la duraci?n en cero (temporalmente)
 1b4:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 1b8:	31 96       	adiw	r30, 0x01	; 1
 1ba:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 1be:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <play_song+0x6e>
 1c4:	31 96       	adiw	r30, 0x01	; 1
 1c6:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 1ca:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 1ce:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 1d2:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 1d6:	80 81       	ld	r24, Z
 1d8:	8d 33       	cpi	r24, 0x3D	; 61
 1da:	51 f4       	brne	.+20     	; 0x1f0 <play_song+0x90>
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e0:	81 11       	cpse	r24, r1
 1e2:	f0 cf       	rjmp	.-32     	; 0x1c4 <play_song+0x64>
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <play_song+0x90>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 1e6:	31 96       	adiw	r30, 0x01	; 1
 1e8:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 1ec:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 1f0:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 1f4:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 1f8:	80 81       	ld	r24, Z
 1fa:	80 32       	cpi	r24, 0x20	; 32
 1fc:	21 f4       	brne	.+8      	; 0x206 <play_song+0xa6>
 1fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 202:	91 11       	cpse	r25, r1
 204:	f0 cf       	rjmp	.-32     	; 0x1e6 <play_song+0x86>
			// Si el caracter es un n?mero, seteo la duraci?n
			if (*song>='0' && *song<='9') duration = *song - '0';
 206:	80 53       	subi	r24, 0x30	; 48
 208:	8a 30       	cpi	r24, 0x0A	; 10
 20a:	10 f4       	brcc	.+4      	; 0x210 <play_song+0xb0>
 20c:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 210:	9f 01       	movw	r18, r30
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	30 93 83 05 	sts	0x0583, r19	; 0x800583 <__data_end+0x1>
 21a:	20 93 82 05 	sts	0x0582, r18	; 0x800582 <__data_end>
			// Me fijo si el caracter es un n?mero, ya que la diraci?n puede ser de dos d?gitos de largo
			if (*song>='0' && *song<='9')
 21e:	81 81       	ldd	r24, Z+1	; 0x01
 220:	90 ed       	ldi	r25, 0xD0	; 208
 222:	98 0f       	add	r25, r24
 224:	9a 30       	cpi	r25, 0x0A	; 10
 226:	b8 f4       	brcc	.+46     	; 0x256 <play_song+0xf6>
			{ // Multiplico duraci?n por 10 y le agrego el valor del caracter
				duration = duration*10 + (*song - '0');
 228:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <duration>
 22c:	99 0f       	add	r25, r25
 22e:	49 2f       	mov	r20, r25
 230:	44 0f       	add	r20, r20
 232:	44 0f       	add	r20, r20
 234:	94 0f       	add	r25, r20
 236:	89 0f       	add	r24, r25
 238:	80 53       	subi	r24, 0x30	; 48
 23a:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <duration>
				song++;                 // Avanzo al pr?ximo caracter
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	30 93 83 05 	sts	0x0583, r19	; 0x800583 <__data_end+0x1>
 246:	20 93 82 05 	sts	0x0582, r18	; 0x800582 <__data_end>
 24a:	05 c0       	rjmp	.+10     	; 0x256 <play_song+0xf6>
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
 24c:	31 96       	adiw	r30, 0x01	; 1
 24e:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 252:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 256:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 25a:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 25e:	80 81       	ld	r24, Z
 260:	8c 32       	cpi	r24, 0x2C	; 44
 262:	21 f4       	brne	.+8      	; 0x26c <play_song+0x10c>
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	81 11       	cpse	r24, r1
 26a:	f0 cf       	rjmp	.-32     	; 0x24c <play_song+0xec>
		}

		if (*song == 'o')           // Entra si es el seteo de la octava
 26c:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 270:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 274:	80 81       	ld	r24, Z
 276:	8f 36       	cpi	r24, 0x6F	; 111
 278:	09 f0       	breq	.+2      	; 0x27c <play_song+0x11c>
 27a:	44 c0       	rjmp	.+136    	; 0x304 <play_song+0x1a4>
		{
			octave = 0;               // Seteo la octava en cero (temporalmente)
 27c:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <octave>
			song++;                   // Avanzo al pr?ximo caracter
 280:	31 96       	adiw	r30, 0x01	; 1
 282:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 286:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 28a:	05 c0       	rjmp	.+10     	; 0x296 <play_song+0x136>
 28c:	31 96       	adiw	r30, 0x01	; 1
 28e:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 292:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 296:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 29a:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 29e:	80 81       	ld	r24, Z
 2a0:	8d 33       	cpi	r24, 0x3D	; 61
 2a2:	51 f4       	brne	.+20     	; 0x2b8 <play_song+0x158>
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a8:	81 11       	cpse	r24, r1
 2aa:	f0 cf       	rjmp	.-32     	; 0x28c <play_song+0x12c>
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <play_song+0x158>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 2ae:	31 96       	adiw	r30, 0x01	; 1
 2b0:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 2b4:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 2b8:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 2bc:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 2c0:	80 81       	ld	r24, Z
 2c2:	80 32       	cpi	r24, 0x20	; 32
 2c4:	21 f4       	brne	.+8      	; 0x2ce <play_song+0x16e>
 2c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	91 11       	cpse	r25, r1
 2cc:	f0 cf       	rjmp	.-32     	; 0x2ae <play_song+0x14e>
			// Si el caracter es un n?mero, seteo la octava
			if (*song>='0' && *song<='9') octave = *song - '0';
 2ce:	80 53       	subi	r24, 0x30	; 48
 2d0:	8a 30       	cpi	r24, 0x0A	; 10
 2d2:	10 f4       	brcc	.+4      	; 0x2d8 <play_song+0x178>
 2d4:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <octave>
			song++;                   // Avanzo al pr?ximo caracter
 2d8:	31 96       	adiw	r30, 0x01	; 1
 2da:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 2de:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
			while (*song == ',' && song_playing) song++;  // Salteo ','
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <play_song+0x18e>
 2e4:	31 96       	adiw	r30, 0x01	; 1
 2e6:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 2ea:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 2ee:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 2f2:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 2f6:	80 81       	ld	r24, Z
 2f8:	8c 32       	cpi	r24, 0x2C	; 44
 2fa:	21 f4       	brne	.+8      	; 0x304 <play_song+0x1a4>
 2fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 300:	81 11       	cpse	r24, r1
 302:	f0 cf       	rjmp	.-32     	; 0x2e4 <play_song+0x184>
		}
		if (*song == 'b')           // Entra si es el seteo del tempo (beats por minuto)
 304:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 308:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 30c:	80 81       	ld	r24, Z
 30e:	82 36       	cpi	r24, 0x62	; 98
 310:	09 f0       	breq	.+2      	; 0x314 <play_song+0x1b4>
 312:	93 c0       	rjmp	.+294    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			tempo = 0;                // Seteo el tempo en cero (temporalmente)
 314:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <tempo+0x1>
 318:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 31c:	31 96       	adiw	r30, 0x01	; 1
 31e:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 322:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 326:	05 c0       	rjmp	.+10     	; 0x332 <play_song+0x1d2>
 328:	31 96       	adiw	r30, 0x01	; 1
 32a:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 32e:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 332:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 336:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 33a:	80 81       	ld	r24, Z
 33c:	8d 33       	cpi	r24, 0x3D	; 61
 33e:	51 f4       	brne	.+20     	; 0x354 <play_song+0x1f4>
 340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 344:	81 11       	cpse	r24, r1
 346:	f0 cf       	rjmp	.-32     	; 0x328 <play_song+0x1c8>
 348:	05 c0       	rjmp	.+10     	; 0x354 <play_song+0x1f4>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 34a:	31 96       	adiw	r30, 0x01	; 1
 34c:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 350:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 354:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 358:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 35c:	80 81       	ld	r24, Z
 35e:	80 32       	cpi	r24, 0x20	; 32
 360:	21 f4       	brne	.+8      	; 0x36a <play_song+0x20a>
 362:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 366:	91 11       	cpse	r25, r1
 368:	f0 cf       	rjmp	.-32     	; 0x34a <play_song+0x1ea>
			// Ahora leo el seteo del tempo (puede tener 3 d?gitos de largo)
			if (*song>='0' && *song<='9') tempo = *song - '0';
 36a:	90 ed       	ldi	r25, 0xD0	; 208
 36c:	98 0f       	add	r25, r24
 36e:	9a 30       	cpi	r25, 0x0A	; 10
 370:	30 f4       	brcc	.+12     	; 0x37e <play_song+0x21e>
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	c0 97       	sbiw	r24, 0x30	; 48
 376:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <tempo+0x1>
 37a:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 37e:	df 01       	movw	r26, r30
 380:	11 96       	adiw	r26, 0x01	; 1
 382:	b0 93 83 05 	sts	0x0583, r27	; 0x800583 <__data_end+0x1>
 386:	a0 93 82 05 	sts	0x0582, r26	; 0x800582 <__data_end>
			if (*song>='0' && *song<='9')
 38a:	41 81       	ldd	r20, Z+1	; 0x01
 38c:	80 ed       	ldi	r24, 0xD0	; 208
 38e:	84 0f       	add	r24, r20
 390:	8a 30       	cpi	r24, 0x0A	; 10
 392:	08 f0       	brcs	.+2      	; 0x396 <play_song+0x236>
 394:	41 c0       	rjmp	.+130    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			{
				tempo = tempo*10 + (*song - '0'); // El tempo tiene dos d?gitos
 396:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <tempo>
 39a:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <tempo+0x1>
 39e:	c9 01       	movw	r24, r18
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	22 0f       	add	r18, r18
 3a6:	33 1f       	adc	r19, r19
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	82 0f       	add	r24, r18
 3b2:	93 1f       	adc	r25, r19
 3b4:	84 0f       	add	r24, r20
 3b6:	91 1d       	adc	r25, r1
 3b8:	c0 97       	sbiw	r24, 0x30	; 48
 3ba:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <tempo+0x1>
 3be:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tempo>
				song++;                 // Avanzo al pr?ximo caracter
 3c2:	9d 01       	movw	r18, r26
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	30 93 83 05 	sts	0x0583, r19	; 0x800583 <__data_end+0x1>
 3cc:	20 93 82 05 	sts	0x0582, r18	; 0x800582 <__data_end>
				if (*song>='0' && *song<='9')
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	4c 91       	ld	r20, X
 3d4:	50 ed       	ldi	r21, 0xD0	; 208
 3d6:	54 0f       	add	r21, r20
 3d8:	5a 30       	cpi	r21, 0x0A	; 10
 3da:	f0 f4       	brcc	.+60     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				{
					tempo = tempo*10 + (*song - '0'); // El tempo tiene tres d?gitos
 3dc:	bc 01       	movw	r22, r24
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	86 0f       	add	r24, r22
 3f0:	97 1f       	adc	r25, r23
 3f2:	84 0f       	add	r24, r20
 3f4:	91 1d       	adc	r25, r1
 3f6:	c0 97       	sbiw	r24, 0x30	; 48
 3f8:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <tempo+0x1>
 3fc:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <tempo>
					song++;               // Avanzo al pr?ximo caracter
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	30 93 83 05 	sts	0x0583, r19	; 0x800583 <__data_end+0x1>
 408:	20 93 82 05 	sts	0x0582, r18	; 0x800582 <__data_end>
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				}
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
 40e:	31 96       	adiw	r30, 0x01	; 1
 410:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 414:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 418:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 41c:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 420:	80 81       	ld	r24, Z
 422:	8c 32       	cpi	r24, 0x2C	; 44
 424:	51 f4       	brne	.+20     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 42a:	81 11       	cpse	r24, r1
 42c:	f0 cf       	rjmp	.-32     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
 430:	31 96       	adiw	r30, 0x01	; 1
 432:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 436:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 43a:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 43e:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 442:	80 81       	ld	r24, Z
 444:	8c 32       	cpi	r24, 0x2C	; 44
 446:	21 f4       	brne	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44c:	81 11       	cpse	r24, r1
 44e:	f0 cf       	rjmp	.-32     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
=======
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
	song_playing = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	song = rtttl_library[current_song];
 168:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <__data_end>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ef 5f       	subi	r30, 0xFF	; 255
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <song+0x1>
 17e:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <song>
	unsigned char temp_duration, temp_octave, current_note, dot_flag;
	unsigned int calc_duration;
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <duration>
	tempo = 63;                   // Tempo est?ndar = 63 bpm
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <tempo+0x1>
 190:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <tempo>
	octave = 6;                   // Octava est?ndar = 6th
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <octave>
	while (*song != ':' && song_playing) song++;  // Busca el primer ':'
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <play_song+0x4c>
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 1a2:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 1a6:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 1aa:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 1ae:	80 81       	ld	r24, Z
 1b0:	8a 33       	cpi	r24, 0x3A	; 58
 1b2:	21 f0       	breq	.+8      	; 0x1bc <play_song+0x62>
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b8:	81 11       	cpse	r24, r1
 1ba:	f0 cf       	rjmp	.-32     	; 0x19c <play_song+0x42>
	song++;                       // Saltea el primer ':'
 1bc:	31 96       	adiw	r30, 0x01	; 1
 1be:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 1c2:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
	while (*song!=':' && song_playing)            // Repite hasta encontrar ':'
 1c6:	51 c1       	rjmp	.+674    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	{
		if (*song == 'd')           // Entra si es el seteo de la duraci?n
 1c8:	84 36       	cpi	r24, 0x64	; 100
 1ca:	09 f0       	breq	.+2      	; 0x1ce <play_song+0x74>
 1cc:	5c c0       	rjmp	.+184    	; 0x286 <play_song+0x12c>
		{
			duration = 0;             // Seteo la duraci?n en cero (temporalmente)
 1ce:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 1d2:	31 96       	adiw	r30, 0x01	; 1
 1d4:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 1d8:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <play_song+0x8e>
 1de:	31 96       	adiw	r30, 0x01	; 1
 1e0:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 1e4:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 1e8:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 1ec:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 1f0:	80 81       	ld	r24, Z
 1f2:	8d 33       	cpi	r24, 0x3D	; 61
 1f4:	51 f4       	brne	.+20     	; 0x20a <play_song+0xb0>
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	81 11       	cpse	r24, r1
 1fc:	f0 cf       	rjmp	.-32     	; 0x1de <play_song+0x84>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <play_song+0xb0>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 200:	31 96       	adiw	r30, 0x01	; 1
 202:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 206:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 20a:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 20e:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 212:	80 81       	ld	r24, Z
 214:	80 32       	cpi	r24, 0x20	; 32
 216:	21 f4       	brne	.+8      	; 0x220 <play_song+0xc6>
 218:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21c:	91 11       	cpse	r25, r1
 21e:	f0 cf       	rjmp	.-32     	; 0x200 <play_song+0xa6>
			// Si el caracter es un n?mero, seteo la duraci?n
			if (*song>='0' && *song<='9') duration = *song - '0';
 220:	80 53       	subi	r24, 0x30	; 48
 222:	8a 30       	cpi	r24, 0x0A	; 10
 224:	10 f4       	brcc	.+4      	; 0x22a <play_song+0xd0>
 226:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 22a:	9f 01       	movw	r18, r30
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <song+0x1>
 234:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <song>
			// Me fijo si el caracter es un n?mero, ya que la diraci?n puede ser de dos d?gitos de largo
			if (*song>='0' && *song<='9')
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	90 ed       	ldi	r25, 0xD0	; 208
 23c:	98 0f       	add	r25, r24
 23e:	9a 30       	cpi	r25, 0x0A	; 10
 240:	b8 f4       	brcc	.+46     	; 0x270 <play_song+0x116>
			{ // Multiplico duraci?n por 10 y le agrego el valor del caracter
				duration = duration*10 + (*song - '0');
 242:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <duration>
 246:	99 0f       	add	r25, r25
 248:	49 2f       	mov	r20, r25
 24a:	44 0f       	add	r20, r20
 24c:	44 0f       	add	r20, r20
 24e:	94 0f       	add	r25, r20
 250:	89 0f       	add	r24, r25
 252:	80 53       	subi	r24, 0x30	; 48
 254:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <duration>
				song++;                 // Avanzo al pr?ximo caracter
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <song+0x1>
 260:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <song>
 264:	05 c0       	rjmp	.+10     	; 0x270 <play_song+0x116>
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
 266:	31 96       	adiw	r30, 0x01	; 1
 268:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 26c:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 270:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 274:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 278:	80 81       	ld	r24, Z
 27a:	8c 32       	cpi	r24, 0x2C	; 44
 27c:	21 f4       	brne	.+8      	; 0x286 <play_song+0x12c>
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	81 11       	cpse	r24, r1
 284:	f0 cf       	rjmp	.-32     	; 0x266 <play_song+0x10c>
		}

		if (*song == 'o')           // Entra si es el seteo de la octava
 286:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 28a:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 28e:	80 81       	ld	r24, Z
 290:	8f 36       	cpi	r24, 0x6F	; 111
 292:	09 f0       	breq	.+2      	; 0x296 <play_song+0x13c>
 294:	44 c0       	rjmp	.+136    	; 0x31e <play_song+0x1c4>
		{
			octave = 0;               // Seteo la octava en cero (temporalmente)
 296:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <octave>
			song++;                   // Avanzo al pr?ximo caracter
 29a:	31 96       	adiw	r30, 0x01	; 1
 29c:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 2a0:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <play_song+0x156>
 2a6:	31 96       	adiw	r30, 0x01	; 1
 2a8:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 2ac:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 2b0:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 2b4:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 2b8:	80 81       	ld	r24, Z
 2ba:	8d 33       	cpi	r24, 0x3D	; 61
 2bc:	51 f4       	brne	.+20     	; 0x2d2 <play_song+0x178>
 2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c2:	81 11       	cpse	r24, r1
 2c4:	f0 cf       	rjmp	.-32     	; 0x2a6 <play_song+0x14c>
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <play_song+0x178>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 2c8:	31 96       	adiw	r30, 0x01	; 1
 2ca:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 2ce:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 2d2:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 2d6:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 2da:	80 81       	ld	r24, Z
 2dc:	80 32       	cpi	r24, 0x20	; 32
 2de:	21 f4       	brne	.+8      	; 0x2e8 <play_song+0x18e>
 2e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e4:	91 11       	cpse	r25, r1
 2e6:	f0 cf       	rjmp	.-32     	; 0x2c8 <play_song+0x16e>
			// Si el caracter es un n?mero, seteo la octava
			if (*song>='0' && *song<='9') octave = *song - '0';
 2e8:	80 53       	subi	r24, 0x30	; 48
 2ea:	8a 30       	cpi	r24, 0x0A	; 10
 2ec:	10 f4       	brcc	.+4      	; 0x2f2 <play_song+0x198>
 2ee:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <octave>
			song++;                   // Avanzo al pr?ximo caracter
 2f2:	31 96       	adiw	r30, 0x01	; 1
 2f4:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 2f8:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
			while (*song == ',' && song_playing) song++;  // Salteo ','
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <play_song+0x1ae>
 2fe:	31 96       	adiw	r30, 0x01	; 1
 300:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 304:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 308:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 30c:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 310:	80 81       	ld	r24, Z
 312:	8c 32       	cpi	r24, 0x2C	; 44
 314:	21 f4       	brne	.+8      	; 0x31e <play_song+0x1c4>
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 31a:	81 11       	cpse	r24, r1
 31c:	f0 cf       	rjmp	.-32     	; 0x2fe <play_song+0x1a4>
		}
		if (*song == 'b')           // Entra si es el seteo del tempo (beats por minuto)
 31e:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 322:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 326:	80 81       	ld	r24, Z
 328:	82 36       	cpi	r24, 0x62	; 98
 32a:	09 f0       	breq	.+2      	; 0x32e <play_song+0x1d4>
 32c:	93 c0       	rjmp	.+294    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		{
			tempo = 0;                // Seteo el tempo en cero (temporalmente)
 32e:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <tempo+0x1>
 332:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 336:	31 96       	adiw	r30, 0x01	; 1
 338:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 33c:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 340:	05 c0       	rjmp	.+10     	; 0x34c <play_song+0x1f2>
 342:	31 96       	adiw	r30, 0x01	; 1
 344:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 348:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 34c:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 350:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 354:	80 81       	ld	r24, Z
 356:	8d 33       	cpi	r24, 0x3D	; 61
 358:	51 f4       	brne	.+20     	; 0x36e <play_song+0x214>
 35a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 35e:	81 11       	cpse	r24, r1
 360:	f0 cf       	rjmp	.-32     	; 0x342 <play_song+0x1e8>
 362:	05 c0       	rjmp	.+10     	; 0x36e <play_song+0x214>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 364:	31 96       	adiw	r30, 0x01	; 1
 366:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 36a:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 36e:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 372:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 376:	80 81       	ld	r24, Z
 378:	80 32       	cpi	r24, 0x20	; 32
 37a:	21 f4       	brne	.+8      	; 0x384 <play_song+0x22a>
 37c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 380:	91 11       	cpse	r25, r1
 382:	f0 cf       	rjmp	.-32     	; 0x364 <play_song+0x20a>
			// Ahora leo el seteo del tempo (puede tener 3 d?gitos de largo)
			if (*song>='0' && *song<='9') tempo = *song - '0';
 384:	90 ed       	ldi	r25, 0xD0	; 208
 386:	98 0f       	add	r25, r24
 388:	9a 30       	cpi	r25, 0x0A	; 10
 38a:	30 f4       	brcc	.+12     	; 0x398 <play_song+0x23e>
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	c0 97       	sbiw	r24, 0x30	; 48
 390:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <tempo+0x1>
 394:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 398:	df 01       	movw	r26, r30
 39a:	11 96       	adiw	r26, 0x01	; 1
 39c:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <song+0x1>
 3a0:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <song>
			if (*song>='0' && *song<='9')
 3a4:	41 81       	ldd	r20, Z+1	; 0x01
 3a6:	80 ed       	ldi	r24, 0xD0	; 208
 3a8:	84 0f       	add	r24, r20
 3aa:	8a 30       	cpi	r24, 0x0A	; 10
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <play_song+0x256>
 3ae:	41 c0       	rjmp	.+130    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				tempo = tempo*10 + (*song - '0'); // El tempo tiene dos d?gitos
 3b0:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <tempo>
 3b4:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <tempo+0x1>
 3b8:	c9 01       	movw	r24, r18
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	84 0f       	add	r24, r20
 3d0:	91 1d       	adc	r25, r1
 3d2:	c0 97       	sbiw	r24, 0x30	; 48
 3d4:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <tempo+0x1>
 3d8:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <tempo>
				song++;                 // Avanzo al pr?ximo caracter
 3dc:	9d 01       	movw	r18, r26
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <song+0x1>
 3e6:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <song>
				if (*song>='0' && *song<='9')
 3ea:	11 96       	adiw	r26, 0x01	; 1
 3ec:	4c 91       	ld	r20, X
 3ee:	50 ed       	ldi	r21, 0xD0	; 208
 3f0:	54 0f       	add	r21, r20
 3f2:	5a 30       	cpi	r21, 0x0A	; 10
 3f4:	f0 f4       	brcc	.+60     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				{
					tempo = tempo*10 + (*song - '0'); // El tempo tiene tres d?gitos
 3f6:	bc 01       	movw	r22, r24
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	86 0f       	add	r24, r22
 40a:	97 1f       	adc	r25, r23
 40c:	84 0f       	add	r24, r20
 40e:	91 1d       	adc	r25, r1
 410:	c0 97       	sbiw	r24, 0x30	; 48
 412:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <tempo+0x1>
 416:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <tempo>
					song++;               // Avanzo al pr?ximo caracter
 41a:	2f 5f       	subi	r18, 0xFF	; 255
 41c:	3f 4f       	sbci	r19, 0xFF	; 255
 41e:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <song+0x1>
 422:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <song>
 426:	05 c0       	rjmp	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				}
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
 428:	31 96       	adiw	r30, 0x01	; 1
 42a:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 42e:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 432:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 436:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 43a:	80 81       	ld	r24, Z
 43c:	8c 32       	cpi	r24, 0x2C	; 44
 43e:	51 f4       	brne	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 440:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 444:	81 11       	cpse	r24, r1
 446:	f0 cf       	rjmp	.-32     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 448:	05 c0       	rjmp	.+10     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
 44a:	31 96       	adiw	r30, 0x01	; 1
 44c:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 450:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 454:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 458:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 45c:	80 81       	ld	r24, Z
 45e:	8c 32       	cpi	r24, 0x2C	; 44
 460:	21 f4       	brne	.+8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 462:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 466:	81 11       	cpse	r24, r1
 468:	f0 cf       	rjmp	.-32     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
	tempo = 63;                   // Tempo est?ndar = 63 bpm
	octave = 6;                   // Octava est?ndar = 6th
	while (*song != ':' && song_playing) song++;  // Busca el primer ':'
	song++;                       // Saltea el primer ':'
	while (*song!=':' && song_playing)            // Repite hasta encontrar ':'
<<<<<<< HEAD
 450:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 454:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 458:	80 81       	ld	r24, Z
 45a:	8a 33       	cpi	r24, 0x3A	; 58
 45c:	21 f0       	breq	.+8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 45e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 462:	91 11       	cpse	r25, r1
 464:	a4 ce       	rjmp	.-696    	; 0x1ae <play_song+0x4e>
=======
 46a:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 46e:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 472:	80 81       	ld	r24, Z
 474:	8a 33       	cpi	r24, 0x3A	; 58
 476:	21 f0       	breq	.+8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 478:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 47c:	91 11       	cpse	r25, r1
 47e:	a4 ce       	rjmp	.-696    	; 0x1c8 <play_song+0x6e>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
<<<<<<< HEAD
 466:	31 96       	adiw	r30, 0x01	; 1
 468:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 46c:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
 470:	e0 c0       	rjmp	.+448    	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
 472:	c0 91 8c 05 	lds	r28, 0x058C	; 0x80058c <octave>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
 476:	00 91 89 05 	lds	r16, 0x0589	; 0x800589 <duration>
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
 47a:	80 53       	subi	r24, 0x30	; 48
 47c:	8a 30       	cpi	r24, 0x0A	; 10
 47e:	e0 f4       	brcc	.+56     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		{
			temp_duration = *song - '0';
			song++;
 480:	af 01       	movw	r20, r30
 482:	4f 5f       	subi	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	50 93 83 05 	sts	0x0583, r21	; 0x800583 <__data_end+0x1>
 48a:	40 93 82 05 	sts	0x0582, r20	; 0x800582 <__data_end>
			if (*song>='0' && *song<='9')
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	20 ed       	ldi	r18, 0xD0	; 208
 492:	29 0f       	add	r18, r25
 494:	2a 30       	cpi	r18, 0x0A	; 10
 496:	78 f4       	brcc	.+30     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
			{
				temp_duration = temp_duration*10 + (*song - '0');
 498:	88 0f       	add	r24, r24
 49a:	08 2f       	mov	r16, r24
 49c:	00 0f       	add	r16, r16
 49e:	00 0f       	add	r16, r16
 4a0:	80 0f       	add	r24, r16
 4a2:	08 2f       	mov	r16, r24
 4a4:	09 0f       	add	r16, r25
 4a6:	00 53       	subi	r16, 0x30	; 48
				song++;
 4a8:	4f 5f       	subi	r20, 0xFF	; 255
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	50 93 83 05 	sts	0x0583, r21	; 0x800583 <__data_end+0x1>
 4b0:	40 93 82 05 	sts	0x0582, r20	; 0x800582 <__data_end>
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
=======
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 486:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
 48a:	e0 c0       	rjmp	.+448    	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
 48c:	c0 91 c5 04 	lds	r28, 0x04C5	; 0x8004c5 <octave>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
 490:	00 91 c2 04 	lds	r16, 0x04C2	; 0x8004c2 <duration>
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
 494:	80 53       	subi	r24, 0x30	; 48
 496:	8a 30       	cpi	r24, 0x0A	; 10
 498:	e0 f4       	brcc	.+56     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
		{
			temp_duration = *song - '0';
			song++;
 49a:	af 01       	movw	r20, r30
 49c:	4f 5f       	subi	r20, 0xFF	; 255
 49e:	5f 4f       	sbci	r21, 0xFF	; 255
 4a0:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <song+0x1>
 4a4:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <song>
			if (*song>='0' && *song<='9')
 4a8:	91 81       	ldd	r25, Z+1	; 0x01
 4aa:	20 ed       	ldi	r18, 0xD0	; 208
 4ac:	29 0f       	add	r18, r25
 4ae:	2a 30       	cpi	r18, 0x0A	; 10
 4b0:	78 f4       	brcc	.+30     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			{
				temp_duration = temp_duration*10 + (*song - '0');
 4b2:	88 0f       	add	r24, r24
 4b4:	08 2f       	mov	r16, r24
 4b6:	00 0f       	add	r16, r16
 4b8:	00 0f       	add	r16, r16
 4ba:	80 0f       	add	r24, r16
 4bc:	08 2f       	mov	r16, r24
 4be:	09 0f       	add	r16, r25
 4c0:	00 53       	subi	r16, 0x30	; 48
				song++;
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <song+0x1>
 4ca:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <song>
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
		{
			temp_duration = *song - '0';
<<<<<<< HEAD
 4b6:	08 2f       	mov	r16, r24
=======
 4d0:	08 2f       	mov	r16, r24
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
				temp_duration = temp_duration*10 + (*song - '0');
				song++;
			}
		}
		// Busco una nota
		switch (*song)
<<<<<<< HEAD
 4b8:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <__data_end>
 4bc:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <__data_end+0x1>
 4c0:	d9 01       	movw	r26, r18
 4c2:	ec 91       	ld	r30, X
 4c4:	8e 2f       	mov	r24, r30
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	e1 56       	subi	r30, 0x61	; 97
 4cc:	f1 09       	sbc	r31, r1
 4ce:	e7 30       	cpi	r30, 0x07	; 7
 4d0:	f1 05       	cpc	r31, r1
 4d2:	20 f4       	brcc	.+8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d4:	ec 5c       	subi	r30, 0xCC	; 204
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__tablejump2__>
=======
 4d2:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <song>
 4d6:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <song+0x1>
 4da:	d9 01       	movw	r26, r18
 4dc:	ec 91       	ld	r30, X
 4de:	8e 2f       	mov	r24, r30
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	e1 56       	subi	r30, 0x61	; 97
 4e6:	f1 09       	sbc	r31, r1
 4e8:	e7 30       	cpi	r30, 0x07	; 7
 4ea:	f1 05       	cpc	r31, r1
 4ec:	20 f4       	brcc	.+8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4ee:	ec 5c       	subi	r30, 0xCC	; 204
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	0c 94 56 06 	jmp	0xcac	; 0xcac <__tablejump2__>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	}
	song++;                       // Avanzo al pr?ximo caracter
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
	{
		current_note = 255;         // Nota por defecto = pausa
<<<<<<< HEAD
 4dc:	df ef       	ldi	r29, 0xFF	; 255
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
=======
 4f6:	df ef       	ldi	r29, 0xFF	; 255
 4f8:	0d c0       	rjmp	.+26     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		}
		// Busco una nota
		switch (*song)
		{
			case 'c': current_note = 0; break;    // C (do)
			case 'd': current_note = 2; break;    // D (re)
<<<<<<< HEAD
 4e0:	d2 e0       	ldi	r29, 0x02	; 2
 4e2:	0b c0       	rjmp	.+22     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			case 'e': current_note = 4; break;    // E (mi)
 4e4:	d4 e0       	ldi	r29, 0x04	; 4
 4e6:	09 c0       	rjmp	.+18     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			case 'f': current_note = 5; break;    // F (fa)
 4e8:	d5 e0       	ldi	r29, 0x05	; 5
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			case 'g': current_note = 7; break;    // G (sol)
 4ec:	d7 e0       	ldi	r29, 0x07	; 7
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			case 'a': current_note = 9; break;    // A (la)
 4f0:	d9 e0       	ldi	r29, 0x09	; 9
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			case 'b': current_note = 11; break;   // B (si)
 4f4:	db e0       	ldi	r29, 0x0B	; 11
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
=======
 4fa:	d2 e0       	ldi	r29, 0x02	; 2
 4fc:	0b c0       	rjmp	.+22     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			case 'e': current_note = 4; break;    // E (mi)
 4fe:	d4 e0       	ldi	r29, 0x04	; 4
 500:	09 c0       	rjmp	.+18     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			case 'f': current_note = 5; break;    // F (fa)
 502:	d5 e0       	ldi	r29, 0x05	; 5
 504:	07 c0       	rjmp	.+14     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			case 'g': current_note = 7; break;    // G (sol)
 506:	d7 e0       	ldi	r29, 0x07	; 7
 508:	05 c0       	rjmp	.+10     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			case 'a': current_note = 9; break;    // A (la)
 50a:	d9 e0       	ldi	r29, 0x09	; 9
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			case 'b': current_note = 11; break;   // B (si)
 50e:	db e0       	ldi	r29, 0x0B	; 11
 510:	01 c0       	rjmp	.+2      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			}
		}
		// Busco una nota
		switch (*song)
		{
			case 'c': current_note = 0; break;    // C (do)
<<<<<<< HEAD
 4f8:	d0 e0       	ldi	r29, 0x00	; 0
=======
 512:	d0 e0       	ldi	r29, 0x00	; 0
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			case 'g': current_note = 7; break;    // G (sol)
			case 'a': current_note = 9; break;    // A (la)
			case 'b': current_note = 11; break;   // B (si)
			case 'p': current_note = 255; break;  // pausa
		}
		song++;                     // Avanzo al pr?ximo caracter
<<<<<<< HEAD
 4fa:	c9 01       	movw	r24, r18
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <__data_end+0x1>
 502:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <__data_end>
		// Busco un '#' siguiendo la nota
		if (*song=='#')
 506:	f9 01       	movw	r30, r18
 508:	21 81       	ldd	r18, Z+1	; 0x01
 50a:	23 32       	cpi	r18, 0x23	; 35
 50c:	31 f4       	brne	.+12     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
		{
			current_note++;   // Incremento la nota (A->A#, C->C#, D->D#, F->F#, G->G#)
 50e:	df 5f       	subi	r29, 0xFF	; 255
			song++;                   // Avanzo al pr?ximo caracter
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <__data_end+0x1>
 516:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <__data_end>
=======
 514:	c9 01       	movw	r24, r18
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <song+0x1>
 51c:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <song>
		// Busco un '#' siguiendo la nota
		if (*song=='#')
 520:	f9 01       	movw	r30, r18
 522:	21 81       	ldd	r18, Z+1	; 0x01
 524:	23 32       	cpi	r18, 0x23	; 35
 526:	31 f4       	brne	.+12     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		{
			current_note++;   // Incremento la nota (A->A#, C->C#, D->D#, F->F#, G->G#)
 528:	df 5f       	subi	r29, 0xFF	; 255
			song++;                   // Avanzo al pr?ximo caracter
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <song+0x1>
 530:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <song>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5




		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
<<<<<<< HEAD
 51a:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 51e:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 522:	80 81       	ld	r24, Z
 524:	8e 32       	cpi	r24, 0x2E	; 46
 526:	41 f4       	brne	.+16     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 528:	31 96       	adiw	r30, 0x01	; 1
 52a:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 52e:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
=======
 534:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 538:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 53c:	80 81       	ld	r24, Z
 53e:	8e 32       	cpi	r24, 0x2E	; 46
 540:	41 f4       	brne	.+16     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 542:	31 96       	adiw	r30, 0x01	; 1
 544:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 548:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5


		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
<<<<<<< HEAD
 532:	ff 24       	eor	r15, r15
 534:	f3 94       	inc	r15
 536:	01 c0       	rjmp	.+2      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
=======
 54c:	ff 24       	eor	r15, r15
 54e:	f3 94       	inc	r15
 550:	01 c0       	rjmp	.+2      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
		dot_flag = 0;               // Borro el flag de detecci?n de punto
<<<<<<< HEAD
 538:	f1 2c       	mov	r15, r1
=======
 552:	f1 2c       	mov	r15, r1
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
<<<<<<< HEAD
 53a:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 53e:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 542:	80 81       	ld	r24, Z
 544:	80 53       	subi	r24, 0x30	; 48
 546:	8a 30       	cpi	r24, 0x0A	; 10
 548:	30 f4       	brcc	.+12     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
 54a:	31 96       	adiw	r30, 0x01	; 1
 54c:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 550:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
=======
 554:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 558:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 55c:	80 81       	ld	r24, Z
 55e:	80 53       	subi	r24, 0x30	; 48
 560:	8a 30       	cpi	r24, 0x0A	; 10
 562:	30 f4       	brcc	.+12     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
 564:	31 96       	adiw	r30, 0x01	; 1
 566:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 56a:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			song++;                   // Avanzo al pr?ximo caracter
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
<<<<<<< HEAD
 554:	c8 2f       	mov	r28, r24
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
 556:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 55a:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 55e:	80 81       	ld	r24, Z
 560:	8e 32       	cpi	r24, 0x2E	; 46
 562:	69 f4       	brne	.+26     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 564:	31 96       	adiw	r30, 0x01	; 1
 566:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 56a:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
=======
 56e:	c8 2f       	mov	r28, r24
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
 570:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 574:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 578:	80 81       	ld	r24, Z
 57a:	8e 32       	cpi	r24, 0x2E	; 46
 57c:	69 f4       	brne	.+26     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 57e:	31 96       	adiw	r30, 0x01	; 1
 580:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 584:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
<<<<<<< HEAD
 56e:	ff 24       	eor	r15, r15
 570:	f3 94       	inc	r15
 572:	05 c0       	rjmp	.+10     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
			song++;                   // Avanzo al pr?ximo caracter
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
 574:	31 96       	adiw	r30, 0x01	; 1
 576:	f0 93 83 05 	sts	0x0583, r31	; 0x800583 <__data_end+0x1>
 57a:	e0 93 82 05 	sts	0x0582, r30	; 0x800582 <__data_end>
 57e:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 582:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 586:	80 81       	ld	r24, Z
 588:	8c 32       	cpi	r24, 0x2C	; 44
 58a:	21 f4       	brne	.+8      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 58c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 590:	81 11       	cpse	r24, r1
 592:	f0 cf       	rjmp	.-32     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
		// Calculo la duraci?n de la nota
		calc_duration = (60000/tempo)/(temp_duration);
 594:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <tempo>
 598:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <tempo+0x1>
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	60 e6       	ldi	r22, 0x60	; 96
 5a2:	7a ee       	ldi	r23, 0xEA	; 234
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 09 06 	call	0xc12	; 0xc12 <__divmodsi4>
 5ac:	ca 01       	movw	r24, r20
 5ae:	b9 01       	movw	r22, r18
 5b0:	20 2f       	mov	r18, r16
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	0e 94 09 06 	call	0xc12	; 0xc12 <__divmodsi4>
		calc_duration *= 4;         // La nota completa tiene cuatro beats
 5bc:	22 0f       	add	r18, r18
 5be:	33 1f       	adc	r19, r19
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
		// Chequeo si el flag de punto est? activado, de ser as?, extiendo la duraci?n en un 50%
		if (dot_flag) calc_duration = (calc_duration*3)/2;
 5c4:	ff 20       	and	r15, r15
 5c6:	39 f0       	breq	.+14     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 5c8:	b9 01       	movw	r22, r18
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	26 0f       	add	r18, r22
 5d0:	37 1f       	adc	r19, r23
 5d2:	36 95       	lsr	r19
 5d4:	27 95       	ror	r18
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funci?n sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
 5d6:	df 3f       	cpi	r29, 0xFF	; 255
 5d8:	c1 f0       	breq	.+48     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
 5da:	8c 2f       	mov	r24, r28
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	04 97       	sbiw	r24, 0x04	; 4
 5e0:	fc 01       	movw	r30, r24
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	e8 0f       	add	r30, r24
 5e8:	f9 1f       	adc	r31, r25
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	ed 0f       	add	r30, r29
 5f4:	f1 1d       	adc	r31, r1
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	e7 5f       	subi	r30, 0xF7	; 247
 5fc:	fe 4f       	sbci	r31, 0xFE	; 254
 5fe:	b9 01       	movw	r22, r18
 600:	80 81       	ld	r24, Z
 602:	91 81       	ldd	r25, Z+1	; 0x01
 604:	0e 94 7b 00 	call	0xf6	; 0xf6 <sound>
 608:	0a c0       	rjmp	.+20     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
 60a:	30 93 8b 05 	sts	0x058B, r19	; 0x80058b <duration_timer+0x1>
 60e:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <duration_timer>
			sound_playing = 1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <sound_playing+0x1>
 61a:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <sound_playing>
		}
		while (sound_playing && song_playing);      // Espero a la que nota/pausa en curso finalice
 61e:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <sound_playing>
 622:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <sound_playing+0x1>
 626:	89 2b       	or	r24, r25
 628:	21 f0       	breq	.+8      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
 62a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 62e:	81 11       	cpse	r24, r1
 630:	f6 cf       	rjmp	.-20     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
=======
 588:	ff 24       	eor	r15, r15
 58a:	f3 94       	inc	r15
 58c:	05 c0       	rjmp	.+10     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
			song++;                   // Avanzo al pr?ximo caracter
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
 58e:	31 96       	adiw	r30, 0x01	; 1
 590:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <song+0x1>
 594:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <song>
 598:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 59c:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 5a0:	80 81       	ld	r24, Z
 5a2:	8c 32       	cpi	r24, 0x2C	; 44
 5a4:	21 f4       	brne	.+8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 5a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5aa:	81 11       	cpse	r24, r1
 5ac:	f0 cf       	rjmp	.-32     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
		// Calculo la duraci?n de la nota
		calc_duration = (60000/tempo)/(temp_duration);
 5ae:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <tempo>
 5b2:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <tempo+0x1>
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	60 e6       	ldi	r22, 0x60	; 96
 5bc:	7a ee       	ldi	r23, 0xEA	; 234
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divmodsi4>
 5c6:	ca 01       	movw	r24, r20
 5c8:	b9 01       	movw	r22, r18
 5ca:	20 2f       	mov	r18, r16
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divmodsi4>
		calc_duration *= 4;         // La nota completa tiene cuatro beats
 5d6:	22 0f       	add	r18, r18
 5d8:	33 1f       	adc	r19, r19
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
		// Chequeo si el flag de punto est? activado, de ser as?, extiendo la duraci?n en un 50%
		if (dot_flag) calc_duration = (calc_duration*3)/2;
 5de:	ff 20       	and	r15, r15
 5e0:	39 f0       	breq	.+14     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5e2:	b9 01       	movw	r22, r18
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	26 0f       	add	r18, r22
 5ea:	37 1f       	adc	r19, r23
 5ec:	36 95       	lsr	r19
 5ee:	27 95       	ror	r18
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funci?n sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
 5f0:	df 3f       	cpi	r29, 0xFF	; 255
 5f2:	c1 f0       	breq	.+48     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 5f4:	8c 2f       	mov	r24, r28
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	04 97       	sbiw	r24, 0x04	; 4
 5fa:	fc 01       	movw	r30, r24
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	e8 0f       	add	r30, r24
 602:	f9 1f       	adc	r31, r25
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	ed 0f       	add	r30, r29
 60e:	f1 1d       	adc	r31, r1
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	e9 5f       	subi	r30, 0xF9	; 249
 616:	fe 4f       	sbci	r31, 0xFE	; 254
 618:	b9 01       	movw	r22, r18
 61a:	80 81       	ld	r24, Z
 61c:	91 81       	ldd	r25, Z+1	; 0x01
 61e:	0e 94 78 00 	call	0xf0	; 0xf0 <sound>
 622:	0a c0       	rjmp	.+20     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
 624:	30 93 c4 04 	sts	0x04C4, r19	; 0x8004c4 <duration_timer+0x1>
 628:	20 93 c3 04 	sts	0x04C3, r18	; 0x8004c3 <duration_timer>
			sound_playing = 1;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <sound_playing+0x1>
 634:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <sound_playing>
		}
		while (sound_playing && song_playing);      // Espero a la que nota/pausa en curso finalice
 638:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <sound_playing>
 63c:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <sound_playing+0x1>
 640:	89 2b       	or	r24, r25
 642:	21 f0       	breq	.+8      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
 644:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 648:	81 11       	cpse	r24, r1
 64a:	f6 cf       	rjmp	.-20     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
<<<<<<< HEAD
 632:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <__data_end>
 636:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <__data_end+0x1>
 63a:	80 81       	ld	r24, Z
 63c:	88 23       	and	r24, r24
 63e:	21 f0       	breq	.+8      	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 640:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 644:	91 11       	cpse	r25, r1
 646:	15 cf       	rjmp	.-470    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
=======
 64c:	e0 91 bb 04 	lds	r30, 0x04BB	; 0x8004bb <song>
 650:	f0 91 bc 04 	lds	r31, 0x04BC	; 0x8004bc <song+0x1>
 654:	80 81       	ld	r24, Z
 656:	88 23       	and	r24, r24
 658:	21 f0       	breq	.+8      	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
 65a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 65e:	91 11       	cpse	r25, r1
 660:	15 cf       	rjmp	.-470    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			duration_timer = calc_duration;
			sound_playing = 1;
		}
		while (sound_playing && song_playing);      // Espero a la que nota/pausa en curso finalice
	}
}
<<<<<<< HEAD
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	08 95       	ret

00000652 <__vector_14>:
#include <avr/interrupt.h>
#include <string.h>
=======
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	0f 91       	pop	r16
 668:	ff 90       	pop	r15
 66a:	08 95       	ret

0000066c <__vector_14>:
#include "UART/UART.h"
#include "Menu/Menu.h"
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5

// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
<<<<<<< HEAD
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
 674:	0e 94 76 00 	call	0xec	; 0xec <get_duration_timer>
	if (duration_timer) {
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	21 f0       	breq	.+8      	; 0x684 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_duration_timer>
 682:	06 c0       	rjmp	.+12     	; 0x690 <__vector_14+0x3e>
=======
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	2f 93       	push	r18
 678:	3f 93       	push	r19
 67a:	4f 93       	push	r20
 67c:	5f 93       	push	r21
 67e:	6f 93       	push	r22
 680:	7f 93       	push	r23
 682:	8f 93       	push	r24
 684:	9f 93       	push	r25
 686:	af 93       	push	r26
 688:	bf 93       	push	r27
 68a:	ef 93       	push	r30
 68c:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
 68e:	0e 94 73 00 	call	0xe6	; 0xe6 <get_duration_timer>
	if (duration_timer) {
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	21 f0       	breq	.+8      	; 0x69e <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	0e 94 69 00 	call	0xd2	; 0xd2 <set_duration_timer>
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <__vector_14+0x3e>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
<<<<<<< HEAD
 684:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 71 00 	call	0xe2	; 0xe2 <set_sound_playing>
	}
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <main>:
=======
 69e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 6e 00 	call	0xdc	; 0xdc <set_sound_playing>
	}
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <main>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5


	// ------------------------ Timer 0 ------------------------

	// Configuro una interrupci?n cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
<<<<<<< HEAD
 6b2:	88 ef       	ldi	r24, 0xF8	; 248
 6b4:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 6ba:	93 e0       	ldi	r25, 0x03	; 3
 6bc:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci?n de comparaci?n
 6be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
=======
 6cc:	88 ef       	ldi	r24, 0xF8	; 248
 6ce:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 6d4:	93 e0       	ldi	r25, 0x03	; 3
 6d6:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci?n de comparaci?n
 6d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5


	// // ------------------------ Timer 1 ------------------------

	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
<<<<<<< HEAD
 6c2:	e0 e8       	ldi	r30, 0x80	; 128
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	80 64       	ori	r24, 0x40	; 64
 6ca:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 6cc:	e1 e8       	ldi	r30, 0x81	; 129
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	89 60       	ori	r24, 0x09	; 9
 6d4:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB ser? el pin de salida
 6d6:	84 b1       	in	r24, 0x04	; 4
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	84 b9       	out	0x04, r24	; 4
=======
 6dc:	e0 e8       	ldi	r30, 0x80	; 128
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	80 64       	ori	r24, 0x40	; 64
 6e4:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 6e6:	e1 e8       	ldi	r30, 0x81	; 129
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	89 60       	ori	r24, 0x09	; 9
 6ee:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB ser? el pin de salida
 6f0:	84 b1       	in	r24, 0x04	; 4
 6f2:	82 60       	ori	r24, 0x02	; 2
 6f4:	84 b9       	out	0x04, r24	; 4
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	char MENU_flag=0;


	//Habilito la mAscara de interrupciones

	Buffer_Init();
<<<<<<< HEAD
 6dc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 6e0:	87 e6       	ldi	r24, 0x67	; 103
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SerialPort_Init>
	SerialPort_TX_Enable();
 6e8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 6ec:	0e 94 90 04 	call	0x920	; 0x920 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 6f0:	0e 94 96 04 	call	0x92c	; 0x92c <SerialPort_RX_Interrupt_Enable>

	MENU_display_options_bienvenida();
 6f4:	0e 94 a1 03 	call	0x742	; 0x742 <MENU_display_options_bienvenida>
	MENU_display_options();
 6f8:	0e 94 90 03 	call	0x720	; 0x720 <MENU_display_options>
	sei();
 6fc:	78 94       	sei
	
	while(1)
	{
		if (get_FLAG_datos_recibidos() == 1) {
 6fe:	0e 94 40 05 	call	0xa80	; 0xa80 <get_FLAG_datos_recibidos>
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	e1 f7       	brne	.-8      	; 0x6fe <main+0x4c>
			//cli();
			set_FLAG_datos_recibidos(0);
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 43 05 	call	0xa86	; 0xa86 <set_FLAG_datos_recibidos>
			
			// procesamiento BUffer_Rx
			MENU_process_inpt();
 70e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <MENU_process_inpt>
			
			sei();
 712:	78 94       	sei
 714:	f4 cf       	rjmp	.-24     	; 0x6fe <main+0x4c>

00000716 <MENU_display_songs>:
=======
 6f6:	0e 94 96 04 	call	0x92c	; 0x92c <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 6fa:	87 e6       	ldi	r24, 0x67	; 103
 6fc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <SerialPort_Init>
	SerialPort_TX_Enable();
 700:	0e 94 78 04 	call	0x8f0	; 0x8f0 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 704:	0e 94 8a 04 	call	0x914	; 0x914 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 708:	0e 94 90 04 	call	0x920	; 0x920 <SerialPort_RX_Interrupt_Enable>

	sei();
 70c:	78 94       	sei
	MENU_display_options_bienvenida();
 70e:	0e 94 a7 03 	call	0x74e	; 0x74e <MENU_display_options_bienvenida>
	MENU_display_options();
 712:	0e 94 96 03 	call	0x72c	; 0x72c <MENU_display_options>
	while(1)
	{
		if (get_FLAG_datos_recibidos() == 1) {
 716:	0e 94 2e 05 	call	0xa5c	; 0xa5c <get_FLAG_datos_recibidos>
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	e1 f7       	brne	.-8      	; 0x716 <main+0x4a>
			//cli();
			set_FLAG_datos_recibidos(0);
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	0e 94 31 05 	call	0xa62	; 0xa62 <set_FLAG_datos_recibidos>
			
			// procesamiento BUffer_Rx
			MENU_process_inpt();
 724:	0e 94 4a 04 	call	0x894	; 0x894 <MENU_process_inpt>
			
			sei();
 728:	78 94       	sei
 72a:	f5 cf       	rjmp	.-22     	; 0x716 <main+0x4a>

0000072c <MENU_display_options>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
#define LONG_NUM 56
const char msjReset[] = "    ==> RESET: Reinicia el sistema al estado inicial\n";
#define LONG_RESET 44

<<<<<<< HEAD
void MENU_display_songs(void){
	const char * songs = AUDIO_get_songs_menu();
 716:	0e 94 5a 00 	call	0xb4	; 0xb4 <AUDIO_get_songs_menu>
	UART_Write_String_To_Buffer(songs);
 71a:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
 71e:	08 95       	ret

00000720 <MENU_display_options>:
}

void MENU_display_options(){
	UART_Write_String_To_Buffer(msjPlay);
 720:	84 e1       	ldi	r24, 0x14	; 20
 722:	95 e0       	ldi	r25, 0x05	; 5
 724:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 728:	8a ed       	ldi	r24, 0xDA	; 218
 72a:	94 e0       	ldi	r25, 0x04	; 4
 72c:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 730:	89 e9       	ldi	r24, 0x99	; 153
 732:	94 e0       	ldi	r25, 0x04	; 4
 734:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 738:	83 e6       	ldi	r24, 0x63	; 99
 73a:	94 e0       	ldi	r25, 0x04	; 4
 73c:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
 740:	08 95       	ret

00000742 <MENU_display_options_bienvenida>:
=======
void MENU_display_options(void){
	UART_Write_String_To_Buffer(msjPlay);
 72c:	83 e5       	ldi	r24, 0x53	; 83
 72e:	94 e0       	ldi	r25, 0x04	; 4
 730:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 734:	81 e2       	ldi	r24, 0x21	; 33
 736:	94 e0       	ldi	r25, 0x04	; 4
 738:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 73c:	88 ee       	ldi	r24, 0xE8	; 232
 73e:	93 e0       	ldi	r25, 0x03	; 3
 740:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 744:	8a eb       	ldi	r24, 0xBA	; 186
 746:	93 e0       	ldi	r25, 0x03	; 3
 748:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 74c:	08 95       	ret

0000074e <MENU_display_options_bienvenida>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

void MENU_display_options_bienvenida(){
	UART_Write_String_To_Buffer(msjBienvenida);
<<<<<<< HEAD
 742:	84 e4       	ldi	r24, 0x44	; 68
 744:	95 e0       	ldi	r25, 0x05	; 5
 746:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
	MENU_display_songs();
 74a:	0e 94 8b 03 	call	0x716	; 0x716 <MENU_display_songs>
	UART_Write_String_To_Buffer("\n");
 74e:	81 e6       	ldi	r24, 0x61	; 97
 750:	94 e0       	ldi	r25, 0x04	; 4
 752:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer("Comandos:");
 756:	8a ec       	ldi	r24, 0xCA	; 202
 758:	93 e0       	ldi	r25, 0x03	; 3
 75a:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
 75e:	08 95       	ret

00000760 <create_substring>:
	
}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
 760:	cf 92       	push	r12
 762:	df 92       	push	r13
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	8c 01       	movw	r16, r24
 772:	7b 01       	movw	r14, r22
	uint16_t j = 0;
 774:	c0 e0       	ldi	r28, 0x00	; 0
 776:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (buffer->data[buffer->index_lectura] != '\r') {
 778:	0a c0       	rjmp	.+20     	; 0x78e <create_substring+0x2e>
		substring[j++] = buffer->data[buffer->index_lectura];
 77a:	6e 01       	movw	r12, r28
 77c:	9f ef       	ldi	r25, 0xFF	; 255
 77e:	c9 1a       	sub	r12, r25
 780:	d9 0a       	sbc	r13, r25
 782:	ce 0d       	add	r28, r14
 784:	df 1d       	adc	r29, r15
 786:	88 83       	st	Y, r24
		inc_RX_index_lectura();
 788:	0e 94 24 05 	call	0xa48	; 0xa48 <inc_RX_index_lectura>
=======
 74e:	8b e7       	ldi	r24, 0x7B	; 123
 750:	94 e0       	ldi	r25, 0x04	; 4
 752:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 756:	08 95       	ret

00000758 <create_substring>:
}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
 758:	cf 92       	push	r12
 75a:	df 92       	push	r13
 75c:	ef 92       	push	r14
 75e:	ff 92       	push	r15
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	8c 01       	movw	r16, r24
 76a:	7b 01       	movw	r14, r22
	uint16_t j = 0;
 76c:	c0 e0       	ldi	r28, 0x00	; 0
 76e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (buffer->data[buffer->index_lectura] != '\r') {
 770:	0a c0       	rjmp	.+20     	; 0x786 <create_substring+0x2e>
		substring[j++] = buffer->data[buffer->index_lectura];
 772:	6e 01       	movw	r12, r28
 774:	9f ef       	ldi	r25, 0xFF	; 255
 776:	c9 1a       	sub	r12, r25
 778:	d9 0a       	sbc	r13, r25
 77a:	ce 0d       	add	r28, r14
 77c:	df 1d       	adc	r29, r15
 77e:	88 83       	st	Y, r24
		inc_RX_index_lectura();
 780:	0e 94 ee 04 	call	0x9dc	; 0x9dc <inc_RX_index_lectura>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
	uint16_t j = 0;
	
	while (buffer->data[buffer->index_lectura] != '\r') {
		substring[j++] = buffer->data[buffer->index_lectura];
<<<<<<< HEAD
 78c:	e6 01       	movw	r28, r12
=======
 784:	e6 01       	movw	r28, r12
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
	uint16_t j = 0;
	
	while (buffer->data[buffer->index_lectura] != '\r') {
<<<<<<< HEAD
 78e:	f8 01       	movw	r30, r16
 790:	ea 59       	subi	r30, 0x9A	; 154
 792:	ff 4f       	sbci	r31, 0xFF	; 255
 794:	01 90       	ld	r0, Z+
 796:	f0 81       	ld	r31, Z
 798:	e0 2d       	mov	r30, r0
 79a:	e0 0f       	add	r30, r16
 79c:	f1 1f       	adc	r31, r17
 79e:	80 81       	ld	r24, Z
 7a0:	8d 30       	cpi	r24, 0x0D	; 13
 7a2:	59 f7       	brne	.-42     	; 0x77a <create_substring+0x1a>
=======
 786:	f8 01       	movw	r30, r16
 788:	ee 56       	subi	r30, 0x6E	; 110
 78a:	fe 4f       	sbci	r31, 0xFE	; 254
 78c:	01 90       	ld	r0, Z+
 78e:	f0 81       	ld	r31, Z
 790:	e0 2d       	mov	r30, r0
 792:	e0 0f       	add	r30, r16
 794:	f1 1f       	adc	r31, r17
 796:	80 81       	ld	r24, Z
 798:	8d 30       	cpi	r24, 0x0D	; 13
 79a:	59 f7       	brne	.-42     	; 0x772 <create_substring+0x1a>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		substring[j++] = buffer->data[buffer->index_lectura];
		inc_RX_index_lectura();
	}
	inc_RX_index_lectura();
<<<<<<< HEAD
 7a4:	0e 94 24 05 	call	0xa48	; 0xa48 <inc_RX_index_lectura>
	inc_RX_index_lectura();
 7a8:	0e 94 24 05 	call	0xa48	; 0xa48 <inc_RX_index_lectura>
	substring[j] = '\0'; // append null character at the end
 7ac:	ce 0d       	add	r28, r14
 7ae:	df 1d       	adc	r29, r15
 7b0:	18 82       	st	Y, r1
}
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	ff 90       	pop	r15
 7bc:	ef 90       	pop	r14
 7be:	df 90       	pop	r13
 7c0:	cf 90       	pop	r12
 7c2:	08 95       	ret

000007c4 <MENU_select_option>:


void MENU_select_option(char * inpt){
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <MENU_select_option+0xa>
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	8c 01       	movw	r16, r24
	if (strcmp(inpt, "PLAY") == 0){
 7d4:	64 ed       	ldi	r22, 0xD4	; 212
 7d6:	73 e0       	ldi	r23, 0x03	; 3
 7d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <strcmp>
 7dc:	89 2b       	or	r24, r25
 7de:	39 f4       	brne	.+14     	; 0x7ee <MENU_select_option+0x2a>
		
		UART_Write_String_To_Buffer("Playing song\n");
 7e0:	89 ed       	ldi	r24, 0xD9	; 217
 7e2:	93 e0       	ldi	r25, 0x03	; 3
 7e4:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
		play_song();
 7e8:	0e 94 b0 00 	call	0x160	; 0x160 <play_song>
 7ec:	52 c0       	rjmp	.+164    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
		
	}
	else if (strcmp(inpt, "STOP") == 0){
 7ee:	67 ee       	ldi	r22, 0xE7	; 231
 7f0:	73 e0       	ldi	r23, 0x03	; 3
 7f2:	c8 01       	movw	r24, r16
 7f4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <strcmp>
 7f8:	89 2b       	or	r24, r25
 7fa:	39 f4       	brne	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		
		stop_song();
 7fc:	0e 94 a4 00 	call	0x148	; 0x148 <stop_song>
		UART_Write_String_To_Buffer("Stopped song\n");
 800:	8c ee       	ldi	r24, 0xEC	; 236
 802:	93 e0       	ldi	r25, 0x03	; 3
 804:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
 808:	44 c0       	rjmp	.+136    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
		
	}
	else if (strncmp(inpt, "NUM", 3) == 0){
 80a:	43 e0       	ldi	r20, 0x03	; 3
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	6a ef       	ldi	r22, 0xFA	; 250
 810:	73 e0       	ldi	r23, 0x03	; 3
 812:	c8 01       	movw	r24, r16
 814:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strncmp>
 818:	89 2b       	or	r24, r25
 81a:	19 f5       	brne	.+70     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
		
		// Si el formato es "NUM X"
		if (inpt[3] == ' ' && inpt[5] == '\0') {
 81c:	f8 01       	movw	r30, r16
 81e:	83 81       	ldd	r24, Z+3	; 0x03
 820:	80 32       	cpi	r24, 0x20	; 32
 822:	d1 f4       	brne	.+52     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 824:	85 81       	ldd	r24, Z+5	; 0x05
 826:	81 11       	cpse	r24, r1
 828:	17 c0       	rjmp	.+46     	; 0x858 <__DATA_REGION_LENGTH__+0x58>

			// value contiene el valor "X"
			char str[2] = "";
 82a:	1a 82       	std	Y+2, r1	; 0x02
 82c:	19 82       	std	Y+1, r1	; 0x01
			str[0] = inpt[4];
 82e:	84 81       	ldd	r24, Z+4	; 0x04
 830:	89 83       	std	Y+1, r24	; 0x01
			uint8_t value = inpt[4] - '0';
 832:	10 ed       	ldi	r17, 0xD0	; 208
 834:	18 0f       	add	r17, r24
=======
 79c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <inc_RX_index_lectura>
	inc_RX_index_lectura();
 7a0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <inc_RX_index_lectura>
	substring[j] = '\0'; // append null character at the end
 7a4:	ce 0d       	add	r28, r14
 7a6:	df 1d       	adc	r29, r15
 7a8:	18 82       	st	Y, r1
}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	ff 90       	pop	r15
 7b4:	ef 90       	pop	r14
 7b6:	df 90       	pop	r13
 7b8:	cf 90       	pop	r12
 7ba:	08 95       	ret

000007bc <MENU_select_option>:
	UART_Write_String_To_Buffer(substring);
	MENU_select_option(substring);
}


void MENU_select_option(char * inpt){
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <MENU_select_option+0xa>
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	8c 01       	movw	r16, r24
	if (strcmp(inpt, "PLAY") == 0){
 7cc:	6b e2       	ldi	r22, 0x2B	; 43
 7ce:	73 e0       	ldi	r23, 0x03	; 3
 7d0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strcmp>
 7d4:	89 2b       	or	r24, r25
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <MENU_select_option+0x2a>
		
		UART_Write_String_To_Buffer("Playing song\n");
 7d8:	80 e3       	ldi	r24, 0x30	; 48
 7da:	93 e0       	ldi	r25, 0x03	; 3
 7dc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
		play_song();
 7e0:	0e 94 ad 00 	call	0x15a	; 0x15a <play_song>
 7e4:	50 c0       	rjmp	.+160    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
		
	}
	else if (strcmp(inpt, "STOP") == 0){
 7e6:	6e e3       	ldi	r22, 0x3E	; 62
 7e8:	73 e0       	ldi	r23, 0x03	; 3
 7ea:	c8 01       	movw	r24, r16
 7ec:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strcmp>
 7f0:	89 2b       	or	r24, r25
 7f2:	39 f4       	brne	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		
		stop_song();
 7f4:	0e 94 a1 00 	call	0x142	; 0x142 <stop_song>
		UART_Write_String_To_Buffer("Stopped song\n");
 7f8:	83 e4       	ldi	r24, 0x43	; 67
 7fa:	93 e0       	ldi	r25, 0x03	; 3
 7fc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 800:	42 c0       	rjmp	.+132    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
		
	}
	else if (strncmp(inpt, "NUM", 3) == 0){
 802:	43 e0       	ldi	r20, 0x03	; 3
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	61 e5       	ldi	r22, 0x51	; 81
 808:	73 e0       	ldi	r23, 0x03	; 3
 80a:	c8 01       	movw	r24, r16
 80c:	0e 94 96 06 	call	0xd2c	; 0xd2c <strncmp>
 810:	89 2b       	or	r24, r25
 812:	11 f5       	brne	.+68     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		
		// Si el formato es "NUM X"
		if (inpt[3] == ' ' && inpt[5] == '\0') {
 814:	f8 01       	movw	r30, r16
 816:	83 81       	ldd	r24, Z+3	; 0x03
 818:	80 32       	cpi	r24, 0x20	; 32
 81a:	c9 f4       	brne	.+50     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 81c:	85 81       	ldd	r24, Z+5	; 0x05
 81e:	81 11       	cpse	r24, r1
 820:	16 c0       	rjmp	.+44     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>

			// value contiene el valor "X"
			char str[2] = "";
 822:	1a 82       	std	Y+2, r1	; 0x02
 824:	19 82       	std	Y+1, r1	; 0x01
			str[0] = inpt[4];
 826:	84 81       	ldd	r24, Z+4	; 0x04
 828:	89 83       	std	Y+1, r24	; 0x01
			uint8_t value = inpt[4] - '0';
 82a:	10 ed       	ldi	r17, 0xD0	; 208
 82c:	18 0f       	add	r17, r24
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			
			

			UART_Write_String_To_Buffer_No_NewLine("Song selected: ");
<<<<<<< HEAD
 836:	8e ef       	ldi	r24, 0xFE	; 254
 838:	93 e0       	ldi	r25, 0x03	; 3
 83a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UART_Write_String_To_Buffer_No_NewLine>
			UART_Write_String_To_Buffer(str);
 83e:	ce 01       	movw	r24, r28
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
			UART_Write_String_To_Buffer("\n");
 846:	81 e6       	ldi	r24, 0x61	; 97
 848:	94 e0       	ldi	r25, 0x04	; 4
 84a:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
			
			set_song(value);
 84e:	81 2f       	mov	r24, r17
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 5f 00 	call	0xbe	; 0xbe <set_song>
=======
 82e:	85 e5       	ldi	r24, 0x55	; 85
 830:	93 e0       	ldi	r25, 0x03	; 3
 832:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <UART_Write_String_To_Buffer_No_NewLine>
			UART_Write_String_To_Buffer(str);
 836:	ce 01       	movw	r24, r28
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
			UART_Write_String_To_Buffer("\n");
 83e:	88 eb       	ldi	r24, 0xB8	; 184
 840:	93 e0       	ldi	r25, 0x03	; 3
 842:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
			
			set_song(value);
 846:	81 2f       	mov	r24, r17
 848:	0e 94 5a 00 	call	0xb4	; 0xb4 <set_song>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		
	}
	else if (strncmp(inpt, "NUM", 3) == 0){
		
		// Si el formato es "NUM X"
		if (inpt[3] == ' ' && inpt[5] == '\0') {
<<<<<<< HEAD
 856:	1d c0       	rjmp	.+58     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
=======
 84c:	1c c0       	rjmp	.+56     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5

		}
		else {
			
			// Si el formato no es "NUM X"
			UART_Write_String_To_Buffer("Command usage: NUM [number of song]\n");
<<<<<<< HEAD
 858:	8e e0       	ldi	r24, 0x0E	; 14
 85a:	94 e0       	ldi	r25, 0x04	; 4
 85c:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
 860:	18 c0       	rjmp	.+48     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
=======
 84e:	85 e6       	ldi	r24, 0x65	; 101
 850:	93 e0       	ldi	r25, 0x03	; 3
 852:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 856:	17 c0       	rjmp	.+46     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
			
		}
	}
	else if (strcmp(inpt, "RESET") == 0){
<<<<<<< HEAD
 862:	63 e3       	ldi	r22, 0x33	; 51
 864:	74 e0       	ldi	r23, 0x04	; 4
 866:	c8 01       	movw	r24, r16
 868:	0e 94 5f 06 	call	0xcbe	; 0xcbe <strcmp>
 86c:	89 2b       	or	r24, r25
 86e:	69 f4       	brne	.+26     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
		UART_Write_String_To_Buffer("RESETTING system\n");
 870:	89 e3       	ldi	r24, 0x39	; 57
 872:	94 e0       	ldi	r25, 0x04	; 4
 874:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
		stop_song();
 878:	0e 94 a4 00 	call	0x148	; 0x148 <stop_song>
		set_song(0);
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 5f 00 	call	0xbe	; 0xbe <set_song>
=======
 858:	6a e8       	ldi	r22, 0x8A	; 138
 85a:	73 e0       	ldi	r23, 0x03	; 3
 85c:	c8 01       	movw	r24, r16
 85e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strcmp>
 862:	89 2b       	or	r24, r25
 864:	61 f4       	brne	.+24     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
		UART_Write_String_To_Buffer("RESETTING system\n");
 866:	80 e9       	ldi	r24, 0x90	; 144
 868:	93 e0       	ldi	r25, 0x03	; 3
 86a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
		stop_song();
 86e:	0e 94 a1 00 	call	0x142	; 0x142 <stop_song>
		set_song(0);
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	0e 94 5a 00 	call	0xb4	; 0xb4 <set_song>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		Buffer_Init();
		sei();
		UART_Write_String_To_Buffer("RESETTING system\n");
		*/
		// Reimprime el menu
		MENU_display_options();
<<<<<<< HEAD
 884:	0e 94 90 03 	call	0x720	; 0x720 <MENU_display_options>
 888:	04 c0       	rjmp	.+8      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
=======
 878:	0e 94 96 03 	call	0x72c	; 0x72c <MENU_display_options>
 87c:	04 c0       	rjmp	.+8      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		
	}
	else{
		UART_Write_String_To_Buffer("Comando no encontrado\r\n");
<<<<<<< HEAD
 88a:	8b e4       	ldi	r24, 0x4B	; 75
 88c:	94 e0       	ldi	r25, 0x04	; 4
 88e:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
=======
 87e:	82 ea       	ldi	r24, 0xA2	; 162
 880:	93 e0       	ldi	r25, 0x03	; 3
 882:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	}
	
}
<<<<<<< HEAD
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	08 95       	ret

000008a0 <MENU_process_inpt>:

void MENU_process_inpt(){
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
 8a8:	c4 56       	subi	r28, 0x64	; 100
 8aa:	d1 09       	sbc	r29, r1
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	f8 94       	cli
 8b0:	de bf       	out	0x3e, r29	; 62
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	cd bf       	out	0x3d, r28	; 61
	uint8_t substring[BUFFER_RX_LEN];
	
	create_substring(get_RX_data(), substring);
 8b6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <get_RX_data>
 8ba:	be 01       	movw	r22, r28
 8bc:	6f 5f       	subi	r22, 0xFF	; 255
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	0e 94 b0 03 	call	0x760	; 0x760 <create_substring>
	UART_Write_String_To_Buffer(substring);
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
	MENU_select_option(substring);
 8cc:	ce 01       	movw	r24, r28
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <MENU_select_option>
}
 8d4:	cc 59       	subi	r28, 0x9C	; 156
 8d6:	df 4f       	sbci	r29, 0xFF	; 255
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	de bf       	out	0x3e, r29	; 62
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	cd bf       	out	0x3d, r28	; 61
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	08 95       	ret

000008e8 <SerialPort_Init>:
=======
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	1f 91       	pop	r17
 890:	0f 91       	pop	r16
 892:	08 95       	ret

00000894 <MENU_process_inpt>:
	inc_RX_index_lectura();
	inc_RX_index_lectura();
	substring[j] = '\0'; // append null character at the end
}

void MENU_process_inpt(){
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
 89c:	c0 59       	subi	r28, 0x90	; 144
 89e:	d1 40       	sbci	r29, 0x01	; 1
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t substring[BUFFER_RX_LEN];
	
	create_substring(get_RX_data(), substring);
 8aa:	0e 94 b5 04 	call	0x96a	; 0x96a <get_RX_data>
 8ae:	be 01       	movw	r22, r28
 8b0:	6f 5f       	subi	r22, 0xFF	; 255
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	0e 94 ac 03 	call	0x758	; 0x758 <create_substring>
	UART_Write_String_To_Buffer(substring);
 8b8:	ce 01       	movw	r24, r28
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
	MENU_select_option(substring);
 8c0:	ce 01       	movw	r24, r28
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	0e 94 de 03 	call	0x7bc	; 0x7bc <MENU_select_option>
}
 8c8:	c0 57       	subi	r28, 0x70	; 112
 8ca:	de 4f       	sbci	r29, 0xFE	; 254
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <SerialPort_Init>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
// Inicializaci�n de Puerto Serie

void SerialPort_Init(uint8_t config){
	// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
	// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
	UCSR0B = 0;
<<<<<<< HEAD
 8e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 8ec:	96 e0       	ldi	r25, 0x06	; 6
 8ee:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = (unsigned char)(config>>8);
 8f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)config;
 8f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 8fa:	08 95       	ret

000008fc <SerialPort_TX_Enable>:
=======
 8dc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 8e0:	96 e0       	ldi	r25, 0x06	; 6
 8e2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = (unsigned char)(config>>8);
 8e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)config;
 8ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 8ee:	08 95       	ret

000008f0 <SerialPort_TX_Enable>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5


// Inicializaci�n de Transmisor

void SerialPort_TX_Enable(void){
	UCSR0B |= (1<<TXEN0);
<<<<<<< HEAD
 8fc:	e1 ec       	ldi	r30, 0xC1	; 193
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	88 60       	ori	r24, 0x08	; 8
 904:	80 83       	st	Z, r24
 906:	08 95       	ret

00000908 <SerialPort_TX_Interrupt_Enable>:
=======
 8f0:	e1 ec       	ldi	r30, 0xC1	; 193
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	88 60       	ori	r24, 0x08	; 8
 8f8:	80 83       	st	Z, r24
 8fa:	08 95       	ret

000008fc <SerialPort_TX_Interrupt_Enable>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

void SerialPort_TX_Interrupt_Enable(void){
	UCSR0B |= (1<<UDRIE0);
<<<<<<< HEAD
 908:	e1 ec       	ldi	r30, 0xC1	; 193
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	80 62       	ori	r24, 0x20	; 32
 910:	80 83       	st	Z, r24
 912:	08 95       	ret

00000914 <SerialPort_TX_Interrupt_Disable>:
=======
 8fc:	e1 ec       	ldi	r30, 0xC1	; 193
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	80 62       	ori	r24, 0x20	; 32
 904:	80 83       	st	Z, r24
 906:	08 95       	ret

00000908 <SerialPort_TX_Interrupt_Disable>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
<<<<<<< HEAD
 914:	e1 ec       	ldi	r30, 0xC1	; 193
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	8f 7d       	andi	r24, 0xDF	; 223
 91c:	80 83       	st	Z, r24
 91e:	08 95       	ret

00000920 <SerialPort_RX_Enable>:
=======
 908:	e1 ec       	ldi	r30, 0xC1	; 193
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	8f 7d       	andi	r24, 0xDF	; 223
 910:	80 83       	st	Z, r24
 912:	08 95       	ret

00000914 <SerialPort_RX_Enable>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5


// Inicializaci�n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
<<<<<<< HEAD
 920:	e1 ec       	ldi	r30, 0xC1	; 193
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	80 61       	ori	r24, 0x10	; 16
 928:	80 83       	st	Z, r24
 92a:	08 95       	ret

0000092c <SerialPort_RX_Interrupt_Enable>:
=======
 914:	e1 ec       	ldi	r30, 0xC1	; 193
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	80 61       	ori	r24, 0x10	; 16
 91c:	80 83       	st	Z, r24
 91e:	08 95       	ret

00000920 <SerialPort_RX_Interrupt_Enable>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
<<<<<<< HEAD
 92c:	e1 ec       	ldi	r30, 0xC1	; 193
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	80 68       	ori	r24, 0x80	; 128
 934:	80 83       	st	Z, r24
 936:	08 95       	ret

00000938 <__vector_19>:
void UART_Send_Char ( uint8_t dato) {
	//long Timeout = 0;
	//while ( ( ++Timeout ) && ((UCSR0A & (1<<UDRE0))==0));

	//if (Timeout != 0)
		UDR0 = dato;
 938:	1f 92       	push	r1
 93a:	0f 92       	push	r0
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	0f 92       	push	r0
 940:	11 24       	eor	r1, r1
 942:	2f 93       	push	r18
 944:	3f 93       	push	r19
 946:	4f 93       	push	r20
 948:	5f 93       	push	r21
 94a:	6f 93       	push	r22
 94c:	7f 93       	push	r23
 94e:	8f 93       	push	r24
 950:	9f 93       	push	r25
 952:	af 93       	push	r26
 954:	bf 93       	push	r27
 956:	ef 93       	push	r30
 958:	ff 93       	push	r31
 95a:	20 91 51 07 	lds	r18, 0x0751	; 0x800751 <TX_buffer+0x1c4>
 95e:	30 91 52 07 	lds	r19, 0x0752	; 0x800752 <TX_buffer+0x1c5>
 962:	c9 01       	movw	r24, r18
 964:	62 ec       	ldi	r22, 0xC2	; 194
 966:	71 e0       	ldi	r23, 0x01	; 1
 968:	0e 94 f5 05 	call	0xbea	; 0xbea <__udivmodhi4>
 96c:	40 91 4f 07 	lds	r20, 0x074F	; 0x80074f <TX_buffer+0x1c2>
 970:	50 91 50 07 	lds	r21, 0x0750	; 0x800750 <TX_buffer+0x1c3>
 974:	84 17       	cp	r24, r20
 976:	95 07       	cpc	r25, r21
 978:	19 f4       	brne	.+6      	; 0x980 <__vector_19+0x48>
 97a:	0e 94 8a 04 	call	0x914	; 0x914 <SerialPort_TX_Interrupt_Disable>
 97e:	11 c0       	rjmp	.+34     	; 0x9a2 <__vector_19+0x6a>
 980:	f9 01       	movw	r30, r18
 982:	e3 57       	subi	r30, 0x73	; 115
 984:	fa 4f       	sbci	r31, 0xFA	; 250
 986:	80 81       	ld	r24, Z
 988:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 98c:	e1 e5       	ldi	r30, 0x51	; 81
 98e:	f7 e0       	ldi	r31, 0x07	; 7
 990:	80 81       	ld	r24, Z
 992:	91 81       	ldd	r25, Z+1	; 0x01
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	62 ec       	ldi	r22, 0xC2	; 194
 998:	71 e0       	ldi	r23, 0x01	; 1
 99a:	0e 94 f5 05 	call	0xbea	; 0xbea <__udivmodhi4>
 99e:	91 83       	std	Z+1, r25	; 0x01
 9a0:	80 83       	st	Z, r24
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	bf 91       	pop	r27
 9a8:	af 91       	pop	r26
 9aa:	9f 91       	pop	r25
 9ac:	8f 91       	pop	r24
 9ae:	7f 91       	pop	r23
 9b0:	6f 91       	pop	r22
 9b2:	5f 91       	pop	r21
 9b4:	4f 91       	pop	r20
 9b6:	3f 91       	pop	r19
 9b8:	2f 91       	pop	r18
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <Buffer_Init>:
 9c4:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <TX_buffer+0x1c3>
 9c8:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <TX_buffer+0x1c2>
 9cc:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <TX_buffer+0x1c5>
 9d0:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <TX_buffer+0x1c4>
 9d4:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <RX_buffer+0x65>
 9d8:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <RX_buffer+0x64>
 9dc:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <RX_buffer+0x67>
 9e0:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <RX_buffer+0x66>
 9e4:	08 95       	ret

000009e6 <get_RX_data_index_lectura>:
 9e6:	e0 91 b9 07 	lds	r30, 0x07B9	; 0x8007b9 <RX_buffer+0x66>
 9ea:	f0 91 ba 07 	lds	r31, 0x07BA	; 0x8007ba <RX_buffer+0x67>
 9ee:	ed 5a       	subi	r30, 0xAD	; 173
 9f0:	f8 4f       	sbci	r31, 0xF8	; 248
 9f2:	80 81       	ld	r24, Z
 9f4:	08 95       	ret

000009f6 <get_RX_data>:
 9f6:	83 e5       	ldi	r24, 0x53	; 83
 9f8:	97 e0       	ldi	r25, 0x07	; 7
 9fa:	08 95       	ret

000009fc <set_RX_data_UDR0>:
 9fc:	e0 91 b7 07 	lds	r30, 0x07B7	; 0x8007b7 <RX_buffer+0x64>
 a00:	f0 91 b8 07 	lds	r31, 0x07B8	; 0x8007b8 <RX_buffer+0x65>
 a04:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a08:	ed 5a       	subi	r30, 0xAD	; 173
 a0a:	f8 4f       	sbci	r31, 0xF8	; 248
 a0c:	80 83       	st	Z, r24
 a0e:	08 95       	ret

00000a10 <inc_RX_index_escritura>:
 a10:	e7 eb       	ldi	r30, 0xB7	; 183
 a12:	f7 e0       	ldi	r31, 0x07	; 7
 a14:	40 81       	ld	r20, Z
 a16:	51 81       	ldd	r21, Z+1	; 0x01
 a18:	4f 5f       	subi	r20, 0xFF	; 255
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	9a 01       	movw	r18, r20
 a1e:	36 95       	lsr	r19
 a20:	27 95       	ror	r18
 a22:	36 95       	lsr	r19
 a24:	27 95       	ror	r18
 a26:	ab e7       	ldi	r26, 0x7B	; 123
 a28:	b4 e1       	ldi	r27, 0x14	; 20
 a2a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__umulhisi3>
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	64 e6       	ldi	r22, 0x64	; 100
 a34:	68 9f       	mul	r22, r24
 a36:	90 01       	movw	r18, r0
 a38:	69 9f       	mul	r22, r25
 a3a:	30 0d       	add	r19, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	42 1b       	sub	r20, r18
 a40:	53 0b       	sbc	r21, r19
 a42:	51 83       	std	Z+1, r21	; 0x01
 a44:	40 83       	st	Z, r20
 a46:	08 95       	ret

00000a48 <inc_RX_index_lectura>:
 a48:	e9 eb       	ldi	r30, 0xB9	; 185
 a4a:	f7 e0       	ldi	r31, 0x07	; 7
 a4c:	40 81       	ld	r20, Z
 a4e:	51 81       	ldd	r21, Z+1	; 0x01
 a50:	4f 5f       	subi	r20, 0xFF	; 255
 a52:	5f 4f       	sbci	r21, 0xFF	; 255
 a54:	9a 01       	movw	r18, r20
 a56:	36 95       	lsr	r19
 a58:	27 95       	ror	r18
 a5a:	36 95       	lsr	r19
 a5c:	27 95       	ror	r18
 a5e:	ab e7       	ldi	r26, 0x7B	; 123
 a60:	b4 e1       	ldi	r27, 0x14	; 20
 a62:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__umulhisi3>
 a66:	96 95       	lsr	r25
 a68:	87 95       	ror	r24
 a6a:	64 e6       	ldi	r22, 0x64	; 100
 a6c:	68 9f       	mul	r22, r24
 a6e:	90 01       	movw	r18, r0
 a70:	69 9f       	mul	r22, r25
 a72:	30 0d       	add	r19, r0
 a74:	11 24       	eor	r1, r1
 a76:	42 1b       	sub	r20, r18
 a78:	53 0b       	sbc	r21, r19
 a7a:	51 83       	std	Z+1, r21	; 0x01
 a7c:	40 83       	st	Z, r20
 a7e:	08 95       	ret

00000a80 <get_FLAG_datos_recibidos>:
 a80:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <FLAG_datos_recibidos>
 a84:	08 95       	ret

00000a86 <set_FLAG_datos_recibidos>:
 a86:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <FLAG_datos_recibidos>
 a8a:	08 95       	ret

00000a8c <UART_Write_Char_To_Buffer>:
		// TX_UART did not respond � error
	//}
}

uint8_t UART_Write_Char_To_Buffer (uint8_t data)
{
 a8c:	48 2f       	mov	r20, r24
	{
		// Write buffer is full
		return ERROR_UART_FULL_BUFF;
	}*/
	
	if ((TX_buffer.index_escritura + 1) % BUFFER_TX_LEN == TX_buffer.index_lectura){
 a8e:	20 91 4f 07 	lds	r18, 0x074F	; 0x80074f <TX_buffer+0x1c2>
 a92:	30 91 50 07 	lds	r19, 0x0750	; 0x800750 <TX_buffer+0x1c3>
 a96:	c9 01       	movw	r24, r18
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	62 ec       	ldi	r22, 0xC2	; 194
 a9c:	71 e0       	ldi	r23, 0x01	; 1
 a9e:	0e 94 f5 05 	call	0xbea	; 0xbea <__udivmodhi4>
 aa2:	60 91 51 07 	lds	r22, 0x0751	; 0x800751 <TX_buffer+0x1c4>
 aa6:	70 91 52 07 	lds	r23, 0x0752	; 0x800752 <TX_buffer+0x1c5>
 aaa:	86 17       	cp	r24, r22
 aac:	97 07       	cpc	r25, r23
 aae:	51 f0       	breq	.+20     	; 0xac4 <UART_Write_Char_To_Buffer+0x38>
		//Buffer lleno
	}
	else{
		TX_buffer.data[TX_buffer.index_escritura] = data;
 ab0:	f9 01       	movw	r30, r18
 ab2:	e3 57       	subi	r30, 0x73	; 115
 ab4:	fa 4f       	sbci	r31, 0xFA	; 250
 ab6:	40 83       	st	Z, r20
		TX_buffer.index_escritura = (TX_buffer.index_escritura+1)%BUFFER_TX_LEN;		
 ab8:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <TX_buffer+0x1c3>
 abc:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <TX_buffer+0x1c2>
		SerialPort_TX_Interrupt_Enable();
 ac0:	0e 94 84 04 	call	0x908	; 0x908 <SerialPort_TX_Interrupt_Enable>
	
=======
 920:	e1 ec       	ldi	r30, 0xC1	; 193
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	80 68       	ori	r24, 0x80	; 128
 928:	80 83       	st	Z, r24
 92a:	08 95       	ret

0000092c <Buffer_Init>:
		*dato=UDR0;
		return 1;
	}
	else
		return 0;
}
 92c:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <TX_buffer+0x191>
 930:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <TX_buffer+0x190>
 934:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <TX_buffer+0x193>
 938:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <TX_buffer+0x192>
 93c:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <RX_buffer+0x191>
 940:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <RX_buffer+0x190>
 944:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <RX_buffer+0x193>
 948:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <RX_buffer+0x192>
 94c:	08 95       	ret

0000094e <get_TX_data>:
 94e:	e8 2f       	mov	r30, r24
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	ea 53       	subi	r30, 0x3A	; 58
 954:	fb 4f       	sbci	r31, 0xFB	; 251
 956:	80 81       	ld	r24, Z
 958:	08 95       	ret

0000095a <get_RX_data_index_lectura>:
 95a:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <RX_buffer+0x192>
 95e:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <RX_buffer+0x193>
 962:	e6 5a       	subi	r30, 0xA6	; 166
 964:	f9 4f       	sbci	r31, 0xF9	; 249
 966:	80 81       	ld	r24, Z
 968:	08 95       	ret

0000096a <get_RX_data>:
 96a:	8a e5       	ldi	r24, 0x5A	; 90
 96c:	96 e0       	ldi	r25, 0x06	; 6
 96e:	08 95       	ret

00000970 <set_RX_data_UDR0>:
 970:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <RX_buffer+0x190>
 974:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <RX_buffer+0x191>
 978:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 97c:	e6 5a       	subi	r30, 0xA6	; 166
 97e:	f9 4f       	sbci	r31, 0xF9	; 249
 980:	80 83       	st	Z, r24
 982:	08 95       	ret

00000984 <get_TX_index_lectura>:
 984:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <TX_buffer+0x192>
 988:	08 95       	ret

0000098a <reset_TX_index>:
 98a:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <TX_buffer+0x193>
 98e:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <TX_buffer+0x192>
 992:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <TX_buffer+0x191>
 996:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <TX_buffer+0x190>
 99a:	08 95       	ret

0000099c <inc_RX_index_escritura>:
 99c:	ea ee       	ldi	r30, 0xEA	; 234
 99e:	f7 e0       	ldi	r31, 0x07	; 7
 9a0:	40 81       	ld	r20, Z
 9a2:	51 81       	ldd	r21, Z+1	; 0x01
 9a4:	4f 5f       	subi	r20, 0xFF	; 255
 9a6:	5f 4f       	sbci	r21, 0xFF	; 255
 9a8:	9a 01       	movw	r18, r20
 9aa:	32 95       	swap	r19
 9ac:	22 95       	swap	r18
 9ae:	2f 70       	andi	r18, 0x0F	; 15
 9b0:	23 27       	eor	r18, r19
 9b2:	3f 70       	andi	r19, 0x0F	; 15
 9b4:	23 27       	eor	r18, r19
 9b6:	ae e3       	ldi	r26, 0x3E	; 62
 9b8:	ba e0       	ldi	r27, 0x0A	; 10
 9ba:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__umulhisi3>
 9be:	20 e9       	ldi	r18, 0x90	; 144
 9c0:	31 e0       	ldi	r19, 0x01	; 1
 9c2:	bc 01       	movw	r22, r24
 9c4:	62 9f       	mul	r22, r18
 9c6:	c0 01       	movw	r24, r0
 9c8:	63 9f       	mul	r22, r19
 9ca:	90 0d       	add	r25, r0
 9cc:	72 9f       	mul	r23, r18
 9ce:	90 0d       	add	r25, r0
 9d0:	11 24       	eor	r1, r1
 9d2:	48 1b       	sub	r20, r24
 9d4:	59 0b       	sbc	r21, r25
 9d6:	51 83       	std	Z+1, r21	; 0x01
 9d8:	40 83       	st	Z, r20
 9da:	08 95       	ret

000009dc <inc_RX_index_lectura>:
 9dc:	ec ee       	ldi	r30, 0xEC	; 236
 9de:	f7 e0       	ldi	r31, 0x07	; 7
 9e0:	40 81       	ld	r20, Z
 9e2:	51 81       	ldd	r21, Z+1	; 0x01
 9e4:	4f 5f       	subi	r20, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255
 9e8:	9a 01       	movw	r18, r20
 9ea:	32 95       	swap	r19
 9ec:	22 95       	swap	r18
 9ee:	2f 70       	andi	r18, 0x0F	; 15
 9f0:	23 27       	eor	r18, r19
 9f2:	3f 70       	andi	r19, 0x0F	; 15
 9f4:	23 27       	eor	r18, r19
 9f6:	ae e3       	ldi	r26, 0x3E	; 62
 9f8:	ba e0       	ldi	r27, 0x0A	; 10
 9fa:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__umulhisi3>
 9fe:	20 e9       	ldi	r18, 0x90	; 144
 a00:	31 e0       	ldi	r19, 0x01	; 1
 a02:	bc 01       	movw	r22, r24
 a04:	62 9f       	mul	r22, r18
 a06:	c0 01       	movw	r24, r0
 a08:	63 9f       	mul	r22, r19
 a0a:	90 0d       	add	r25, r0
 a0c:	72 9f       	mul	r23, r18
 a0e:	90 0d       	add	r25, r0
 a10:	11 24       	eor	r1, r1
 a12:	48 1b       	sub	r20, r24
 a14:	59 0b       	sbc	r21, r25
 a16:	51 83       	std	Z+1, r21	; 0x01
 a18:	40 83       	st	Z, r20
 a1a:	08 95       	ret

00000a1c <inc_TX_index_lectura>:
 a1c:	e8 e5       	ldi	r30, 0x58	; 88
 a1e:	f6 e0       	ldi	r31, 0x06	; 6
 a20:	40 81       	ld	r20, Z
 a22:	51 81       	ldd	r21, Z+1	; 0x01
 a24:	4f 5f       	subi	r20, 0xFF	; 255
 a26:	5f 4f       	sbci	r21, 0xFF	; 255
 a28:	9a 01       	movw	r18, r20
 a2a:	32 95       	swap	r19
 a2c:	22 95       	swap	r18
 a2e:	2f 70       	andi	r18, 0x0F	; 15
 a30:	23 27       	eor	r18, r19
 a32:	3f 70       	andi	r19, 0x0F	; 15
 a34:	23 27       	eor	r18, r19
 a36:	ae e3       	ldi	r26, 0x3E	; 62
 a38:	ba e0       	ldi	r27, 0x0A	; 10
 a3a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__umulhisi3>
 a3e:	20 e9       	ldi	r18, 0x90	; 144
 a40:	31 e0       	ldi	r19, 0x01	; 1
 a42:	bc 01       	movw	r22, r24
 a44:	62 9f       	mul	r22, r18
 a46:	c0 01       	movw	r24, r0
 a48:	63 9f       	mul	r22, r19
 a4a:	90 0d       	add	r25, r0
 a4c:	72 9f       	mul	r23, r18
 a4e:	90 0d       	add	r25, r0
 a50:	11 24       	eor	r1, r1
 a52:	48 1b       	sub	r20, r24
 a54:	59 0b       	sbc	r21, r25
 a56:	51 83       	std	Z+1, r21	; 0x01
 a58:	40 83       	st	Z, r20
 a5a:	08 95       	ret

00000a5c <get_FLAG_datos_recibidos>:
 a5c:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <FLAG_datos_recibidos>
 a60:	08 95       	ret

00000a62 <set_FLAG_datos_recibidos>:
 a62:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <FLAG_datos_recibidos>
 a66:	08 95       	ret

00000a68 <UART_Write_Char_To_Buffer>:
 a68:	cf 93       	push	r28
 a6a:	20 91 56 06 	lds	r18, 0x0656	; 0x800656 <TX_buffer+0x190>
 a6e:	30 91 57 06 	lds	r19, 0x0657	; 0x800657 <TX_buffer+0x191>
 a72:	20 39       	cpi	r18, 0x90	; 144
 a74:	31 40       	sbci	r19, 0x01	; 1
 a76:	88 f4       	brcc	.+34     	; 0xa9a <UART_Write_Char_To_Buffer+0x32>
 a78:	c8 2f       	mov	r28, r24
 a7a:	0e 94 84 04 	call	0x908	; 0x908 <SerialPort_TX_Interrupt_Disable>
 a7e:	e6 e5       	ldi	r30, 0x56	; 86
 a80:	f6 e0       	ldi	r31, 0x06	; 6
 a82:	80 81       	ld	r24, Z
 a84:	91 81       	ldd	r25, Z+1	; 0x01
 a86:	dc 01       	movw	r26, r24
 a88:	aa 53       	subi	r26, 0x3A	; 58
 a8a:	bb 4f       	sbci	r27, 0xFB	; 251
 a8c:	cc 93       	st	X, r28
 a8e:	01 96       	adiw	r24, 0x01	; 1
 a90:	91 83       	std	Z+1, r25	; 0x01
 a92:	80 83       	st	Z, r24
 a94:	0e 94 7e 04 	call	0x8fc	; 0x8fc <SerialPort_TX_Interrupt_Enable>
 a98:	01 c0       	rjmp	.+2      	; 0xa9c <UART_Write_Char_To_Buffer+0x34>
 a9a:	8f ef       	ldi	r24, 0xFF	; 255
 a9c:	cf 91       	pop	r28
 a9e:	08 95       	ret

00000aa0 <UART_Write_String_To_Buffer>:
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	8c 01       	movw	r16, r24
 aa8:	c0 e0       	ldi	r28, 0x00	; 0
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <UART_Write_String_To_Buffer+0x12>
 aac:	0e 94 34 05 	call	0xa68	; 0xa68 <UART_Write_Char_To_Buffer>
 ab0:	cf 5f       	subi	r28, 0xFF	; 255
 ab2:	f8 01       	movw	r30, r16
 ab4:	ec 0f       	add	r30, r28
 ab6:	f1 1d       	adc	r31, r1
 ab8:	80 81       	ld	r24, Z
 aba:	81 11       	cpse	r24, r1
 abc:	f7 cf       	rjmp	.-18     	; 0xaac <UART_Write_String_To_Buffer+0xc>
 abe:	8d e0       	ldi	r24, 0x0D	; 13
 ac0:	0e 94 34 05 	call	0xa68	; 0xa68 <UART_Write_Char_To_Buffer>
 ac4:	8a e0       	ldi	r24, 0x0A	; 10
 ac6:	0e 94 34 05 	call	0xa68	; 0xa68 <UART_Write_Char_To_Buffer>
 aca:	cf 91       	pop	r28
 acc:	1f 91       	pop	r17
 ace:	0f 91       	pop	r16
 ad0:	08 95       	ret

00000ad2 <__vector_18>:
 ad2:	1f 92       	push	r1
 ad4:	0f 92       	push	r0
 ad6:	0f b6       	in	r0, 0x3f	; 63
 ad8:	0f 92       	push	r0
 ada:	11 24       	eor	r1, r1
 adc:	2f 93       	push	r18
 ade:	3f 93       	push	r19
 ae0:	4f 93       	push	r20
 ae2:	5f 93       	push	r21
 ae4:	6f 93       	push	r22
 ae6:	7f 93       	push	r23
 ae8:	8f 93       	push	r24
 aea:	9f 93       	push	r25
 aec:	af 93       	push	r26
 aee:	bf 93       	push	r27
 af0:	ef 93       	push	r30
 af2:	ff 93       	push	r31
 af4:	cf 93       	push	r28
 af6:	df 93       	push	r29
 af8:	cd b7       	in	r28, 0x3d	; 61
 afa:	de b7       	in	r29, 0x3e	; 62
 afc:	c0 59       	subi	r28, 0x90	; 144
 afe:	d1 40       	sbci	r29, 0x01	; 1
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	cd bf       	out	0x3d, r28	; 61
 b04:	0e 94 b8 04 	call	0x970	; 0x970 <set_RX_data_UDR0>
 b08:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <RX_buffer+0x190>
 b0c:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <RX_buffer+0x191>
 b10:	e6 5a       	subi	r30, 0xA6	; 166
 b12:	f9 4f       	sbci	r31, 0xF9	; 249
 b14:	80 81       	ld	r24, Z
 b16:	8a 30       	cpi	r24, 0x0A	; 10
 b18:	d9 f5       	brne	.+118    	; 0xb90 <__vector_18+0xbe>
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <FLAG_datos_recibidos>
 b20:	0e 94 ad 04 	call	0x95a	; 0x95a <get_RX_data_index_lectura>
 b24:	83 35       	cpi	r24, 0x53	; 83
 b26:	11 f0       	breq	.+4      	; 0xb2c <__vector_18+0x5a>
 b28:	82 35       	cpi	r24, 0x52	; 82
 b2a:	91 f5       	brne	.+100    	; 0xb90 <__vector_18+0xbe>
 b2c:	0e 94 b5 04 	call	0x96a	; 0x96a <get_RX_data>
 b30:	be 01       	movw	r22, r28
 b32:	6f 5f       	subi	r22, 0xFF	; 255
 b34:	7f 4f       	sbci	r23, 0xFF	; 255
 b36:	0e 94 ac 03 	call	0x758	; 0x758 <create_substring>
 b3a:	ce 01       	movw	r24, r28
 b3c:	01 96       	adiw	r24, 0x01	; 1
 b3e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 b42:	6e e3       	ldi	r22, 0x3E	; 62
 b44:	73 e0       	ldi	r23, 0x03	; 3
 b46:	ce 01       	movw	r24, r28
 b48:	01 96       	adiw	r24, 0x01	; 1
 b4a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strcmp>
 b4e:	89 2b       	or	r24, r25
 b50:	49 f4       	brne	.+18     	; 0xb64 <__vector_18+0x92>
 b52:	0e 94 a1 00 	call	0x142	; 0x142 <stop_song>
 b56:	83 e4       	ldi	r24, 0x43	; 67
 b58:	93 e0       	ldi	r25, 0x03	; 3
 b5a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 b5e:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <FLAG_datos_recibidos>
 b62:	16 c0       	rjmp	.+44     	; 0xb90 <__vector_18+0xbe>
 b64:	6a e8       	ldi	r22, 0x8A	; 138
 b66:	73 e0       	ldi	r23, 0x03	; 3
 b68:	ce 01       	movw	r24, r28
 b6a:	01 96       	adiw	r24, 0x01	; 1
 b6c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strcmp>
 b70:	89 2b       	or	r24, r25
 b72:	71 f4       	brne	.+28     	; 0xb90 <__vector_18+0xbe>
 b74:	80 e9       	ldi	r24, 0x90	; 144
 b76:	93 e0       	ldi	r25, 0x03	; 3
 b78:	0e 94 50 05 	call	0xaa0	; 0xaa0 <UART_Write_String_To_Buffer>
 b7c:	0e 94 a1 00 	call	0x142	; 0x142 <stop_song>
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 5a 00 	call	0xb4	; 0xb4 <set_song>
 b88:	0e 94 96 03 	call	0x72c	; 0x72c <MENU_display_options>
 b8c:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <FLAG_datos_recibidos>
 b90:	0e 94 ce 04 	call	0x99c	; 0x99c <inc_RX_index_escritura>
 b94:	c0 57       	subi	r28, 0x70	; 112
 b96:	de 4f       	sbci	r29, 0xFE	; 254
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	f8 94       	cli
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	cd bf       	out	0x3d, r28	; 61
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	ff 91       	pop	r31
 ba8:	ef 91       	pop	r30
 baa:	bf 91       	pop	r27
 bac:	af 91       	pop	r26
 bae:	9f 91       	pop	r25
 bb0:	8f 91       	pop	r24
 bb2:	7f 91       	pop	r23
 bb4:	6f 91       	pop	r22
 bb6:	5f 91       	pop	r21
 bb8:	4f 91       	pop	r20
 bba:	3f 91       	pop	r19
 bbc:	2f 91       	pop	r18
 bbe:	0f 90       	pop	r0
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	0f 90       	pop	r0
 bc4:	1f 90       	pop	r1
 bc6:	18 95       	reti

00000bc8 <UART_Write_String_To_Buffer_No_NewLine>:
 bc8:	0f 93       	push	r16
 bca:	1f 93       	push	r17
 bcc:	cf 93       	push	r28
 bce:	8c 01       	movw	r16, r24
 bd0:	c0 e0       	ldi	r28, 0x00	; 0
 bd2:	03 c0       	rjmp	.+6      	; 0xbda <UART_Write_String_To_Buffer_No_NewLine+0x12>
 bd4:	0e 94 34 05 	call	0xa68	; 0xa68 <UART_Write_Char_To_Buffer>
 bd8:	cf 5f       	subi	r28, 0xFF	; 255
 bda:	f8 01       	movw	r30, r16
 bdc:	ec 0f       	add	r30, r28
 bde:	f1 1d       	adc	r31, r1
 be0:	80 81       	ld	r24, Z
 be2:	81 11       	cpse	r24, r1
 be4:	f7 cf       	rjmp	.-18     	; 0xbd4 <UART_Write_String_To_Buffer_No_NewLine+0xc>
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	0f 91       	pop	r16
 bec:	08 95       	ret

00000bee <hay_datos_TX_buffer>:
		TX_buffer.index_escritura = 0;
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	}
}
 ac4:	08 95       	ret

<<<<<<< HEAD
00000ac6 <UART_Write_String_To_Buffer>:

// h

void UART_Write_String_To_Buffer(char* STR_PTR)
{
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 ace:	c0 e0       	ldi	r28, 0x00	; 0
	//SerialPort_TX_Interrupt_Disable();
	while ( STR_PTR [ i ] != '\0')
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <UART_Write_String_To_Buffer+0x12>
	{
		UART_Write_Char_To_Buffer ( STR_PTR [ i ] );
 ad2:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_Write_Char_To_Buffer>
		i++;
 ad6:	cf 5f       	subi	r28, 0xFF	; 255

void UART_Write_String_To_Buffer(char* STR_PTR)
{
	uint8_t i = 0;
	//SerialPort_TX_Interrupt_Disable();
	while ( STR_PTR [ i ] != '\0')
 ad8:	f8 01       	movw	r30, r16
 ada:	ec 0f       	add	r30, r28
 adc:	f1 1d       	adc	r31, r1
 ade:	80 81       	ld	r24, Z
 ae0:	81 11       	cpse	r24, r1
 ae2:	f7 cf       	rjmp	.-18     	; 0xad2 <UART_Write_String_To_Buffer+0xc>
	{
		UART_Write_Char_To_Buffer ( STR_PTR [ i ] );
		i++;
	}
	UART_Write_Char_To_Buffer ('\r');
 ae4:	8d e0       	ldi	r24, 0x0D	; 13
 ae6:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_Write_Char_To_Buffer>
	UART_Write_Char_To_Buffer ('\n');
 aea:	8a e0       	ldi	r24, 0x0A	; 10
 aec:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_Write_Char_To_Buffer>
	SerialPort_TX_Interrupt_Enable();
 af0:	0e 94 84 04 	call	0x908	; 0x908 <SerialPort_TX_Interrupt_Enable>
	
}
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	08 95       	ret

00000afc <__vector_18>:
Buffer_TX TX_buffer;
Buffer_RX RX_buffer;

static uint8_t FLAG_datos_recibidos = 0;

ISR(USART_RX_vect){
 afc:	1f 92       	push	r1
 afe:	0f 92       	push	r0
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	0f 92       	push	r0
 b04:	11 24       	eor	r1, r1
 b06:	2f 93       	push	r18
 b08:	3f 93       	push	r19
 b0a:	4f 93       	push	r20
 b0c:	5f 93       	push	r21
 b0e:	6f 93       	push	r22
 b10:	7f 93       	push	r23
 b12:	8f 93       	push	r24
 b14:	9f 93       	push	r25
 b16:	af 93       	push	r26
 b18:	bf 93       	push	r27
 b1a:	ef 93       	push	r30
 b1c:	ff 93       	push	r31
 b1e:	cf 93       	push	r28
 b20:	df 93       	push	r29
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
 b26:	c4 56       	subi	r28, 0x64	; 100
 b28:	d1 09       	sbc	r29, r1
 b2a:	de bf       	out	0x3e, r29	; 62
 b2c:	cd bf       	out	0x3d, r28	; 61
		//set_RX_data('\0');
		FLAG_datos_recibidos=1;
	}
	inc_RX_index_escritura(); // index_escritura++
*/
	set_RX_data_UDR0(); // BufferRX[index_escritura]
 b2e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <set_RX_data_UDR0>
	if ((RX_buffer.data[RX_buffer.index_escritura]) == '\n')
 b32:	e0 91 b7 07 	lds	r30, 0x07B7	; 0x8007b7 <RX_buffer+0x64>
 b36:	f0 91 b8 07 	lds	r31, 0x07B8	; 0x8007b8 <RX_buffer+0x65>
 b3a:	ed 5a       	subi	r30, 0xAD	; 173
 b3c:	f8 4f       	sbci	r31, 0xF8	; 248
 b3e:	80 81       	ld	r24, Z
 b40:	8a 30       	cpi	r24, 0x0A	; 10
 b42:	11 f5       	brne	.+68     	; 0xb88 <__vector_18+0x8c>
	{
		//set_RX_data('\0');
		FLAG_datos_recibidos = 1;
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <FLAG_datos_recibidos>
		if (get_RX_data_index_lectura() == 'S') {
 b4a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <get_RX_data_index_lectura>
 b4e:	83 35       	cpi	r24, 0x53	; 83
 b50:	d9 f4       	brne	.+54     	; 0xb88 <__vector_18+0x8c>
			uint8_t substring[BUFFER_RX_LEN];
			create_substring(get_RX_data(), substring);
 b52:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <get_RX_data>
 b56:	be 01       	movw	r22, r28
 b58:	6f 5f       	subi	r22, 0xFF	; 255
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	0e 94 b0 03 	call	0x760	; 0x760 <create_substring>
			UART_Write_String_To_Buffer(substring);
 b60:	ce 01       	movw	r24, r28
 b62:	01 96       	adiw	r24, 0x01	; 1
 b64:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
			if (strcmp(substring, "STOP") == 0){
 b68:	67 ee       	ldi	r22, 0xE7	; 231
 b6a:	73 e0       	ldi	r23, 0x03	; 3
 b6c:	ce 01       	movw	r24, r28
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	0e 94 5f 06 	call	0xcbe	; 0xcbe <strcmp>
 b74:	89 2b       	or	r24, r25
 b76:	41 f4       	brne	.+16     	; 0xb88 <__vector_18+0x8c>
				stop_song();
 b78:	0e 94 a4 00 	call	0x148	; 0x148 <stop_song>
				UART_Write_String_To_Buffer("Stopped song\n");
 b7c:	8c ee       	ldi	r24, 0xEC	; 236
 b7e:	93 e0       	ldi	r25, 0x03	; 3
 b80:	0e 94 63 05 	call	0xac6	; 0xac6 <UART_Write_String_To_Buffer>
				FLAG_datos_recibidos = 0;
 b84:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <FLAG_datos_recibidos>
			}
		
=======
char hay_datos_TX_buffer() {
	return (TX_buffer.index_lectura < TX_buffer.index_escritura);
 bee:	40 91 58 06 	lds	r20, 0x0658	; 0x800658 <TX_buffer+0x192>
 bf2:	50 91 59 06 	lds	r21, 0x0659	; 0x800659 <TX_buffer+0x193>
 bf6:	20 91 56 06 	lds	r18, 0x0656	; 0x800656 <TX_buffer+0x190>
 bfa:	30 91 57 06 	lds	r19, 0x0657	; 0x800657 <TX_buffer+0x191>
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	42 17       	cp	r20, r18
 c02:	53 07       	cpc	r21, r19
 c04:	08 f0       	brcs	.+2      	; 0xc08 <hay_datos_TX_buffer+0x1a>
 c06:	80 e0       	ldi	r24, 0x00	; 0
}
 c08:	08 95       	ret

00000c0a <__vector_19>:
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
		}
	}
	inc_RX_index_escritura();
 b88:	0e 94 08 05 	call	0xa10	; 0xa10 <inc_RX_index_escritura>
}
 b8c:	cc 59       	subi	r28, 0x9C	; 156
 b8e:	df 4f       	sbci	r29, 0xFF	; 255
 b90:	0f b6       	in	r0, 0x3f	; 63
 b92:	f8 94       	cli
 b94:	de bf       	out	0x3e, r29	; 62
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	cd bf       	out	0x3d, r28	; 61
 b9a:	df 91       	pop	r29
 b9c:	cf 91       	pop	r28
 b9e:	ff 91       	pop	r31
 ba0:	ef 91       	pop	r30
 ba2:	bf 91       	pop	r27
 ba4:	af 91       	pop	r26
 ba6:	9f 91       	pop	r25
 ba8:	8f 91       	pop	r24
 baa:	7f 91       	pop	r23
 bac:	6f 91       	pop	r22
 bae:	5f 91       	pop	r21
 bb0:	4f 91       	pop	r20
 bb2:	3f 91       	pop	r19
 bb4:	2f 91       	pop	r18
 bb6:	0f 90       	pop	r0
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	0f 90       	pop	r0
 bbc:	1f 90       	pop	r1
 bbe:	18 95       	reti

00000bc0 <UART_Write_String_To_Buffer_No_NewLine>:
	SerialPort_TX_Interrupt_Enable();
	
}

<<<<<<< HEAD
void UART_Write_String_To_Buffer_No_NewLine(char* STR_PTR)
{
 bc0:	0f 93       	push	r16
 bc2:	1f 93       	push	r17
 bc4:	cf 93       	push	r28
 bc6:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 bc8:	c0 e0       	ldi	r28, 0x00	; 0
	//SerialPort_TX_Interrupt_Disable();
	while ( STR_PTR [ i ] != '\0')
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <UART_Write_String_To_Buffer_No_NewLine+0x12>
	{
		UART_Write_Char_To_Buffer ( STR_PTR [ i ] );
 bcc:	0e 94 46 05 	call	0xa8c	; 0xa8c <UART_Write_Char_To_Buffer>
		i++;
 bd0:	cf 5f       	subi	r28, 0xFF	; 255

void UART_Write_String_To_Buffer_No_NewLine(char* STR_PTR)
{
	uint8_t i = 0;
	//SerialPort_TX_Interrupt_Disable();
	while ( STR_PTR [ i ] != '\0')
 bd2:	f8 01       	movw	r30, r16
 bd4:	ec 0f       	add	r30, r28
 bd6:	f1 1d       	adc	r31, r1
 bd8:	80 81       	ld	r24, Z
 bda:	81 11       	cpse	r24, r1
 bdc:	f7 cf       	rjmp	.-18     	; 0xbcc <UART_Write_String_To_Buffer_No_NewLine+0xc>
	{
		UART_Write_Char_To_Buffer ( STR_PTR [ i ] );
		i++;
=======
ISR(USART_UDRE_vect){
 c0a:	1f 92       	push	r1
 c0c:	0f 92       	push	r0
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	0f 92       	push	r0
 c12:	11 24       	eor	r1, r1
 c14:	2f 93       	push	r18
 c16:	3f 93       	push	r19
 c18:	4f 93       	push	r20
 c1a:	5f 93       	push	r21
 c1c:	6f 93       	push	r22
 c1e:	7f 93       	push	r23
 c20:	8f 93       	push	r24
 c22:	9f 93       	push	r25
 c24:	af 93       	push	r26
 c26:	bf 93       	push	r27
 c28:	ef 93       	push	r30
 c2a:	ff 93       	push	r31
	UDR0 = get_TX_data(get_TX_index_lectura()); // BufferTX[index_lectura]
 c2c:	0e 94 c2 04 	call	0x984	; 0x984 <get_TX_index_lectura>
 c30:	0e 94 a7 04 	call	0x94e	; 0x94e <get_TX_data>
 c34:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	inc_TX_index_lectura();						// index_lectura++
 c38:	0e 94 0e 05 	call	0xa1c	; 0xa1c <inc_TX_index_lectura>
	if (!hay_datos_TX_buffer()) {	// buffer_len = 8
 c3c:	0e 94 f7 05 	call	0xbee	; 0xbee <hay_datos_TX_buffer>
 c40:	81 11       	cpse	r24, r1
 c42:	04 c0       	rjmp	.+8      	; 0xc4c <__vector_19+0x42>
		reset_TX_index();
 c44:	0e 94 c5 04 	call	0x98a	; 0x98a <reset_TX_index>
		SerialPort_TX_Interrupt_Disable();
 c48:	0e 94 84 04 	call	0x908	; 0x908 <SerialPort_TX_Interrupt_Disable>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
	}
	SerialPort_TX_Interrupt_Enable();
 bde:	0e 94 84 04 	call	0x908	; 0x908 <SerialPort_TX_Interrupt_Enable>
}
<<<<<<< HEAD
 be2:	cf 91       	pop	r28
 be4:	1f 91       	pop	r17
 be6:	0f 91       	pop	r16
 be8:	08 95       	ret

00000bea <__udivmodhi4>:
 bea:	aa 1b       	sub	r26, r26
 bec:	bb 1b       	sub	r27, r27
 bee:	51 e1       	ldi	r21, 0x11	; 17
 bf0:	07 c0       	rjmp	.+14     	; 0xc00 <__udivmodhi4_ep>

00000bf2 <__udivmodhi4_loop>:
 bf2:	aa 1f       	adc	r26, r26
 bf4:	bb 1f       	adc	r27, r27
 bf6:	a6 17       	cp	r26, r22
 bf8:	b7 07       	cpc	r27, r23
 bfa:	10 f0       	brcs	.+4      	; 0xc00 <__udivmodhi4_ep>
 bfc:	a6 1b       	sub	r26, r22
 bfe:	b7 0b       	sbc	r27, r23

00000c00 <__udivmodhi4_ep>:
 c00:	88 1f       	adc	r24, r24
 c02:	99 1f       	adc	r25, r25
 c04:	5a 95       	dec	r21
 c06:	a9 f7       	brne	.-22     	; 0xbf2 <__udivmodhi4_loop>
 c08:	80 95       	com	r24
 c0a:	90 95       	com	r25
 c0c:	bc 01       	movw	r22, r24
 c0e:	cd 01       	movw	r24, r26
 c10:	08 95       	ret

00000c12 <__divmodsi4>:
 c12:	05 2e       	mov	r0, r21
 c14:	97 fb       	bst	r25, 7
 c16:	1e f4       	brtc	.+6      	; 0xc1e <__divmodsi4+0xc>
 c18:	00 94       	com	r0
 c1a:	0e 94 20 06 	call	0xc40	; 0xc40 <__negsi2>
 c1e:	57 fd       	sbrc	r21, 7
 c20:	07 d0       	rcall	.+14     	; 0xc30 <__divmodsi4_neg2>
 c22:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodsi4>
 c26:	07 fc       	sbrc	r0, 7
 c28:	03 d0       	rcall	.+6      	; 0xc30 <__divmodsi4_neg2>
 c2a:	4e f4       	brtc	.+18     	; 0xc3e <__divmodsi4_exit>
 c2c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__negsi2>

00000c30 <__divmodsi4_neg2>:
 c30:	50 95       	com	r21
 c32:	40 95       	com	r20
 c34:	30 95       	com	r19
 c36:	21 95       	neg	r18
 c38:	3f 4f       	sbci	r19, 0xFF	; 255
 c3a:	4f 4f       	sbci	r20, 0xFF	; 255
 c3c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c3e <__divmodsi4_exit>:
 c3e:	08 95       	ret

00000c40 <__negsi2>:
 c40:	90 95       	com	r25
 c42:	80 95       	com	r24
 c44:	70 95       	com	r23
 c46:	61 95       	neg	r22
 c48:	7f 4f       	sbci	r23, 0xFF	; 255
 c4a:	8f 4f       	sbci	r24, 0xFF	; 255
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	08 95       	ret

00000c50 <__tablejump2__>:
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	05 90       	lpm	r0, Z+
 c56:	f4 91       	lpm	r31, Z
 c58:	e0 2d       	mov	r30, r0
 c5a:	09 94       	ijmp

00000c5c <__umulhisi3>:
 c5c:	a2 9f       	mul	r26, r18
 c5e:	b0 01       	movw	r22, r0
 c60:	b3 9f       	mul	r27, r19
 c62:	c0 01       	movw	r24, r0
 c64:	a3 9f       	mul	r26, r19
 c66:	70 0d       	add	r23, r0
 c68:	81 1d       	adc	r24, r1
 c6a:	11 24       	eor	r1, r1
 c6c:	91 1d       	adc	r25, r1
 c6e:	b2 9f       	mul	r27, r18
 c70:	70 0d       	add	r23, r0
 c72:	81 1d       	adc	r24, r1
 c74:	11 24       	eor	r1, r1
 c76:	91 1d       	adc	r25, r1
 c78:	08 95       	ret

00000c7a <__udivmodsi4>:
 c7a:	a1 e2       	ldi	r26, 0x21	; 33
 c7c:	1a 2e       	mov	r1, r26
 c7e:	aa 1b       	sub	r26, r26
 c80:	bb 1b       	sub	r27, r27
 c82:	fd 01       	movw	r30, r26
 c84:	0d c0       	rjmp	.+26     	; 0xca0 <__udivmodsi4_ep>

00000c86 <__udivmodsi4_loop>:
 c86:	aa 1f       	adc	r26, r26
 c88:	bb 1f       	adc	r27, r27
 c8a:	ee 1f       	adc	r30, r30
 c8c:	ff 1f       	adc	r31, r31
 c8e:	a2 17       	cp	r26, r18
 c90:	b3 07       	cpc	r27, r19
 c92:	e4 07       	cpc	r30, r20
 c94:	f5 07       	cpc	r31, r21
 c96:	20 f0       	brcs	.+8      	; 0xca0 <__udivmodsi4_ep>
 c98:	a2 1b       	sub	r26, r18
 c9a:	b3 0b       	sbc	r27, r19
 c9c:	e4 0b       	sbc	r30, r20
 c9e:	f5 0b       	sbc	r31, r21

00000ca0 <__udivmodsi4_ep>:
 ca0:	66 1f       	adc	r22, r22
 ca2:	77 1f       	adc	r23, r23
 ca4:	88 1f       	adc	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	1a 94       	dec	r1
 caa:	69 f7       	brne	.-38     	; 0xc86 <__udivmodsi4_loop>
 cac:	60 95       	com	r22
 cae:	70 95       	com	r23
 cb0:	80 95       	com	r24
 cb2:	90 95       	com	r25
 cb4:	9b 01       	movw	r18, r22
 cb6:	ac 01       	movw	r20, r24
 cb8:	bd 01       	movw	r22, r26
 cba:	cf 01       	movw	r24, r30
 cbc:	08 95       	ret

00000cbe <strcmp>:
 cbe:	fb 01       	movw	r30, r22
 cc0:	dc 01       	movw	r26, r24
 cc2:	8d 91       	ld	r24, X+
 cc4:	01 90       	ld	r0, Z+
 cc6:	80 19       	sub	r24, r0
 cc8:	01 10       	cpse	r0, r1
 cca:	d9 f3       	breq	.-10     	; 0xcc2 <strcmp+0x4>
 ccc:	99 0b       	sbc	r25, r25
 cce:	08 95       	ret

00000cd0 <strncmp>:
 cd0:	fb 01       	movw	r30, r22
 cd2:	dc 01       	movw	r26, r24
 cd4:	41 50       	subi	r20, 0x01	; 1
 cd6:	50 40       	sbci	r21, 0x00	; 0
 cd8:	30 f0       	brcs	.+12     	; 0xce6 <strncmp+0x16>
 cda:	8d 91       	ld	r24, X+
 cdc:	01 90       	ld	r0, Z+
 cde:	80 19       	sub	r24, r0
 ce0:	19 f4       	brne	.+6      	; 0xce8 <strncmp+0x18>
 ce2:	00 20       	and	r0, r0
 ce4:	b9 f7       	brne	.-18     	; 0xcd4 <strncmp+0x4>
 ce6:	88 1b       	sub	r24, r24
 ce8:	99 0b       	sbc	r25, r25
 cea:	08 95       	ret

00000cec <_exit>:
 cec:	f8 94       	cli

00000cee <__stop_program>:
 cee:	ff cf       	rjmp	.-2      	; 0xcee <__stop_program>
=======
 c4c:	ff 91       	pop	r31
 c4e:	ef 91       	pop	r30
 c50:	bf 91       	pop	r27
 c52:	af 91       	pop	r26
 c54:	9f 91       	pop	r25
 c56:	8f 91       	pop	r24
 c58:	7f 91       	pop	r23
 c5a:	6f 91       	pop	r22
 c5c:	5f 91       	pop	r21
 c5e:	4f 91       	pop	r20
 c60:	3f 91       	pop	r19
 c62:	2f 91       	pop	r18
 c64:	0f 90       	pop	r0
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	0f 90       	pop	r0
 c6a:	1f 90       	pop	r1
 c6c:	18 95       	reti

00000c6e <__divmodsi4>:
 c6e:	05 2e       	mov	r0, r21
 c70:	97 fb       	bst	r25, 7
 c72:	1e f4       	brtc	.+6      	; 0xc7a <__divmodsi4+0xc>
 c74:	00 94       	com	r0
 c76:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__negsi2>
 c7a:	57 fd       	sbrc	r21, 7
 c7c:	07 d0       	rcall	.+14     	; 0xc8c <__divmodsi4_neg2>
 c7e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__udivmodsi4>
 c82:	07 fc       	sbrc	r0, 7
 c84:	03 d0       	rcall	.+6      	; 0xc8c <__divmodsi4_neg2>
 c86:	4e f4       	brtc	.+18     	; 0xc9a <__divmodsi4_exit>
 c88:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__negsi2>

00000c8c <__divmodsi4_neg2>:
 c8c:	50 95       	com	r21
 c8e:	40 95       	com	r20
 c90:	30 95       	com	r19
 c92:	21 95       	neg	r18
 c94:	3f 4f       	sbci	r19, 0xFF	; 255
 c96:	4f 4f       	sbci	r20, 0xFF	; 255
 c98:	5f 4f       	sbci	r21, 0xFF	; 255

00000c9a <__divmodsi4_exit>:
 c9a:	08 95       	ret

00000c9c <__negsi2>:
 c9c:	90 95       	com	r25
 c9e:	80 95       	com	r24
 ca0:	70 95       	com	r23
 ca2:	61 95       	neg	r22
 ca4:	7f 4f       	sbci	r23, 0xFF	; 255
 ca6:	8f 4f       	sbci	r24, 0xFF	; 255
 ca8:	9f 4f       	sbci	r25, 0xFF	; 255
 caa:	08 95       	ret

00000cac <__tablejump2__>:
 cac:	ee 0f       	add	r30, r30
 cae:	ff 1f       	adc	r31, r31
 cb0:	05 90       	lpm	r0, Z+
 cb2:	f4 91       	lpm	r31, Z
 cb4:	e0 2d       	mov	r30, r0
 cb6:	09 94       	ijmp

00000cb8 <__umulhisi3>:
 cb8:	a2 9f       	mul	r26, r18
 cba:	b0 01       	movw	r22, r0
 cbc:	b3 9f       	mul	r27, r19
 cbe:	c0 01       	movw	r24, r0
 cc0:	a3 9f       	mul	r26, r19
 cc2:	70 0d       	add	r23, r0
 cc4:	81 1d       	adc	r24, r1
 cc6:	11 24       	eor	r1, r1
 cc8:	91 1d       	adc	r25, r1
 cca:	b2 9f       	mul	r27, r18
 ccc:	70 0d       	add	r23, r0
 cce:	81 1d       	adc	r24, r1
 cd0:	11 24       	eor	r1, r1
 cd2:	91 1d       	adc	r25, r1
 cd4:	08 95       	ret

00000cd6 <__udivmodsi4>:
 cd6:	a1 e2       	ldi	r26, 0x21	; 33
 cd8:	1a 2e       	mov	r1, r26
 cda:	aa 1b       	sub	r26, r26
 cdc:	bb 1b       	sub	r27, r27
 cde:	fd 01       	movw	r30, r26
 ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__udivmodsi4_ep>

00000ce2 <__udivmodsi4_loop>:
 ce2:	aa 1f       	adc	r26, r26
 ce4:	bb 1f       	adc	r27, r27
 ce6:	ee 1f       	adc	r30, r30
 ce8:	ff 1f       	adc	r31, r31
 cea:	a2 17       	cp	r26, r18
 cec:	b3 07       	cpc	r27, r19
 cee:	e4 07       	cpc	r30, r20
 cf0:	f5 07       	cpc	r31, r21
 cf2:	20 f0       	brcs	.+8      	; 0xcfc <__udivmodsi4_ep>
 cf4:	a2 1b       	sub	r26, r18
 cf6:	b3 0b       	sbc	r27, r19
 cf8:	e4 0b       	sbc	r30, r20
 cfa:	f5 0b       	sbc	r31, r21

00000cfc <__udivmodsi4_ep>:
 cfc:	66 1f       	adc	r22, r22
 cfe:	77 1f       	adc	r23, r23
 d00:	88 1f       	adc	r24, r24
 d02:	99 1f       	adc	r25, r25
 d04:	1a 94       	dec	r1
 d06:	69 f7       	brne	.-38     	; 0xce2 <__udivmodsi4_loop>
 d08:	60 95       	com	r22
 d0a:	70 95       	com	r23
 d0c:	80 95       	com	r24
 d0e:	90 95       	com	r25
 d10:	9b 01       	movw	r18, r22
 d12:	ac 01       	movw	r20, r24
 d14:	bd 01       	movw	r22, r26
 d16:	cf 01       	movw	r24, r30
 d18:	08 95       	ret

00000d1a <strcmp>:
 d1a:	fb 01       	movw	r30, r22
 d1c:	dc 01       	movw	r26, r24
 d1e:	8d 91       	ld	r24, X+
 d20:	01 90       	ld	r0, Z+
 d22:	80 19       	sub	r24, r0
 d24:	01 10       	cpse	r0, r1
 d26:	d9 f3       	breq	.-10     	; 0xd1e <strcmp+0x4>
 d28:	99 0b       	sbc	r25, r25
 d2a:	08 95       	ret

00000d2c <strncmp>:
 d2c:	fb 01       	movw	r30, r22
 d2e:	dc 01       	movw	r26, r24
 d30:	41 50       	subi	r20, 0x01	; 1
 d32:	50 40       	sbci	r21, 0x00	; 0
 d34:	30 f0       	brcs	.+12     	; 0xd42 <strncmp+0x16>
 d36:	8d 91       	ld	r24, X+
 d38:	01 90       	ld	r0, Z+
 d3a:	80 19       	sub	r24, r0
 d3c:	19 f4       	brne	.+6      	; 0xd44 <strncmp+0x18>
 d3e:	00 20       	and	r0, r0
 d40:	b9 f7       	brne	.-18     	; 0xd30 <strncmp+0x4>
 d42:	88 1b       	sub	r24, r24
 d44:	99 0b       	sbc	r25, r25
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
>>>>>>> a05165b61833726db50501243ca97caa3d1078d5
