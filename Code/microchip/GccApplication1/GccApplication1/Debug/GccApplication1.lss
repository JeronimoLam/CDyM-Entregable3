
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000330  008001fe  008001fe  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001407  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b05  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000daf  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00003374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000914  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000997  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00004a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  9e:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_duration_timer>:
  a6:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <duration_timer+0x1>
  aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <duration_timer>
  ae:	08 95       	ret

000000b0 <set_sound_playing>:
  b0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x1>
  b4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end>
  b8:	08 95       	ret

000000ba <get_duration_timer>:
  ba:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <duration_timer>
  be:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <duration_timer+0x1>
  c2:	08 95       	ret

000000c4 <__vector_14>:



// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <get_duration_timer>
	if (duration_timer) {
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	21 f0       	breq	.+8      	; 0xf6 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <set_duration_timer>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
  f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <set_sound_playing>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_19>:
// 	if (Index_escritura==N_DATOS) {
// 		FLAG_datos_recibidos=1;
// 	}
// }

ISR(USART_UDRE_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	UDR0 = get_TX_data(get_TX_index_lectura()); // BufferTX[index_lectura]
 146:	0e 94 1d 01 	call	0x23a	; 0x23a <get_TX_index_lectura>
 14a:	0e 94 17 01 	call	0x22e	; 0x22e <get_TX_data>
 14e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	inc_TX_index_lectura();						// index_lectura++
 152:	0e 94 29 01 	call	0x252	; 0x252 <inc_TX_index_lectura>
	if (!hay_datos_TX_buffer()) {	// buffer_len = 8
 156:	0e 94 66 01 	call	0x2cc	; 0x2cc <hay_datos_TX_buffer>
 15a:	81 11       	cpse	r24, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <__vector_19+0x42>
		reset_TX_index();
 15e:	0e 94 20 01 	call	0x240	; 0x240 <reset_TX_index>
		SerialPort_TX_Interrupt_Disable();
 162:	0e 94 00 01 	call	0x200	; 0x200 <SerialPort_TX_Interrupt_Disable>
	}
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:
	// char MENU_flag=0;


	//Habilito la m?scara de interrupciones

	Buffer_Init();
 188:	0e 94 06 01 	call	0x20c	; 0x20c <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SerialPort_Init>
	SerialPort_TX_Enable();
 192:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SerialPort_TX_Enable>
	//SerialPort_TX_Interrupt_Enable();

	sei();
 196:	78 94       	sei

	int i = 0;
	uint8_t * string = "hola\r\n\0";
	//UART_Update();

	UART_Write_String_To_Buffer(msjBienvenida);
 198:	80 ec       	ldi	r24, 0xC0	; 192
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 1a0:	88 e9       	ldi	r24, 0x98	; 152
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 1a8:	86 e6       	ldi	r24, 0x66	; 102
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 1b0:	8d e2       	ldi	r24, 0x2D	; 45
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Write_String_To_Buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	89 e6       	ldi	r24, 0x69	; 105
 1c4:	98 e1       	ldi	r25, 0x18	; 24
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x3e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x48>
 1d0:	00 00       	nop
 1d2:	f6 cf       	rjmp	.-20     	; 0x1c0 <main+0x38>

000001d4 <SerialPort_Init>:
 1d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1d8:	96 e0       	ldi	r25, 0x06	; 6
 1da:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e6:	08 95       	ret

000001e8 <SerialPort_TX_Enable>:
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 83       	st	Z, r24
 1f2:	08 95       	ret

000001f4 <SerialPort_TX_Interrupt_Enable>:
 1f4:	e1 ec       	ldi	r30, 0xC1	; 193
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <SerialPort_TX_Interrupt_Disable>:
 200:	e1 ec       	ldi	r30, 0xC1	; 193
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	8f 7d       	andi	r24, 0xDF	; 223
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <Buffer_Init>:
		*dato=UDR0;
		return 1;
	}
	else
		return 0;
}
 20c:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x191>
 210:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <TX_buffer+0x190>
 214:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x193>
 218:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x192>
 21c:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <RX_buffer+0x191>
 220:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <RX_buffer+0x190>
 224:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <RX_buffer+0x193>
 228:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <RX_buffer+0x192>
 22c:	08 95       	ret

0000022e <get_TX_data>:
 22e:	e8 2f       	mov	r30, r24
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ea 5f       	subi	r30, 0xFA	; 250
 234:	fd 4f       	sbci	r31, 0xFD	; 253
 236:	80 81       	ld	r24, Z
 238:	08 95       	ret

0000023a <get_TX_index_lectura>:
 23a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <TX_buffer+0x192>
 23e:	08 95       	ret

00000240 <reset_TX_index>:
 240:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x193>
 244:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x192>
 248:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x191>
 24c:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <TX_buffer+0x190>
 250:	08 95       	ret

00000252 <inc_TX_index_lectura>:
 252:	e8 e9       	ldi	r30, 0x98	; 152
 254:	f3 e0       	ldi	r31, 0x03	; 3
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	91 83       	std	Z+1, r25	; 0x01
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret

00000262 <UART_Write_Char_To_Buffer>:
 262:	cf 93       	push	r28
 264:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <TX_buffer+0x190>
 268:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <TX_buffer+0x191>
 26c:	20 39       	cpi	r18, 0x90	; 144
 26e:	31 40       	sbci	r19, 0x01	; 1
 270:	88 f4       	brcc	.+34     	; 0x294 <UART_Write_Char_To_Buffer+0x32>
 272:	c8 2f       	mov	r28, r24
 274:	0e 94 00 01 	call	0x200	; 0x200 <SerialPort_TX_Interrupt_Disable>
 278:	e6 e9       	ldi	r30, 0x96	; 150
 27a:	f3 e0       	ldi	r31, 0x03	; 3
 27c:	80 81       	ld	r24, Z
 27e:	91 81       	ldd	r25, Z+1	; 0x01
 280:	dc 01       	movw	r26, r24
 282:	aa 5f       	subi	r26, 0xFA	; 250
 284:	bd 4f       	sbci	r27, 0xFD	; 253
 286:	cc 93       	st	X, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	91 83       	std	Z+1, r25	; 0x01
 28c:	80 83       	st	Z, r24
 28e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SerialPort_TX_Interrupt_Enable>
 292:	01 c0       	rjmp	.+2      	; 0x296 <UART_Write_Char_To_Buffer+0x34>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <UART_Write_String_To_Buffer>:
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	8c 01       	movw	r16, r24
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <UART_Write_String_To_Buffer+0x12>
 2a6:	0e 94 31 01 	call	0x262	; 0x262 <UART_Write_Char_To_Buffer>
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
 2ac:	f8 01       	movw	r30, r16
 2ae:	ec 0f       	add	r30, r28
 2b0:	f1 1d       	adc	r31, r1
 2b2:	80 81       	ld	r24, Z
 2b4:	81 11       	cpse	r24, r1
 2b6:	f7 cf       	rjmp	.-18     	; 0x2a6 <UART_Write_String_To_Buffer+0xc>
 2b8:	8d e0       	ldi	r24, 0x0D	; 13
 2ba:	0e 94 31 01 	call	0x262	; 0x262 <UART_Write_Char_To_Buffer>
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 31 01 	call	0x262	; 0x262 <UART_Write_Char_To_Buffer>
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <hay_datos_TX_buffer>:
		TX_buffer.indice_escritura = 0;
	}
}

char hay_datos_TX_buffer() {
	return (TX_buffer.indice_lectura < TX_buffer.indice_escritura);
 2cc:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <TX_buffer+0x192>
 2d0:	50 91 99 03 	lds	r21, 0x0399	; 0x800399 <TX_buffer+0x193>
 2d4:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <TX_buffer+0x190>
 2d8:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <TX_buffer+0x191>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	42 17       	cp	r20, r18
 2e0:	53 07       	cpc	r21, r19
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <hay_datos_TX_buffer+0x1a>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
}
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
