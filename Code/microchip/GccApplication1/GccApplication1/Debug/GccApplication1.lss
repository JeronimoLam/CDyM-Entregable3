
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ea  00800100  00000e26  00000eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000260  008005ea  008005ea  000013a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de5  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf5  00000000  00000000  000034c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f5  00000000  00000000  000041b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  000055ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1f  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a93  00000000  00000000  0000662f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000070c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_14>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_18>
  4c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_19>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	8f 02       	muls	r24, r31
  6a:	93 02       	muls	r25, r19
  6c:	7c 02       	muls	r23, r28
  6e:	7f 02       	muls	r23, r31
  70:	83 02       	muls	r24, r19
  72:	87 02       	muls	r24, r23
  74:	8b 02       	muls	r24, r27
  76:	9a 02       	muls	r25, r26
  78:	9a 02       	muls	r25, r26
  7a:	9a 02       	muls	r25, r26
  7c:	9a 02       	muls	r25, r26
  7e:	9a 02       	muls	r25, r26
  80:	9a 02       	muls	r25, r26
  82:	9a 02       	muls	r25, r26
  84:	9a 02       	muls	r25, r26
  86:	97 02       	muls	r25, r23

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	15 e0       	ldi	r17, 0x05	; 5
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e6 e2       	ldi	r30, 0x26	; 38
  9c:	fe e0       	ldi	r31, 0x0E	; 14
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	aa 3e       	cpi	r26, 0xEA	; 234
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	28 e0       	ldi	r18, 0x08	; 8
  ac:	aa ee       	ldi	r26, 0xEA	; 234
  ae:	b5 e0       	ldi	r27, 0x05	; 5
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	aa 34       	cpi	r26, 0x4A	; 74
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <main>
  be:	0c 94 11 07 	jmp	0xe22	; 0xe22 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <AUDIO_get_songs_menu>:
// @brief *resumen*
// @param  *parametrsoq que resumen*
// @return *lo que retorna*
unsigned int get_tempo() {
	return tempo;
}
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	08 95       	ret

000000cc <set_song>:
  cc:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <__data_end>
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e8 5f       	subi	r30, 0xF8	; 248
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <song+0x1>
  e4:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <song>
  e8:	08 95       	ret

000000ea <set_duration_timer>:
  ea:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <duration_timer+0x1>
  ee:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <duration_timer>
  f2:	08 95       	ret

000000f4 <set_sound_playing>:
  f4:	90 93 ed 05 	sts	0x05ED, r25	; 0x8005ed <sound_playing+0x1>
  f8:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <sound_playing>
  fc:	08 95       	ret

000000fe <get_duration_timer>:
  fe:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <duration_timer>
 102:	90 91 f8 05 	lds	r25, 0x05F8	; 0x8005f8 <duration_timer+0x1>
 106:	08 95       	ret

00000108 <get_song_playing>:

unsigned char get_song_playing(){
	return song_playing;
 108:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <song_playing>
}
 10c:	08 95       	ret

0000010e <sound>:


// Saco el sonido por el PIN5 del PORTD: freq en Hz, dur en ms
void sound(unsigned int freq, unsigned int dur)
{
	while (sound_playing);      // Si hay alg?n sonido presente, espero a que termine
 10e:	40 91 ec 05 	lds	r20, 0x05EC	; 0x8005ec <sound_playing>
 112:	50 91 ed 05 	lds	r21, 0x05ED	; 0x8005ed <sound_playing+0x1>
 116:	45 2b       	or	r20, r21
 118:	d1 f7       	brne	.-12     	; 0x10e <sound>
	
	duration_timer = dur;       // Seteo el tiempo de duraci?n
 11a:	70 93 f8 05 	sts	0x05F8, r23	; 0x8005f8 <duration_timer+0x1>
 11e:	60 93 f7 05 	sts	0x05F7, r22	; 0x8005f7 <duration_timer>
	
	// Activo la salida y configuro el timer para que genere la se?al de la frecuencia apropiada
	TCCR1A|=(1<<COM1A0);
 122:	e0 e8       	ldi	r30, 0x80	; 128
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	20 81       	ld	r18, Z
 128:	20 64       	ori	r18, 0x40	; 64
 12a:	20 83       	st	Z, r18
	
	// Actualizo el valor de OCR1A para que produzca la nota adecuada
	OCR1A=(8000000/(freq))-1;
 12c:	9c 01       	movw	r18, r24
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	72 e1       	ldi	r23, 0x12	; 18
 136:	8a e7       	ldi	r24, 0x7A	; 122
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divmodsi4>
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	31 09       	sbc	r19, r1
 142:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 146:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	sound_playing = 1;          // Activo el flag para avisar que hay una nota sonando
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 ed 05 	sts	0x05ED, r25	; 0x8005ed <sound_playing+0x1>
 152:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <sound_playing>
 156:	08 95       	ret

00000158 <stop_song>:
}

void stop_song()
{
	song_playing = 0;           // Activo el flag para avisar que hay una nota sonando
 158:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <song_playing>
	sound_playing = 0;          // Activo el flag para avisar que hay una nota sonando
 15c:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <sound_playing+0x1>
 160:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <sound_playing>
	TCCR1A&=~(1<<COM1A0);       // Desactivo la salida
 164:	e0 e8       	ldi	r30, 0x80	; 128
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 7b       	andi	r24, 0xBF	; 191
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <start_song>:
}

void start_song() {
	song_playing = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <song_playing>
	song = rtttl_library[current_song];
 176:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <__data_end>
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e8 5f       	subi	r30, 0xF8	; 248
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	80 81       	ld	r24, Z
 186:	91 81       	ldd	r25, Z+1	; 0x01
 188:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <song+0x1>
 18c:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <song>

	while (*song != ':') song++;  // Busca el primer ':'
 190:	05 c0       	rjmp	.+10     	; 0x19c <start_song+0x2c>
 192:	31 96       	adiw	r30, 0x01	; 1
 194:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 198:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 19c:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 1a0:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 1a4:	80 81       	ld	r24, Z
 1a6:	8a 33       	cpi	r24, 0x3A	; 58
 1a8:	a1 f7       	brne	.-24     	; 0x192 <start_song+0x22>
	song++;                       // Saltea el primer ':'
 1aa:	31 96       	adiw	r30, 0x01	; 1
 1ac:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 1b0:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
	while (*song!=':')            // Repite hasta encontrar ':'
 1b4:	3f c1       	rjmp	.+638    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		if (*song == 'd')           // Entra si es el seteo de la duraci?n
 1b6:	80 81       	ld	r24, Z
 1b8:	84 36       	cpi	r24, 0x64	; 100
 1ba:	09 f0       	breq	.+2      	; 0x1be <start_song+0x4e>
 1bc:	55 c0       	rjmp	.+170    	; 0x268 <start_song+0xf8>
		{
			duration = 0;             // Seteo la duraci?n en cero (temporalmente)
 1be:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 1c2:	31 96       	adiw	r30, 0x01	; 1
 1c4:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 1c8:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
			while (*song == '=') song++;  // Salteo '='
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <start_song+0x68>
 1ce:	31 96       	adiw	r30, 0x01	; 1
 1d0:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 1d4:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 1d8:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 1dc:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 1e0:	80 81       	ld	r24, Z
 1e2:	8d 33       	cpi	r24, 0x3D	; 61
 1e4:	a1 f3       	breq	.-24     	; 0x1ce <start_song+0x5e>
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <start_song+0x82>
			while (*song == ' ') song++;  // Salteo los espacios
 1e8:	31 96       	adiw	r30, 0x01	; 1
 1ea:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 1ee:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 1f2:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 1f6:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 1fa:	80 81       	ld	r24, Z
 1fc:	80 32       	cpi	r24, 0x20	; 32
 1fe:	a1 f3       	breq	.-24     	; 0x1e8 <start_song+0x78>
			// Si el caracter es un n?mero, seteo la duraci?n
			if (*song>='0' && *song<='9') duration = *song - '0';
 200:	80 81       	ld	r24, Z
 202:	80 33       	cpi	r24, 0x30	; 48
 204:	38 f0       	brcs	.+14     	; 0x214 <start_song+0xa4>
 206:	80 81       	ld	r24, Z
 208:	8a 33       	cpi	r24, 0x3A	; 58
 20a:	20 f4       	brcc	.+8      	; 0x214 <start_song+0xa4>
 20c:	80 81       	ld	r24, Z
 20e:	80 53       	subi	r24, 0x30	; 48
 210:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 214:	cf 01       	movw	r24, r30
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <song+0x1>
 21c:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <song>
			// Me fijo si el caracter es un n?mero, ya que la diraci?n puede ser de dos d?gitos de largo
			if (*song>='0' && *song<='9')
 220:	21 81       	ldd	r18, Z+1	; 0x01
 222:	20 33       	cpi	r18, 0x30	; 48
 224:	d0 f0       	brcs	.+52     	; 0x25a <start_song+0xea>
 226:	21 81       	ldd	r18, Z+1	; 0x01
 228:	2a 33       	cpi	r18, 0x3A	; 58
 22a:	b8 f4       	brcc	.+46     	; 0x25a <start_song+0xea>
			{ // Multiplico duraci?n por 10 y le agrego el valor del caracter
				duration = duration*10 + (*song - '0');
 22c:	31 81       	ldd	r19, Z+1	; 0x01
 22e:	20 91 f6 05 	lds	r18, 0x05F6	; 0x8005f6 <duration>
 232:	22 0f       	add	r18, r18
 234:	42 2f       	mov	r20, r18
 236:	44 0f       	add	r20, r20
 238:	44 0f       	add	r20, r20
 23a:	24 0f       	add	r18, r20
 23c:	23 0f       	add	r18, r19
 23e:	20 53       	subi	r18, 0x30	; 48
 240:	20 93 f6 05 	sts	0x05F6, r18	; 0x8005f6 <duration>
				song++;                 // Avanzo al pr?ximo caracter
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <song+0x1>
 24a:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <song>
 24e:	05 c0       	rjmp	.+10     	; 0x25a <start_song+0xea>
			}
			while (*song == ',') song++;  // Salteo ','
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 256:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 25a:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 25e:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 262:	80 81       	ld	r24, Z
 264:	8c 32       	cpi	r24, 0x2C	; 44
 266:	a1 f3       	breq	.-24     	; 0x250 <start_song+0xe0>
		}
		
		if (*song == 'o')           // Entra si es el seteo de la octava
 268:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 26c:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 270:	80 81       	ld	r24, Z
 272:	8f 36       	cpi	r24, 0x6F	; 111
 274:	e9 f5       	brne	.+122    	; 0x2f0 <start_song+0x180>
		{
			octave = 0;               // Seteo la octava en cero (temporalmente)
 276:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <octave>
			song++;                   // Avanzo al pr?ximo caracter
 27a:	31 96       	adiw	r30, 0x01	; 1
 27c:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 280:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
			while (*song == '=') song++;  // Salteo '='
 284:	05 c0       	rjmp	.+10     	; 0x290 <start_song+0x120>
 286:	31 96       	adiw	r30, 0x01	; 1
 288:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 28c:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 290:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 294:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 298:	80 81       	ld	r24, Z
 29a:	8d 33       	cpi	r24, 0x3D	; 61
 29c:	a1 f3       	breq	.-24     	; 0x286 <start_song+0x116>
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <start_song+0x13a>
			while (*song == ' ') song++;  // Salteo los espacios
 2a0:	31 96       	adiw	r30, 0x01	; 1
 2a2:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 2a6:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 2aa:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 2ae:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 2b2:	80 81       	ld	r24, Z
 2b4:	80 32       	cpi	r24, 0x20	; 32
 2b6:	a1 f3       	breq	.-24     	; 0x2a0 <start_song+0x130>
			// Si el caracter es un n?mero, seteo la octava
			if (*song>='0' && *song<='9') octave = *song - '0';
 2b8:	80 81       	ld	r24, Z
 2ba:	80 33       	cpi	r24, 0x30	; 48
 2bc:	38 f0       	brcs	.+14     	; 0x2cc <start_song+0x15c>
 2be:	80 81       	ld	r24, Z
 2c0:	8a 33       	cpi	r24, 0x3A	; 58
 2c2:	20 f4       	brcc	.+8      	; 0x2cc <start_song+0x15c>
 2c4:	80 81       	ld	r24, Z
 2c6:	80 53       	subi	r24, 0x30	; 48
 2c8:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <octave>
			song++;                   // Avanzo al pr?ximo caracter
 2cc:	31 96       	adiw	r30, 0x01	; 1
 2ce:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 2d2:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
			while (*song == ',') song++;  // Salteo ','
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <start_song+0x172>
 2d8:	31 96       	adiw	r30, 0x01	; 1
 2da:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 2de:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 2e2:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 2e6:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 2ea:	80 81       	ld	r24, Z
 2ec:	8c 32       	cpi	r24, 0x2C	; 44
 2ee:	a1 f3       	breq	.-24     	; 0x2d8 <start_song+0x168>
		}
		if (*song == 'b')           // Entra si es el seteo del tempo (beats por minuto)
 2f0:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 2f4:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 2f8:	80 81       	ld	r24, Z
 2fa:	82 36       	cpi	r24, 0x62	; 98
 2fc:	09 f0       	breq	.+2      	; 0x300 <start_song+0x190>
 2fe:	93 c0       	rjmp	.+294    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			tempo = 0;                // Seteo el tempo en cero (temporalmente)
 300:	10 92 f1 05 	sts	0x05F1, r1	; 0x8005f1 <tempo+0x1>
 304:	10 92 f0 05 	sts	0x05F0, r1	; 0x8005f0 <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 308:	31 96       	adiw	r30, 0x01	; 1
 30a:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 30e:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
			while (*song == '=') song++;  // Salteo '='
 312:	05 c0       	rjmp	.+10     	; 0x31e <start_song+0x1ae>
 314:	31 96       	adiw	r30, 0x01	; 1
 316:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 31a:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 31e:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 322:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 326:	80 81       	ld	r24, Z
 328:	8d 33       	cpi	r24, 0x3D	; 61
 32a:	a1 f3       	breq	.-24     	; 0x314 <start_song+0x1a4>
 32c:	05 c0       	rjmp	.+10     	; 0x338 <start_song+0x1c8>
			while (*song == ' ') song++;  // Salteo los espacios
 32e:	31 96       	adiw	r30, 0x01	; 1
 330:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 334:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 338:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 33c:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 340:	80 81       	ld	r24, Z
 342:	80 32       	cpi	r24, 0x20	; 32
 344:	a1 f3       	breq	.-24     	; 0x32e <start_song+0x1be>
			// Ahora leo el seteo del tempo (puede tener 3 d?gitos de largo)
			if (*song>='0' && *song<='9') tempo = *song - '0';
 346:	80 81       	ld	r24, Z
 348:	80 33       	cpi	r24, 0x30	; 48
 34a:	50 f0       	brcs	.+20     	; 0x360 <start_song+0x1f0>
 34c:	80 81       	ld	r24, Z
 34e:	8a 33       	cpi	r24, 0x3A	; 58
 350:	38 f4       	brcc	.+14     	; 0x360 <start_song+0x1f0>
 352:	80 81       	ld	r24, Z
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	c0 97       	sbiw	r24, 0x30	; 48
 358:	90 93 f1 05 	sts	0x05F1, r25	; 0x8005f1 <tempo+0x1>
 35c:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 360:	df 01       	movw	r26, r30
 362:	11 96       	adiw	r26, 0x01	; 1
 364:	b0 93 f4 05 	sts	0x05F4, r27	; 0x8005f4 <song+0x1>
 368:	a0 93 f3 05 	sts	0x05F3, r26	; 0x8005f3 <song>
			if (*song>='0' && *song<='9')
 36c:	81 81       	ldd	r24, Z+1	; 0x01
 36e:	80 33       	cpi	r24, 0x30	; 48
 370:	08 f4       	brcc	.+2      	; 0x374 <start_song+0x204>
 372:	4c c0       	rjmp	.+152    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	8a 33       	cpi	r24, 0x3A	; 58
 378:	08 f0       	brcs	.+2      	; 0x37c <start_song+0x20c>
 37a:	48 c0       	rjmp	.+144    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				tempo = tempo*10 + (*song - '0'); // El tempo tiene dos d?gitos
 37c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <tempo>
 380:	90 91 f1 05 	lds	r25, 0x05F1	; 0x8005f1 <tempo+0x1>
 384:	9c 01       	movw	r18, r24
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	82 0f       	add	r24, r18
 398:	93 1f       	adc	r25, r19
 39a:	21 81       	ldd	r18, Z+1	; 0x01
 39c:	82 0f       	add	r24, r18
 39e:	91 1d       	adc	r25, r1
 3a0:	c0 97       	sbiw	r24, 0x30	; 48
 3a2:	90 93 f1 05 	sts	0x05F1, r25	; 0x8005f1 <tempo+0x1>
 3a6:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <tempo>
				song++;                 // Avanzo al pr?ximo caracter
 3aa:	9d 01       	movw	r18, r26
 3ac:	2f 5f       	subi	r18, 0xFF	; 255
 3ae:	3f 4f       	sbci	r19, 0xFF	; 255
 3b0:	30 93 f4 05 	sts	0x05F4, r19	; 0x8005f4 <song+0x1>
 3b4:	20 93 f3 05 	sts	0x05F3, r18	; 0x8005f3 <song>
				if (*song>='0' && *song<='9')
 3b8:	11 96       	adiw	r26, 0x01	; 1
 3ba:	4c 91       	ld	r20, X
 3bc:	11 97       	sbiw	r26, 0x01	; 1
 3be:	40 33       	cpi	r20, 0x30	; 48
 3c0:	28 f1       	brcs	.+74     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	4c 91       	ld	r20, X
 3c6:	11 97       	sbiw	r26, 0x01	; 1
 3c8:	4a 33       	cpi	r20, 0x3A	; 58
 3ca:	00 f5       	brcc	.+64     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				{
					tempo = tempo*10 + (*song - '0'); // El tempo tiene tres d?gitos
 3cc:	ac 01       	movw	r20, r24
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	84 0f       	add	r24, r20
 3e0:	95 1f       	adc	r25, r21
 3e2:	11 96       	adiw	r26, 0x01	; 1
 3e4:	4c 91       	ld	r20, X
 3e6:	84 0f       	add	r24, r20
 3e8:	91 1d       	adc	r25, r1
 3ea:	c0 97       	sbiw	r24, 0x30	; 48
 3ec:	90 93 f1 05 	sts	0x05F1, r25	; 0x8005f1 <tempo+0x1>
 3f0:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <tempo>
					song++;               // Avanzo al pr?ximo caracter
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	30 93 f4 05 	sts	0x05F4, r19	; 0x8005f4 <song+0x1>
 3fc:	20 93 f3 05 	sts	0x05F3, r18	; 0x8005f3 <song>
 400:	05 c0       	rjmp	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				}
			}
			while (*song == ',') song++;  // Salteo ','
 402:	31 96       	adiw	r30, 0x01	; 1
 404:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 408:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 40c:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 410:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 414:	80 81       	ld	r24, Z
 416:	8c 32       	cpi	r24, 0x2C	; 44
 418:	a1 f3       	breq	.-24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		}
		while (*song == ',') song++;    // Salteo ','
 41c:	31 96       	adiw	r30, 0x01	; 1
 41e:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 422:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 426:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 42a:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 42e:	80 81       	ld	r24, Z
 430:	8c 32       	cpi	r24, 0x2C	; 44
 432:	a1 f3       	breq	.-24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	song_playing = 1;
	song = rtttl_library[current_song];

	while (*song != ':') song++;  // Busca el primer ':'
	song++;                       // Saltea el primer ':'
	while (*song!=':')            // Repite hasta encontrar ':'
 434:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 438:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 43c:	80 81       	ld	r24, Z
 43e:	8a 33       	cpi	r24, 0x3A	; 58
 440:	09 f0       	breq	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	b9 ce       	rjmp	.-654    	; 0x1b6 <start_song+0x46>
			}
			while (*song == ',') song++;  // Salteo ','
		}
		while (*song == ',') song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
 444:	31 96       	adiw	r30, 0x01	; 1
 446:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 44a:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 44e:	08 95       	ret

00000450 <play_song>:
}

// Esta funci?n reproduce una canci?n que se le pase en un string con formato RTTTL
void play_song()
{
 450:	0f 93       	push	r16
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
	//UART_Write_Char_To_Buffer('a');
//	                      // Avanzo al pr?ximo caracter
	// read the musical notes
	if (*song && song_playing)                 // Repito hasta que el caracter sea null
 456:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 45a:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 45e:	80 81       	ld	r24, Z
 460:	88 23       	and	r24, r24
 462:	09 f4       	brne	.+2      	; 0x466 <play_song+0x16>
 464:	27 c1       	rjmp	.+590    	; 0x6b4 <play_song+0x264>
 466:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <song_playing>
 46a:	88 23       	and	r24, r24
 46c:	09 f4       	brne	.+2      	; 0x470 <play_song+0x20>
 46e:	22 c1       	rjmp	.+580    	; 0x6b4 <play_song+0x264>
	{
		current_note = 255;         // Nota por defecto = pausa
 470:	8f ef       	ldi	r24, 0xFF	; 255
 472:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
 476:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <octave>
 47a:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <temp_octave>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
 47e:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <duration>
 482:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <temp_duration>
		dot_flag = 0;               // Borro el flag de detecci?n de punto
 486:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <dot_flag>
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
 48a:	80 81       	ld	r24, Z
 48c:	80 33       	cpi	r24, 0x30	; 48
 48e:	18 f1       	brcs	.+70     	; 0x4d6 <play_song+0x86>
 490:	80 81       	ld	r24, Z
 492:	8a 33       	cpi	r24, 0x3A	; 58
 494:	00 f5       	brcc	.+64     	; 0x4d6 <play_song+0x86>
		{
			temp_duration = *song - '0';
 496:	df 01       	movw	r26, r30
 498:	8d 91       	ld	r24, X+
 49a:	80 53       	subi	r24, 0x30	; 48
 49c:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <temp_duration>
			song++;
 4a0:	b0 93 f4 05 	sts	0x05F4, r27	; 0x8005f4 <song+0x1>
 4a4:	a0 93 f3 05 	sts	0x05F3, r26	; 0x8005f3 <song>
			if (*song>='0' && *song<='9')
 4a8:	81 81       	ldd	r24, Z+1	; 0x01
 4aa:	80 33       	cpi	r24, 0x30	; 48
 4ac:	a0 f0       	brcs	.+40     	; 0x4d6 <play_song+0x86>
 4ae:	81 81       	ldd	r24, Z+1	; 0x01
 4b0:	8a 33       	cpi	r24, 0x3A	; 58
 4b2:	88 f4       	brcc	.+34     	; 0x4d6 <play_song+0x86>
			{
				temp_duration = temp_duration*10 + (*song - '0');
 4b4:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <temp_duration>
 4b8:	91 81       	ldd	r25, Z+1	; 0x01
 4ba:	88 0f       	add	r24, r24
 4bc:	28 2f       	mov	r18, r24
 4be:	22 0f       	add	r18, r18
 4c0:	22 0f       	add	r18, r18
 4c2:	82 0f       	add	r24, r18
 4c4:	89 0f       	add	r24, r25
 4c6:	80 53       	subi	r24, 0x30	; 48
 4c8:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <temp_duration>
				song++;
 4cc:	11 96       	adiw	r26, 0x01	; 1
 4ce:	b0 93 f4 05 	sts	0x05F4, r27	; 0x8005f4 <song+0x1>
 4d2:	a0 93 f3 05 	sts	0x05F3, r26	; 0x8005f3 <song>
			}
		}
		// Busco una nota
		switch (*song)
 4d6:	c0 91 f3 05 	lds	r28, 0x05F3	; 0x8005f3 <song>
 4da:	d0 91 f4 05 	lds	r29, 0x05F4	; 0x8005f4 <song+0x1>
 4de:	e8 81       	ld	r30, Y
 4e0:	8e 2f       	mov	r24, r30
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	e1 56       	subi	r30, 0x61	; 97
 4e8:	f1 09       	sbc	r31, r1
 4ea:	e0 31       	cpi	r30, 0x10	; 16
 4ec:	f1 05       	cpc	r31, r1
 4ee:	10 f5       	brcc	.+68     	; 0x534 <play_song+0xe4>
 4f0:	ec 5c       	subi	r30, 0xCC	; 204
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__tablejump2__>
		{
			case 'c': current_note = 0; break;    // C (do)
 4f8:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <current_note>
 4fc:	1b c0       	rjmp	.+54     	; 0x534 <play_song+0xe4>
			case 'd': current_note = 2; break;    // D (re)
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
 504:	17 c0       	rjmp	.+46     	; 0x534 <play_song+0xe4>
			case 'e': current_note = 4; break;    // E (mi)
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
 50c:	13 c0       	rjmp	.+38     	; 0x534 <play_song+0xe4>
			case 'f': current_note = 5; break;    // F (fa)
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
 514:	0f c0       	rjmp	.+30     	; 0x534 <play_song+0xe4>
			case 'g': current_note = 7; break;    // G (sol)
 516:	87 e0       	ldi	r24, 0x07	; 7
 518:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
 51c:	0b c0       	rjmp	.+22     	; 0x534 <play_song+0xe4>
			case 'a': current_note = 9; break;    // A (la)
 51e:	89 e0       	ldi	r24, 0x09	; 9
 520:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
 524:	07 c0       	rjmp	.+14     	; 0x534 <play_song+0xe4>
			case 'b': current_note = 11; break;   // B (si)
 526:	8b e0       	ldi	r24, 0x0B	; 11
 528:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
 52c:	03 c0       	rjmp	.+6      	; 0x534 <play_song+0xe4>
			case 'p': current_note = 255; break;  // pausa
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <current_note>
		}
		song++;                     // Avanzo al pr?ximo caracter
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <song+0x1>
 53c:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <song>
		// Busco un '#' siguiendo la nota
		if (*song=='#')
 540:	29 81       	ldd	r18, Y+1	; 0x01
 542:	23 32       	cpi	r18, 0x23	; 35
 544:	51 f4       	brne	.+20     	; 0x55a <play_song+0x10a>
		{
			current_note++;   // Incremento la nota (A->A#, C->C#, D->D#, F->F#, G->G#)
 546:	20 91 f2 05 	lds	r18, 0x05F2	; 0x8005f2 <current_note>
 54a:	2f 5f       	subi	r18, 0xFF	; 255
 54c:	20 93 f2 05 	sts	0x05F2, r18	; 0x8005f2 <current_note>
			song++;                   // Avanzo al pr?ximo caracter
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <song+0x1>
 556:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <song>
		}

		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
 55a:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 55e:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 562:	80 81       	ld	r24, Z
 564:	8e 32       	cpi	r24, 0x2E	; 46
 566:	41 f4       	brne	.+16     	; 0x578 <play_song+0x128>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <dot_flag>
			song++;                   // Avanzo al pr?ximo caracter
 56e:	31 96       	adiw	r30, 0x01	; 1
 570:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 574:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
 578:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 57c:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 580:	80 81       	ld	r24, Z
 582:	80 33       	cpi	r24, 0x30	; 48
 584:	58 f0       	brcs	.+22     	; 0x59c <play_song+0x14c>
 586:	80 81       	ld	r24, Z
 588:	8a 33       	cpi	r24, 0x3A	; 58
 58a:	40 f4       	brcc	.+16     	; 0x59c <play_song+0x14c>
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
 58c:	81 91       	ld	r24, Z+
 58e:	80 53       	subi	r24, 0x30	; 48
 590:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <temp_octave>
			song++;                   // Avanzo al pr?ximo caracter
 594:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 598:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
 59c:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 5a0:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 5a4:	80 81       	ld	r24, Z
 5a6:	8e 32       	cpi	r24, 0x2E	; 46
 5a8:	71 f4       	brne	.+28     	; 0x5c6 <play_song+0x176>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <dot_flag>
			song++;                   // Avanzo al pr?ximo caracter
 5b0:	31 96       	adiw	r30, 0x01	; 1
 5b2:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 5b6:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <play_song+0x176>
		}
		while (*song == ',') song++;    // Salteo ','
 5bc:	31 96       	adiw	r30, 0x01	; 1
 5be:	f0 93 f4 05 	sts	0x05F4, r31	; 0x8005f4 <song+0x1>
 5c2:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <song>
 5c6:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <song>
 5ca:	f0 91 f4 05 	lds	r31, 0x05F4	; 0x8005f4 <song+0x1>
 5ce:	80 81       	ld	r24, Z
 5d0:	8c 32       	cpi	r24, 0x2C	; 44
 5d2:	a1 f3       	breq	.-24     	; 0x5bc <play_song+0x16c>
		// Calculo la duraci?n de la nota
		calc_duration = (60000/tempo)/(temp_duration);
 5d4:	20 91 f0 05 	lds	r18, 0x05F0	; 0x8005f0 <tempo>
 5d8:	30 91 f1 05 	lds	r19, 0x05F1	; 0x8005f1 <tempo+0x1>
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	60 e6       	ldi	r22, 0x60	; 96
 5e2:	7a ee       	ldi	r23, 0xEA	; 234
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divmodsi4>
 5ec:	ca 01       	movw	r24, r20
 5ee:	b9 01       	movw	r22, r18
 5f0:	00 91 f9 05 	lds	r16, 0x05F9	; 0x8005f9 <temp_duration>
 5f4:	20 2f       	mov	r18, r16
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divmodsi4>
 600:	30 93 fc 05 	sts	0x05FC, r19	; 0x8005fc <calc_duration+0x1>
 604:	20 93 fb 05 	sts	0x05FB, r18	; 0x8005fb <calc_duration>
		calc_duration *= 4;         // La nota completa tiene cuatro beats
 608:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <calc_duration>
 60c:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <calc_duration+0x1>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	90 93 fc 05 	sts	0x05FC, r25	; 0x8005fc <calc_duration+0x1>
 61c:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <calc_duration>
		// Chequeo si el flag de punto est? activado, de ser as?, extiendo la duraci?n en un 50%
		if (dot_flag) calc_duration = (calc_duration*3)/2;
 620:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <dot_flag>
 624:	88 23       	and	r24, r24
 626:	79 f0       	breq	.+30     	; 0x646 <play_song+0x1f6>
 628:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <calc_duration>
 62c:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <calc_duration+0x1>
 630:	9c 01       	movw	r18, r24
 632:	22 0f       	add	r18, r18
 634:	33 1f       	adc	r19, r19
 636:	82 0f       	add	r24, r18
 638:	93 1f       	adc	r25, r19
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	90 93 fc 05 	sts	0x05FC, r25	; 0x8005fc <calc_duration+0x1>
 642:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <calc_duration>
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funci?n sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
 646:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <current_note>
 64a:	8f 3f       	cpi	r24, 0xFF	; 255
 64c:	f1 f0       	breq	.+60     	; 0x68a <play_song+0x23a>
 64e:	60 91 fb 05 	lds	r22, 0x05FB	; 0x8005fb <calc_duration>
 652:	70 91 fc 05 	lds	r23, 0x05FC	; 0x8005fc <calc_duration+0x1>
 656:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <temp_octave>
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	04 97       	sbiw	r24, 0x04	; 4
 65e:	20 91 f2 05 	lds	r18, 0x05F2	; 0x8005f2 <current_note>
 662:	fc 01       	movw	r30, r24
 664:	ee 0f       	add	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	e8 0f       	add	r30, r24
 66a:	f9 1f       	adc	r31, r25
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	e2 0f       	add	r30, r18
 676:	f1 1d       	adc	r31, r1
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	e0 5f       	subi	r30, 0xF0	; 240
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	80 81       	ld	r24, Z
 682:	91 81       	ldd	r25, Z+1	; 0x01
 684:	0e 94 87 00 	call	0x10e	; 0x10e <sound>
 688:	0e c0       	rjmp	.+28     	; 0x6a6 <play_song+0x256>
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
 68a:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <calc_duration>
 68e:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <calc_duration+0x1>
 692:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <duration_timer+0x1>
 696:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <duration_timer>
			sound_playing = 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	90 93 ed 05 	sts	0x05ED, r25	; 0x8005ed <sound_playing+0x1>
 6a2:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <sound_playing>
		}
		while (sound_playing);      // Espero a la que nota/pausa en curso finalice
 6a6:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <sound_playing>
 6aa:	90 91 ed 05 	lds	r25, 0x05ED	; 0x8005ed <sound_playing+0x1>
 6ae:	89 2b       	or	r24, r25
 6b0:	d1 f7       	brne	.-12     	; 0x6a6 <play_song+0x256>
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <play_song+0x268>
	}
	else {
		song_playing = 0;
 6b4:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <song_playing>
	}
}
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	0f 91       	pop	r16
 6be:	08 95       	ret

000006c0 <sleep>:
 */ 

#include "functions.h"

void sleep(){
	set_sleep_mode(SLEEP_MODE_IDLE);
 6c0:	83 b7       	in	r24, 0x33	; 51
 6c2:	81 7f       	andi	r24, 0xF1	; 241
 6c4:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 6cc:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 6ce:	83 b7       	in	r24, 0x33	; 51
 6d0:	8e 7f       	andi	r24, 0xFE	; 254
 6d2:	83 bf       	out	0x33, r24	; 51
 6d4:	08 95       	ret

000006d6 <main>:
#include "functions/functions.h"

int main(void)
{
	// Configuracion de los TIMERs 0,1 para la reproduccion de audio
	TIMER0_Init();
 6d6:	0e 94 04 05 	call	0xa08	; 0xa08 <TIMER0_Init>
	TIMER1_Init();
 6da:	0e 94 0d 05 	call	0xa1a	; 0xa1a <TIMER1_Init>
	
	// Inicializacion de los buffers de recepcion y transmision de la UART
	UART_Buffer_Init();
 6de:	0e 94 1b 05 	call	0xa36	; 0xa36 <UART_Buffer_Init>
	
	// Inicializacion y configuracion del periferco UART para transmision serie
	SerialPort_Init(103);					// 9600 baudios para 16MHz
 6e2:	87 e6       	ldi	r24, 0x67	; 103
 6e4:	0e 94 a6 04 	call	0x94c	; 0x94c <SerialPort_Init>
	SerialPort_TX_Enable();					
 6e8:	0e 94 b0 04 	call	0x960	; 0x960 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 6ec:	0e 94 c2 04 	call	0x984	; 0x984 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 6f0:	0e 94 c8 04 	call	0x990	; 0x990 <SerialPort_RX_Interrupt_Enable>

	// Menu de inicio del sistema
	MENU_display_welcome();
 6f4:	0e 94 cc 03 	call	0x798	; 0x798 <MENU_display_welcome>
	
	// Activacion global de interrupciones
	sei();
 6f8:	78 94       	sei

	// Bucle principal (TAREAS EN FOREGROUND)
	while(1){
	
		// Tarea para la lectura de palabras del buffer de recepcion 
		if (UART_get_words_counter() > 0) {
 6fa:	0e 94 b9 05 	call	0xb72	; 0xb72 <UART_get_words_counter>
 6fe:	89 2b       	or	r24, r25
 700:	49 f0       	breq	.+18     	; 0x714 <main+0x3e>
			
			SerialPort_RX_Interrupt_Disable();
 702:	0e 94 ce 04 	call	0x99c	; 0x99c <SerialPort_RX_Interrupt_Disable>
			UART_dec_words_counter();			// Seccion critica
 706:	0e 94 be 05 	call	0xb7c	; 0xb7c <UART_dec_words_counter>
			SerialPort_RX_Interrupt_Enable();
 70a:	0e 94 c8 04 	call	0x990	; 0x990 <SerialPort_RX_Interrupt_Enable>

			MENU_process_inpt();
 70e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <MENU_process_inpt>
 712:	06 c0       	rjmp	.+12     	; 0x720 <main+0x4a>
		}
		// Tarea para la reproduccion de una nota de la cancions
		else if (get_song_playing() == 1){
 714:	0e 94 84 00 	call	0x108	; 0x108 <get_song_playing>
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	11 f4       	brne	.+4      	; 0x720 <main+0x4a>
			play_song();
 71c:	0e 94 28 02 	call	0x450	; 0x450 <play_song>
		}

		// Se duerme el CPU hasta la proxima interrupcion (IDLE_MODE)
		sleep();
 720:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sleep>

	}
 724:	ea cf       	rjmp	.-44     	; 0x6fa <main+0x24>

00000726 <MENU_display_songs>:
const char msjPlay[] = "    ==> PLAY: Reproduce la cancion seleccionada";
const char msjStop[] = "    ==> STOP: Detiene la reproduccion del sonido en curso";
const char msjNum[] = "    ==> NUM: Numero de cancion a seleccionar de la lista [1 a N]";
const char msjReset[] = "    ==> RESET: Reinicia el sistema al estado inicial\n";

void MENU_display_songs(void){
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
	UART_Write_String_To_Buffer(msjSongs);
 72e:	88 eb       	ldi	r24, 0xB8	; 184
 730:	95 e0       	ldi	r25, 0x05	; 5
 732:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>

	const char ** songs = AUDIO_get_songs_menu();
 736:	0e 94 63 00 	call	0xc6	; 0xc6 <AUDIO_get_songs_menu>
 73a:	8c 01       	movw	r16, r24
	for (int i = 0; i < CANT_SONGS; i++){
 73c:	c0 e0       	ldi	r28, 0x00	; 0
 73e:	d0 e0       	ldi	r29, 0x00	; 0
 740:	0e c0       	rjmp	.+28     	; 0x75e <MENU_display_songs+0x38>
		UART_Write_String_To_Buffer_No_NewLine("	");
 742:	82 e2       	ldi	r24, 0x22	; 34
 744:	94 e0       	ldi	r25, 0x04	; 4
 746:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Write_String_To_Buffer_No_NewLine>
		UART_Write_String_To_Buffer(songs[i]);
 74a:	fe 01       	movw	r30, r28
 74c:	ee 0f       	add	r30, r30
 74e:	ff 1f       	adc	r31, r31
 750:	e0 0f       	add	r30, r16
 752:	f1 1f       	adc	r31, r17
 754:	80 81       	ld	r24, Z
 756:	91 81       	ldd	r25, Z+1	; 0x01
 758:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>

void MENU_display_songs(void){
	UART_Write_String_To_Buffer(msjSongs);

	const char ** songs = AUDIO_get_songs_menu();
	for (int i = 0; i < CANT_SONGS; i++){
 75c:	21 96       	adiw	r28, 0x01	; 1
 75e:	c4 30       	cpi	r28, 0x04	; 4
 760:	d1 05       	cpc	r29, r1
 762:	7c f3       	brlt	.-34     	; 0x742 <MENU_display_songs+0x1c>
		UART_Write_String_To_Buffer_No_NewLine("	");
		UART_Write_String_To_Buffer(songs[i]);
	}
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <MENU_display_commands>:

void MENU_display_commands(){
	UART_Write_String_To_Buffer(msjCommands);
 76e:	8e ea       	ldi	r24, 0xAE	; 174
 770:	95 e0       	ldi	r25, 0x05	; 5
 772:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 776:	8e e7       	ldi	r24, 0x7E	; 126
 778:	95 e0       	ldi	r25, 0x05	; 5
 77a:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 77e:	84 e4       	ldi	r24, 0x44	; 68
 780:	95 e0       	ldi	r25, 0x05	; 5
 782:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 786:	83 e0       	ldi	r24, 0x03	; 3
 788:	95 e0       	ldi	r25, 0x05	; 5
 78a:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 78e:	8d ec       	ldi	r24, 0xCD	; 205
 790:	94 e0       	ldi	r25, 0x04	; 4
 792:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
 796:	08 95       	ret

00000798 <MENU_display_welcome>:
}

void MENU_display_welcome(){
	UART_Write_String_To_Buffer(msjBienvenida);
 798:	83 ec       	ldi	r24, 0xC3	; 195
 79a:	95 e0       	ldi	r25, 0x05	; 5
 79c:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	MENU_display_songs();
 7a0:	0e 94 93 03 	call	0x726	; 0x726 <MENU_display_songs>
	UART_Write_String_To_Buffer_No_NewLine("\n");
 7a4:	8b ec       	ldi	r24, 0xCB	; 203
 7a6:	94 e0       	ldi	r25, 0x04	; 4
 7a8:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Write_String_To_Buffer_No_NewLine>
	MENU_display_commands();
 7ac:	0e 94 b7 03 	call	0x76e	; 0x76e <MENU_display_commands>
 7b0:	08 95       	ret

000007b2 <create_substring>:

}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
 7b2:	cf 92       	push	r12
 7b4:	df 92       	push	r13
 7b6:	ef 92       	push	r14
 7b8:	ff 92       	push	r15
 7ba:	0f 93       	push	r16
 7bc:	1f 93       	push	r17
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	8c 01       	movw	r16, r24
 7c4:	7b 01       	movw	r14, r22
	uint16_t j = 0;
 7c6:	c0 e0       	ldi	r28, 0x00	; 0
 7c8:	d0 e0       	ldi	r29, 0x00	; 0

	while (buffer->data[buffer->index_lectura] != '\r') {
 7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <create_substring+0x2e>
		substring[j++] = buffer->data[buffer->index_lectura];
 7cc:	6e 01       	movw	r12, r28
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	c9 1a       	sub	r12, r25
 7d2:	d9 0a       	sbc	r13, r25
 7d4:	ce 0d       	add	r28, r14
 7d6:	df 1d       	adc	r29, r15
 7d8:	88 83       	st	Y, r24
		inc_RX_index_lectura();
 7da:	0e 94 2c 06 	call	0xc58	; 0xc58 <inc_RX_index_lectura>

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
	uint16_t j = 0;

	while (buffer->data[buffer->index_lectura] != '\r') {
		substring[j++] = buffer->data[buffer->index_lectura];
 7de:	e6 01       	movw	r28, r12
}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
	uint16_t j = 0;

	while (buffer->data[buffer->index_lectura] != '\r') {
 7e0:	f8 01       	movw	r30, r16
 7e2:	ee 5a       	subi	r30, 0xAE	; 174
 7e4:	ff 4f       	sbci	r31, 0xFF	; 255
 7e6:	01 90       	ld	r0, Z+
 7e8:	f0 81       	ld	r31, Z
 7ea:	e0 2d       	mov	r30, r0
 7ec:	e0 0f       	add	r30, r16
 7ee:	f1 1f       	adc	r31, r17
 7f0:	80 81       	ld	r24, Z
 7f2:	8d 30       	cpi	r24, 0x0D	; 13
 7f4:	59 f7       	brne	.-42     	; 0x7cc <create_substring+0x1a>
		substring[j++] = buffer->data[buffer->index_lectura];
		inc_RX_index_lectura();
	}
	inc_RX_index_lectura();
 7f6:	0e 94 2c 06 	call	0xc58	; 0xc58 <inc_RX_index_lectura>
	inc_RX_index_lectura();
 7fa:	0e 94 2c 06 	call	0xc58	; 0xc58 <inc_RX_index_lectura>
	substring[j] = '\0'; // append null character at the end
 7fe:	ce 0d       	add	r28, r14
 800:	df 1d       	adc	r29, r15
 802:	18 82       	st	Y, r1
}
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
 80a:	0f 91       	pop	r16
 80c:	ff 90       	pop	r15
 80e:	ef 90       	pop	r14
 810:	df 90       	pop	r13
 812:	cf 90       	pop	r12
 814:	08 95       	ret

00000816 <MENU_select_option>:


void MENU_select_option(char * inpt){
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	ec 01       	movw	r28, r24
	if (strcmp(inpt, "PLAY") == 0){
 81c:	64 e2       	ldi	r22, 0x24	; 36
 81e:	74 e0       	ldi	r23, 0x04	; 4
 820:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strcmp>
 824:	89 2b       	or	r24, r25
 826:	39 f4       	brne	.+14     	; 0x836 <MENU_select_option+0x20>
		start_song();
 828:	0e 94 b8 00 	call	0x170	; 0x170 <start_song>
		UART_Write_String_To_Buffer("Playing song\n");
 82c:	89 e2       	ldi	r24, 0x29	; 41
 82e:	94 e0       	ldi	r25, 0x04	; 4
 830:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
 834:	61 c0       	rjmp	.+194    	; 0x8f8 <MENU_select_option+0xe2>
		

	}
	else if (strncmp(inpt, "NUM", 3) == 0){
 836:	43 e0       	ldi	r20, 0x03	; 3
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	67 e3       	ldi	r22, 0x37	; 55
 83c:	74 e0       	ldi	r23, 0x04	; 4
 83e:	ce 01       	movw	r24, r28
 840:	0e 94 03 07 	call	0xe06	; 0xe06 <strncmp>
 844:	89 2b       	or	r24, r25
 846:	99 f5       	brne	.+102    	; 0x8ae <MENU_select_option+0x98>

		// Si el formato es "NUM X"
		if (inpt[3] == ' ' && inpt[5] == '\0') {
 848:	8b 81       	ldd	r24, Y+3	; 0x03
 84a:	80 32       	cpi	r24, 0x20	; 32
 84c:	59 f5       	brne	.+86     	; 0x8a4 <MENU_select_option+0x8e>
 84e:	8d 81       	ldd	r24, Y+5	; 0x05
 850:	81 11       	cpse	r24, r1
 852:	28 c0       	rjmp	.+80     	; 0x8a4 <MENU_select_option+0x8e>

			// value contiene el valor "X"
			uint8_t value = inpt[4] - '0';
 854:	cc 81       	ldd	r28, Y+4	; 0x04
 856:	c0 53       	subi	r28, 0x30	; 48

			if (value >= 0 && value < CANT_SONGS){
 858:	c4 30       	cpi	r28, 0x04	; 4
 85a:	c8 f4       	brcc	.+50     	; 0x88e <MENU_select_option+0x78>
				UART_Write_String_To_Buffer_No_NewLine("Song selected ");
 85c:	8b e3       	ldi	r24, 0x3B	; 59
 85e:	94 e0       	ldi	r25, 0x04	; 4
 860:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Write_String_To_Buffer_No_NewLine>
				const char ** songs = AUDIO_get_songs_menu();
 864:	0e 94 63 00 	call	0xc6	; 0xc6 <AUDIO_get_songs_menu>
				UART_Write_String_To_Buffer(songs[value]);
 868:	2c 2f       	mov	r18, r28
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	22 0f       	add	r18, r18
 86e:	33 1f       	adc	r19, r19
 870:	82 0f       	add	r24, r18
 872:	93 1f       	adc	r25, r19
 874:	fc 01       	movw	r30, r24
 876:	80 81       	ld	r24, Z
 878:	91 81       	ldd	r25, Z+1	; 0x01
 87a:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>

				set_song(value);
 87e:	8c 2f       	mov	r24, r28
 880:	0e 94 66 00 	call	0xcc	; 0xcc <set_song>
				UART_Write_String_To_Buffer("\n");
 884:	8b ec       	ldi	r24, 0xCB	; 203
 886:	94 e0       	ldi	r25, 0x04	; 4
 888:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
 88c:	35 c0       	rjmp	.+106    	; 0x8f8 <MENU_select_option+0xe2>

			}
			else{
				UART_Write_String_To_Buffer("Ingrese un numero adecuado");
 88e:	8a e4       	ldi	r24, 0x4A	; 74
 890:	94 e0       	ldi	r25, 0x04	; 4
 892:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
				MENU_display_songs();
 896:	0e 94 93 03 	call	0x726	; 0x726 <MENU_display_songs>
				UART_Write_String_To_Buffer("\n");
 89a:	8b ec       	ldi	r24, 0xCB	; 203
 89c:	94 e0       	ldi	r25, 0x04	; 4
 89e:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
 8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <MENU_select_option+0xe2>
			}
		}
		else {
			// Si el formato no es "NUM X"
			UART_Write_String_To_Buffer("Command usage: NUM [number of song]\n");
 8a4:	85 e6       	ldi	r24, 0x65	; 101
 8a6:	94 e0       	ldi	r25, 0x04	; 4
 8a8:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
 8ac:	25 c0       	rjmp	.+74     	; 0x8f8 <MENU_select_option+0xe2>
		}
	}
	else if (strcmp(inpt, "STOP") == 0){
 8ae:	6a e8       	ldi	r22, 0x8A	; 138
 8b0:	74 e0       	ldi	r23, 0x04	; 4
 8b2:	ce 01       	movw	r24, r28
 8b4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strcmp>
 8b8:	89 2b       	or	r24, r25
 8ba:	39 f4       	brne	.+14     	; 0x8ca <MENU_select_option+0xb4>

		stop_song();
 8bc:	0e 94 ac 00 	call	0x158	; 0x158 <stop_song>
		UART_Write_String_To_Buffer("Stopped song\n");
 8c0:	8f e8       	ldi	r24, 0x8F	; 143
 8c2:	94 e0       	ldi	r25, 0x04	; 4
 8c4:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
 8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <MENU_select_option+0xe2>

	}
	else if (strcmp(inpt, "RESET") == 0){
 8ca:	6d e9       	ldi	r22, 0x9D	; 157
 8cc:	74 e0       	ldi	r23, 0x04	; 4
 8ce:	ce 01       	movw	r24, r28
 8d0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strcmp>
 8d4:	89 2b       	or	r24, r25
 8d6:	61 f4       	brne	.+24     	; 0x8f0 <MENU_select_option+0xda>
		UART_Write_String_To_Buffer("RESETTING system\n");
 8d8:	83 ea       	ldi	r24, 0xA3	; 163
 8da:	94 e0       	ldi	r25, 0x04	; 4
 8dc:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
		stop_song();
 8e0:	0e 94 ac 00 	call	0x158	; 0x158 <stop_song>
		set_song(0);
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 66 00 	call	0xcc	; 0xcc <set_song>
		Buffer_Init();
		sei();
		UART_Write_String_To_Buffer("RESETTING system\n");
		*/
		// Reimprime el menu
		MENU_display_commands();
 8ea:	0e 94 b7 03 	call	0x76e	; 0x76e <MENU_display_commands>
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <MENU_select_option+0xe2>

	}
	else{
		UART_Write_String_To_Buffer("Comando no encontrado\r\n");
 8f0:	85 eb       	ldi	r24, 0xB5	; 181
 8f2:	94 e0       	ldi	r25, 0x04	; 4
 8f4:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	}
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

000008fe <MENU_process_inpt>:

void MENU_process_inpt(){
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	c0 55       	subi	r28, 0x50	; 80
 908:	d1 09       	sbc	r29, r1
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
	uint8_t substring[BUFFER_RX_LEN];

	create_substring(get_RX_data(), substring);
 914:	0e 94 c8 05 	call	0xb90	; 0xb90 <get_RX_data>
 918:	be 01       	movw	r22, r28
 91a:	6f 5f       	subi	r22, 0xFF	; 255
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <create_substring>
	UART_Write_String_To_Buffer(substring);
 922:	ce 01       	movw	r24, r28
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	0e 94 65 05 	call	0xaca	; 0xaca <UART_Write_String_To_Buffer>
	if (strcmp(substring, "")){
 92a:	89 81       	ldd	r24, Y+1	; 0x01
 92c:	88 23       	and	r24, r24
 92e:	21 f0       	breq	.+8      	; 0x938 <__stack+0x39>
		MENU_select_option(substring);
 930:	ce 01       	movw	r24, r28
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	0e 94 0b 04 	call	0x816	; 0x816 <MENU_select_option>
	}
}
 938:	c0 5b       	subi	r28, 0xB0	; 176
 93a:	df 4f       	sbci	r29, 0xFF	; 255
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	f8 94       	cli
 940:	de bf       	out	0x3e, r29	; 62
 942:	0f be       	out	0x3f, r0	; 63
 944:	cd bf       	out	0x3d, r28	; 61
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	08 95       	ret

0000094c <SerialPort_Init>:
// Inicializaci�n de Puerto Serie

void SerialPort_Init(uint8_t config){
	// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
	// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
	UCSR0B = 0;
 94c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 950:	96 e0       	ldi	r25, 0x06	; 6
 952:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = (unsigned char)(config>>8);
 956:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)config;
 95a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 95e:	08 95       	ret

00000960 <SerialPort_TX_Enable>:


// Inicializaci�n de Transmisor

void SerialPort_TX_Enable(void){
	UCSR0B |= (1<<TXEN0);
 960:	e1 ec       	ldi	r30, 0xC1	; 193
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	88 60       	ori	r24, 0x08	; 8
 968:	80 83       	st	Z, r24
 96a:	08 95       	ret

0000096c <SerialPort_TX_Interrupt_Enable>:
}

void SerialPort_TX_Interrupt_Enable(void){
	UCSR0B |= (1<<UDRIE0);
 96c:	e1 ec       	ldi	r30, 0xC1	; 193
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 81       	ld	r24, Z
 972:	80 62       	ori	r24, 0x20	; 32
 974:	80 83       	st	Z, r24
 976:	08 95       	ret

00000978 <SerialPort_TX_Interrupt_Disable>:
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 978:	e1 ec       	ldi	r30, 0xC1	; 193
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	8f 7d       	andi	r24, 0xDF	; 223
 980:	80 83       	st	Z, r24
 982:	08 95       	ret

00000984 <SerialPort_RX_Enable>:


// Inicializaci�n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 984:	e1 ec       	ldi	r30, 0xC1	; 193
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	80 81       	ld	r24, Z
 98a:	80 61       	ori	r24, 0x10	; 16
 98c:	80 83       	st	Z, r24
 98e:	08 95       	ret

00000990 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 990:	e1 ec       	ldi	r30, 0xC1	; 193
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	80 68       	ori	r24, 0x80	; 128
 998:	80 83       	st	Z, r24
 99a:	08 95       	ret

0000099c <SerialPort_RX_Interrupt_Disable>:
}

void SerialPort_RX_Interrupt_Disable(void){
	UCSR0B &=~(1<<RXCIE0);
 99c:	e1 ec       	ldi	r30, 0xC1	; 193
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	8f 77       	andi	r24, 0x7F	; 127
 9a4:	80 83       	st	Z, r24
 9a6:	08 95       	ret

000009a8 <__vector_14>:

#include "TIMER0.h"

// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
 9a8:	1f 92       	push	r1
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	0f 92       	push	r0
 9b0:	11 24       	eor	r1, r1
 9b2:	2f 93       	push	r18
 9b4:	3f 93       	push	r19
 9b6:	4f 93       	push	r20
 9b8:	5f 93       	push	r21
 9ba:	6f 93       	push	r22
 9bc:	7f 93       	push	r23
 9be:	8f 93       	push	r24
 9c0:	9f 93       	push	r25
 9c2:	af 93       	push	r26
 9c4:	bf 93       	push	r27
 9c6:	ef 93       	push	r30
 9c8:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
 9ca:	0e 94 7f 00 	call	0xfe	; 0xfe <get_duration_timer>
	if (duration_timer) {
 9ce:	00 97       	sbiw	r24, 0x00	; 0
 9d0:	21 f0       	breq	.+8      	; 0x9da <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
 9d2:	01 97       	sbiw	r24, 0x01	; 1
 9d4:	0e 94 75 00 	call	0xea	; 0xea <set_duration_timer>
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
 9da:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 7a 00 	call	0xf4	; 0xf4 <set_sound_playing>
	}
}
 9e6:	ff 91       	pop	r31
 9e8:	ef 91       	pop	r30
 9ea:	bf 91       	pop	r27
 9ec:	af 91       	pop	r26
 9ee:	9f 91       	pop	r25
 9f0:	8f 91       	pop	r24
 9f2:	7f 91       	pop	r23
 9f4:	6f 91       	pop	r22
 9f6:	5f 91       	pop	r21
 9f8:	4f 91       	pop	r20
 9fa:	3f 91       	pop	r19
 9fc:	2f 91       	pop	r18
 9fe:	0f 90       	pop	r0
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	0f 90       	pop	r0
 a04:	1f 90       	pop	r1
 a06:	18 95       	reti

00000a08 <TIMER0_Init>:

void TIMER0_Init(){
	// Configuro una interrupci?n cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
 a08:	88 ef       	ldi	r24, 0xF8	; 248
 a0a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 a10:	93 e0       	ldi	r25, 0x03	; 3
 a12:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci?n de comparaci?n
 a14:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 a18:	08 95       	ret

00000a1a <TIMER1_Init>:

#include "TIMER1.h"

void TIMER1_Init(){
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
 a1a:	e0 e8       	ldi	r30, 0x80	; 128
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	80 81       	ld	r24, Z
 a20:	80 64       	ori	r24, 0x40	; 64
 a22:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 a24:	e1 e8       	ldi	r30, 0x81	; 129
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	89 60       	ori	r24, 0x09	; 9
 a2c:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB ser? el pin de salida
 a2e:	84 b1       	in	r24, 0x04	; 4
 a30:	82 60       	ori	r24, 0x02	; 2
 a32:	84 b9       	out	0x04, r24	; 4
 a34:	08 95       	ret

00000a36 <UART_Buffer_Init>:
	RX_buffer.index_lectura = (RX_buffer.index_lectura+1)%BUFFER_RX_LEN;
}

void inc_TX_index_escritura (void)
{
	TX_buffer.index_escritura = (TX_buffer.index_escritura+1)%BUFFER_TX_LEN;
 a36:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <TX_buffer+0x1f5>
 a3a:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <TX_buffer+0x1f4>
 a3e:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <TX_buffer+0x1f7>
 a42:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <TX_buffer+0x1f6>
 a46:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <RX_buffer+0x51>
 a4a:	10 92 46 08 	sts	0x0846, r1	; 0x800846 <RX_buffer+0x50>
 a4e:	10 92 49 08 	sts	0x0849, r1	; 0x800849 <RX_buffer+0x53>
 a52:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <RX_buffer+0x52>
 a56:	08 95       	ret

00000a58 <UART_Write_Char_To_Buffer>:
 a58:	cf 93       	push	r28
 a5a:	c8 2f       	mov	r28, r24
 a5c:	40 91 f2 07 	lds	r20, 0x07F2	; 0x8007f2 <TX_buffer+0x1f4>
 a60:	50 91 f3 07 	lds	r21, 0x07F3	; 0x8007f3 <TX_buffer+0x1f5>
 a64:	fa 01       	movw	r30, r20
 a66:	31 96       	adiw	r30, 0x01	; 1
 a68:	9f 01       	movw	r18, r30
 a6a:	36 95       	lsr	r19
 a6c:	27 95       	ror	r18
 a6e:	36 95       	lsr	r19
 a70:	27 95       	ror	r18
 a72:	a5 ec       	ldi	r26, 0xC5	; 197
 a74:	b0 e2       	ldi	r27, 0x20	; 32
 a76:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 a7a:	92 95       	swap	r25
 a7c:	82 95       	swap	r24
 a7e:	8f 70       	andi	r24, 0x0F	; 15
 a80:	89 27       	eor	r24, r25
 a82:	9f 70       	andi	r25, 0x0F	; 15
 a84:	89 27       	eor	r24, r25
 a86:	64 ef       	ldi	r22, 0xF4	; 244
 a88:	71 e0       	ldi	r23, 0x01	; 1
 a8a:	86 9f       	mul	r24, r22
 a8c:	90 01       	movw	r18, r0
 a8e:	87 9f       	mul	r24, r23
 a90:	30 0d       	add	r19, r0
 a92:	96 9f       	mul	r25, r22
 a94:	30 0d       	add	r19, r0
 a96:	11 24       	eor	r1, r1
 a98:	cf 01       	movw	r24, r30
 a9a:	82 1b       	sub	r24, r18
 a9c:	93 0b       	sbc	r25, r19
 a9e:	20 91 f4 07 	lds	r18, 0x07F4	; 0x8007f4 <TX_buffer+0x1f6>
 aa2:	30 91 f5 07 	lds	r19, 0x07F5	; 0x8007f5 <TX_buffer+0x1f7>
 aa6:	82 17       	cp	r24, r18
 aa8:	93 07       	cpc	r25, r19
 aaa:	61 f0       	breq	.+24     	; 0xac4 <UART_Write_Char_To_Buffer+0x6c>
 aac:	fa 01       	movw	r30, r20
 aae:	e2 50       	subi	r30, 0x02	; 2
 ab0:	fa 4f       	sbci	r31, 0xFA	; 250
 ab2:	c0 83       	st	Z, r28
 ab4:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <TX_buffer+0x1f5>
 ab8:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <TX_buffer+0x1f4>
 abc:	0e 94 b6 04 	call	0x96c	; 0x96c <SerialPort_TX_Interrupt_Enable>
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <UART_Write_Char_To_Buffer+0x6e>
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	cf 91       	pop	r28
 ac8:	08 95       	ret

00000aca <UART_Write_String_To_Buffer>:
 aca:	0f 93       	push	r16
 acc:	1f 93       	push	r17
 ace:	cf 93       	push	r28
 ad0:	8c 01       	movw	r16, r24
 ad2:	c0 e0       	ldi	r28, 0x00	; 0
 ad4:	03 c0       	rjmp	.+6      	; 0xadc <UART_Write_String_To_Buffer+0x12>
 ad6:	0e 94 2c 05 	call	0xa58	; 0xa58 <UART_Write_Char_To_Buffer>
 ada:	cf 5f       	subi	r28, 0xFF	; 255
 adc:	f8 01       	movw	r30, r16
 ade:	ec 0f       	add	r30, r28
 ae0:	f1 1d       	adc	r31, r1
 ae2:	80 81       	ld	r24, Z
 ae4:	81 11       	cpse	r24, r1
 ae6:	f7 cf       	rjmp	.-18     	; 0xad6 <UART_Write_String_To_Buffer+0xc>
 ae8:	8d e0       	ldi	r24, 0x0D	; 13
 aea:	0e 94 2c 05 	call	0xa58	; 0xa58 <UART_Write_Char_To_Buffer>
 aee:	8a e0       	ldi	r24, 0x0A	; 10
 af0:	0e 94 2c 05 	call	0xa58	; 0xa58 <UART_Write_Char_To_Buffer>
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	08 95       	ret

00000afc <UART_Write_String_To_Buffer_No_NewLine>:
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	8c 01       	movw	r16, r24
 b04:	c0 e0       	ldi	r28, 0x00	; 0
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <UART_Write_String_To_Buffer_No_NewLine+0x12>
 b08:	0e 94 2c 05 	call	0xa58	; 0xa58 <UART_Write_Char_To_Buffer>
 b0c:	cf 5f       	subi	r28, 0xFF	; 255
 b0e:	f8 01       	movw	r30, r16
 b10:	ec 0f       	add	r30, r28
 b12:	f1 1d       	adc	r31, r1
 b14:	80 81       	ld	r24, Z
 b16:	81 11       	cpse	r24, r1
 b18:	f7 cf       	rjmp	.-18     	; 0xb08 <UART_Write_String_To_Buffer_No_NewLine+0xc>
 b1a:	cf 91       	pop	r28
 b1c:	1f 91       	pop	r17
 b1e:	0f 91       	pop	r16
 b20:	08 95       	ret

00000b22 <TX_buffer_is_full>:
 b22:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <TX_buffer+0x1f6>
 b26:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <TX_buffer+0x1f7>
 b2a:	e0 91 f2 07 	lds	r30, 0x07F2	; 0x8007f2 <TX_buffer+0x1f4>
 b2e:	f0 91 f3 07 	lds	r31, 0x07F3	; 0x8007f3 <TX_buffer+0x1f5>
 b32:	9a 01       	movw	r18, r20
 b34:	36 95       	lsr	r19
 b36:	27 95       	ror	r18
 b38:	36 95       	lsr	r19
 b3a:	27 95       	ror	r18
 b3c:	a5 ec       	ldi	r26, 0xC5	; 197
 b3e:	b0 e2       	ldi	r27, 0x20	; 32
 b40:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 b44:	92 95       	swap	r25
 b46:	82 95       	swap	r24
 b48:	8f 70       	andi	r24, 0x0F	; 15
 b4a:	89 27       	eor	r24, r25
 b4c:	9f 70       	andi	r25, 0x0F	; 15
 b4e:	89 27       	eor	r24, r25
 b50:	64 ef       	ldi	r22, 0xF4	; 244
 b52:	71 e0       	ldi	r23, 0x01	; 1
 b54:	86 9f       	mul	r24, r22
 b56:	90 01       	movw	r18, r0
 b58:	87 9f       	mul	r24, r23
 b5a:	30 0d       	add	r19, r0
 b5c:	96 9f       	mul	r25, r22
 b5e:	30 0d       	add	r19, r0
 b60:	11 24       	eor	r1, r1
 b62:	42 1b       	sub	r20, r18
 b64:	53 0b       	sbc	r21, r19
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	4e 17       	cp	r20, r30
 b6a:	5f 07       	cpc	r21, r31
 b6c:	09 f0       	breq	.+2      	; 0xb70 <TX_buffer_is_full+0x4e>
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	08 95       	ret

00000b72 <UART_get_words_counter>:
 b72:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <words_counter>
 b76:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <words_counter+0x1>
 b7a:	08 95       	ret

00000b7c <UART_dec_words_counter>:
 b7c:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <words_counter>
 b80:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <words_counter+0x1>
 b84:	01 97       	sbiw	r24, 0x01	; 1
 b86:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <words_counter+0x1>
 b8a:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <words_counter>
 b8e:	08 95       	ret

00000b90 <get_RX_data>:
 b90:	86 ef       	ldi	r24, 0xF6	; 246
 b92:	97 e0       	ldi	r25, 0x07	; 7
 b94:	08 95       	ret

00000b96 <set_RX_data_UDR0>:
 b96:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <RX_buffer+0x50>
 b9a:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <RX_buffer+0x51>
 b9e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 ba2:	ea 50       	subi	r30, 0x0A	; 10
 ba4:	f8 4f       	sbci	r31, 0xF8	; 248
 ba6:	80 83       	st	Z, r24
 ba8:	08 95       	ret

00000baa <inc_RX_index_escritura>:
 baa:	e6 e4       	ldi	r30, 0x46	; 70
 bac:	f8 e0       	ldi	r31, 0x08	; 8
 bae:	40 81       	ld	r20, Z
 bb0:	51 81       	ldd	r21, Z+1	; 0x01
 bb2:	4f 5f       	subi	r20, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255
 bb6:	9a 01       	movw	r18, r20
 bb8:	ad ec       	ldi	r26, 0xCD	; 205
 bba:	bc ec       	ldi	r27, 0xCC	; 204
 bbc:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 bc0:	00 24       	eor	r0, r0
 bc2:	88 0f       	add	r24, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	00 1c       	adc	r0, r0
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	00 1c       	adc	r0, r0
 bce:	89 2f       	mov	r24, r25
 bd0:	90 2d       	mov	r25, r0
 bd2:	60 e5       	ldi	r22, 0x50	; 80
 bd4:	68 9f       	mul	r22, r24
 bd6:	90 01       	movw	r18, r0
 bd8:	69 9f       	mul	r22, r25
 bda:	30 0d       	add	r19, r0
 bdc:	11 24       	eor	r1, r1
 bde:	42 1b       	sub	r20, r18
 be0:	53 0b       	sbc	r21, r19
 be2:	51 83       	std	Z+1, r21	; 0x01
 be4:	40 83       	st	Z, r20
 be6:	08 95       	ret

00000be8 <__vector_18>:
 be8:	1f 92       	push	r1
 bea:	0f 92       	push	r0
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	0f 92       	push	r0
 bf0:	11 24       	eor	r1, r1
 bf2:	2f 93       	push	r18
 bf4:	3f 93       	push	r19
 bf6:	4f 93       	push	r20
 bf8:	5f 93       	push	r21
 bfa:	6f 93       	push	r22
 bfc:	7f 93       	push	r23
 bfe:	8f 93       	push	r24
 c00:	9f 93       	push	r25
 c02:	af 93       	push	r26
 c04:	bf 93       	push	r27
 c06:	ef 93       	push	r30
 c08:	ff 93       	push	r31
 c0a:	0e 94 cb 05 	call	0xb96	; 0xb96 <set_RX_data_UDR0>
 c0e:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <RX_buffer+0x50>
 c12:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <RX_buffer+0x51>
 c16:	ea 50       	subi	r30, 0x0A	; 10
 c18:	f8 4f       	sbci	r31, 0xF8	; 248
 c1a:	80 81       	ld	r24, Z
 c1c:	8a 30       	cpi	r24, 0x0A	; 10
 c1e:	49 f4       	brne	.+18     	; 0xc32 <__vector_18+0x4a>
 c20:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <words_counter>
 c24:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <words_counter+0x1>
 c28:	01 96       	adiw	r24, 0x01	; 1
 c2a:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <words_counter+0x1>
 c2e:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <words_counter>
 c32:	0e 94 d5 05 	call	0xbaa	; 0xbaa <inc_RX_index_escritura>
 c36:	ff 91       	pop	r31
 c38:	ef 91       	pop	r30
 c3a:	bf 91       	pop	r27
 c3c:	af 91       	pop	r26
 c3e:	9f 91       	pop	r25
 c40:	8f 91       	pop	r24
 c42:	7f 91       	pop	r23
 c44:	6f 91       	pop	r22
 c46:	5f 91       	pop	r21
 c48:	4f 91       	pop	r20
 c4a:	3f 91       	pop	r19
 c4c:	2f 91       	pop	r18
 c4e:	0f 90       	pop	r0
 c50:	0f be       	out	0x3f, r0	; 63
 c52:	0f 90       	pop	r0
 c54:	1f 90       	pop	r1
 c56:	18 95       	reti

00000c58 <inc_RX_index_lectura>:
 c58:	e8 e4       	ldi	r30, 0x48	; 72
 c5a:	f8 e0       	ldi	r31, 0x08	; 8
 c5c:	40 81       	ld	r20, Z
 c5e:	51 81       	ldd	r21, Z+1	; 0x01
 c60:	4f 5f       	subi	r20, 0xFF	; 255
 c62:	5f 4f       	sbci	r21, 0xFF	; 255
 c64:	9a 01       	movw	r18, r20
 c66:	ad ec       	ldi	r26, 0xCD	; 205
 c68:	bc ec       	ldi	r27, 0xCC	; 204
 c6a:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 c6e:	00 24       	eor	r0, r0
 c70:	88 0f       	add	r24, r24
 c72:	99 1f       	adc	r25, r25
 c74:	00 1c       	adc	r0, r0
 c76:	88 0f       	add	r24, r24
 c78:	99 1f       	adc	r25, r25
 c7a:	00 1c       	adc	r0, r0
 c7c:	89 2f       	mov	r24, r25
 c7e:	90 2d       	mov	r25, r0
 c80:	60 e5       	ldi	r22, 0x50	; 80
 c82:	68 9f       	mul	r22, r24
 c84:	90 01       	movw	r18, r0
 c86:	69 9f       	mul	r22, r25
 c88:	30 0d       	add	r19, r0
 c8a:	11 24       	eor	r1, r1
 c8c:	42 1b       	sub	r20, r18
 c8e:	53 0b       	sbc	r21, r19
 c90:	51 83       	std	Z+1, r21	; 0x01
 c92:	40 83       	st	Z, r20
 c94:	08 95       	ret

00000c96 <inc_TX_index_lectura>:
}

void inc_TX_index_lectura (void)
{
	TX_buffer.index_lectura = (TX_buffer.index_lectura+1)%BUFFER_TX_LEN;
 c96:	e4 ef       	ldi	r30, 0xF4	; 244
 c98:	f7 e0       	ldi	r31, 0x07	; 7
 c9a:	40 81       	ld	r20, Z
 c9c:	51 81       	ldd	r21, Z+1	; 0x01
 c9e:	4f 5f       	subi	r20, 0xFF	; 255
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255
 ca2:	9a 01       	movw	r18, r20
 ca4:	36 95       	lsr	r19
 ca6:	27 95       	ror	r18
 ca8:	36 95       	lsr	r19
 caa:	27 95       	ror	r18
 cac:	a5 ec       	ldi	r26, 0xC5	; 197
 cae:	b0 e2       	ldi	r27, 0x20	; 32
 cb0:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 cb4:	92 95       	swap	r25
 cb6:	82 95       	swap	r24
 cb8:	8f 70       	andi	r24, 0x0F	; 15
 cba:	89 27       	eor	r24, r25
 cbc:	9f 70       	andi	r25, 0x0F	; 15
 cbe:	89 27       	eor	r24, r25
 cc0:	64 ef       	ldi	r22, 0xF4	; 244
 cc2:	71 e0       	ldi	r23, 0x01	; 1
 cc4:	86 9f       	mul	r24, r22
 cc6:	90 01       	movw	r18, r0
 cc8:	87 9f       	mul	r24, r23
 cca:	30 0d       	add	r19, r0
 ccc:	96 9f       	mul	r25, r22
 cce:	30 0d       	add	r19, r0
 cd0:	11 24       	eor	r1, r1
 cd2:	42 1b       	sub	r20, r18
 cd4:	53 0b       	sbc	r21, r19
 cd6:	51 83       	std	Z+1, r21	; 0x01
 cd8:	40 83       	st	Z, r20
 cda:	08 95       	ret

00000cdc <__vector_19>:
}

// @brief	Handler de interrupcion para la recepcion UART. Interrumpe cuando hay un dato en UDR0
// @param	
// @return	
ISR(USART_UDRE_vect){
 cdc:	1f 92       	push	r1
 cde:	0f 92       	push	r0
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	0f 92       	push	r0
 ce4:	11 24       	eor	r1, r1
 ce6:	2f 93       	push	r18
 ce8:	3f 93       	push	r19
 cea:	4f 93       	push	r20
 cec:	5f 93       	push	r21
 cee:	6f 93       	push	r22
 cf0:	7f 93       	push	r23
 cf2:	8f 93       	push	r24
 cf4:	9f 93       	push	r25
 cf6:	af 93       	push	r26
 cf8:	bf 93       	push	r27
 cfa:	ef 93       	push	r30
 cfc:	ff 93       	push	r31
	if(TX_buffer_is_full() == 1){
 cfe:	0e 94 91 05 	call	0xb22	; 0xb22 <TX_buffer_is_full>
 d02:	81 30       	cpi	r24, 0x01	; 1
 d04:	29 f4       	brne	.+10     	; 0xd10 <__vector_19+0x34>
		SerialPort_TX_Interrupt_Disable();
 d06:	0e 94 bc 04 	call	0x978	; 0x978 <SerialPort_TX_Interrupt_Disable>
		SerialPort_RX_Interrupt_Enable();
 d0a:	0e 94 c8 04 	call	0x990	; 0x990 <SerialPort_RX_Interrupt_Enable>
 d0e:	0b c0       	rjmp	.+22     	; 0xd26 <__vector_19+0x4a>
	}
	// Se escribe en el buffer y se avanza en el indice de lectura
	else{
		if (TX_buffer.data[TX_buffer.index_lectura] != '/0') {	
			UDR0 = TX_buffer.data[TX_buffer.index_lectura];
 d10:	e0 91 f4 07 	lds	r30, 0x07F4	; 0x8007f4 <TX_buffer+0x1f6>
 d14:	f0 91 f5 07 	lds	r31, 0x07F5	; 0x8007f5 <TX_buffer+0x1f7>
 d18:	e2 50       	subi	r30, 0x02	; 2
 d1a:	fa 4f       	sbci	r31, 0xFA	; 250
 d1c:	80 81       	ld	r24, Z
 d1e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		}
		inc_TX_index_lectura();
 d22:	0e 94 4b 06 	call	0xc96	; 0xc96 <inc_TX_index_lectura>
	}
}
 d26:	ff 91       	pop	r31
 d28:	ef 91       	pop	r30
 d2a:	bf 91       	pop	r27
 d2c:	af 91       	pop	r26
 d2e:	9f 91       	pop	r25
 d30:	8f 91       	pop	r24
 d32:	7f 91       	pop	r23
 d34:	6f 91       	pop	r22
 d36:	5f 91       	pop	r21
 d38:	4f 91       	pop	r20
 d3a:	3f 91       	pop	r19
 d3c:	2f 91       	pop	r18
 d3e:	0f 90       	pop	r0
 d40:	0f be       	out	0x3f, r0	; 63
 d42:	0f 90       	pop	r0
 d44:	1f 90       	pop	r1
 d46:	18 95       	reti

00000d48 <__divmodsi4>:
 d48:	05 2e       	mov	r0, r21
 d4a:	97 fb       	bst	r25, 7
 d4c:	1e f4       	brtc	.+6      	; 0xd54 <__divmodsi4+0xc>
 d4e:	00 94       	com	r0
 d50:	0e 94 bb 06 	call	0xd76	; 0xd76 <__negsi2>
 d54:	57 fd       	sbrc	r21, 7
 d56:	07 d0       	rcall	.+14     	; 0xd66 <__divmodsi4_neg2>
 d58:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__udivmodsi4>
 d5c:	07 fc       	sbrc	r0, 7
 d5e:	03 d0       	rcall	.+6      	; 0xd66 <__divmodsi4_neg2>
 d60:	4e f4       	brtc	.+18     	; 0xd74 <__divmodsi4_exit>
 d62:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__negsi2>

00000d66 <__divmodsi4_neg2>:
 d66:	50 95       	com	r21
 d68:	40 95       	com	r20
 d6a:	30 95       	com	r19
 d6c:	21 95       	neg	r18
 d6e:	3f 4f       	sbci	r19, 0xFF	; 255
 d70:	4f 4f       	sbci	r20, 0xFF	; 255
 d72:	5f 4f       	sbci	r21, 0xFF	; 255

00000d74 <__divmodsi4_exit>:
 d74:	08 95       	ret

00000d76 <__negsi2>:
 d76:	90 95       	com	r25
 d78:	80 95       	com	r24
 d7a:	70 95       	com	r23
 d7c:	61 95       	neg	r22
 d7e:	7f 4f       	sbci	r23, 0xFF	; 255
 d80:	8f 4f       	sbci	r24, 0xFF	; 255
 d82:	9f 4f       	sbci	r25, 0xFF	; 255
 d84:	08 95       	ret

00000d86 <__tablejump2__>:
 d86:	ee 0f       	add	r30, r30
 d88:	ff 1f       	adc	r31, r31
 d8a:	05 90       	lpm	r0, Z+
 d8c:	f4 91       	lpm	r31, Z
 d8e:	e0 2d       	mov	r30, r0
 d90:	09 94       	ijmp

00000d92 <__umulhisi3>:
 d92:	a2 9f       	mul	r26, r18
 d94:	b0 01       	movw	r22, r0
 d96:	b3 9f       	mul	r27, r19
 d98:	c0 01       	movw	r24, r0
 d9a:	a3 9f       	mul	r26, r19
 d9c:	70 0d       	add	r23, r0
 d9e:	81 1d       	adc	r24, r1
 da0:	11 24       	eor	r1, r1
 da2:	91 1d       	adc	r25, r1
 da4:	b2 9f       	mul	r27, r18
 da6:	70 0d       	add	r23, r0
 da8:	81 1d       	adc	r24, r1
 daa:	11 24       	eor	r1, r1
 dac:	91 1d       	adc	r25, r1
 dae:	08 95       	ret

00000db0 <__udivmodsi4>:
 db0:	a1 e2       	ldi	r26, 0x21	; 33
 db2:	1a 2e       	mov	r1, r26
 db4:	aa 1b       	sub	r26, r26
 db6:	bb 1b       	sub	r27, r27
 db8:	fd 01       	movw	r30, r26
 dba:	0d c0       	rjmp	.+26     	; 0xdd6 <__udivmodsi4_ep>

00000dbc <__udivmodsi4_loop>:
 dbc:	aa 1f       	adc	r26, r26
 dbe:	bb 1f       	adc	r27, r27
 dc0:	ee 1f       	adc	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	a2 17       	cp	r26, r18
 dc6:	b3 07       	cpc	r27, r19
 dc8:	e4 07       	cpc	r30, r20
 dca:	f5 07       	cpc	r31, r21
 dcc:	20 f0       	brcs	.+8      	; 0xdd6 <__udivmodsi4_ep>
 dce:	a2 1b       	sub	r26, r18
 dd0:	b3 0b       	sbc	r27, r19
 dd2:	e4 0b       	sbc	r30, r20
 dd4:	f5 0b       	sbc	r31, r21

00000dd6 <__udivmodsi4_ep>:
 dd6:	66 1f       	adc	r22, r22
 dd8:	77 1f       	adc	r23, r23
 dda:	88 1f       	adc	r24, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	1a 94       	dec	r1
 de0:	69 f7       	brne	.-38     	; 0xdbc <__udivmodsi4_loop>
 de2:	60 95       	com	r22
 de4:	70 95       	com	r23
 de6:	80 95       	com	r24
 de8:	90 95       	com	r25
 dea:	9b 01       	movw	r18, r22
 dec:	ac 01       	movw	r20, r24
 dee:	bd 01       	movw	r22, r26
 df0:	cf 01       	movw	r24, r30
 df2:	08 95       	ret

00000df4 <strcmp>:
 df4:	fb 01       	movw	r30, r22
 df6:	dc 01       	movw	r26, r24
 df8:	8d 91       	ld	r24, X+
 dfa:	01 90       	ld	r0, Z+
 dfc:	80 19       	sub	r24, r0
 dfe:	01 10       	cpse	r0, r1
 e00:	d9 f3       	breq	.-10     	; 0xdf8 <strcmp+0x4>
 e02:	99 0b       	sbc	r25, r25
 e04:	08 95       	ret

00000e06 <strncmp>:
 e06:	fb 01       	movw	r30, r22
 e08:	dc 01       	movw	r26, r24
 e0a:	41 50       	subi	r20, 0x01	; 1
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	30 f0       	brcs	.+12     	; 0xe1c <strncmp+0x16>
 e10:	8d 91       	ld	r24, X+
 e12:	01 90       	ld	r0, Z+
 e14:	80 19       	sub	r24, r0
 e16:	19 f4       	brne	.+6      	; 0xe1e <strncmp+0x18>
 e18:	00 20       	and	r0, r0
 e1a:	b9 f7       	brne	.-18     	; 0xe0a <strncmp+0x4>
 e1c:	88 1b       	sub	r24, r24
 e1e:	99 0b       	sbc	r25, r25
 e20:	08 95       	ret

00000e22 <_exit>:
 e22:	f8 94       	cli

00000e24 <__stop_program>:
 e24:	ff cf       	rjmp	.-2      	; 0xe24 <__stop_program>
