
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  0080010a  0080010a  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001245  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a92  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2e  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a4  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000949  00000000  00000000  00003c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000045a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  9e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_duration_timer>:
  a6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <duration_timer+0x1>
  aa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <duration_timer>
  ae:	08 95       	ret

000000b0 <set_sound_playing>:
  b0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  b8:	08 95       	ret

000000ba <get_duration_timer>:
  ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <duration_timer>
  be:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <duration_timer+0x1>
  c2:	08 95       	ret

000000c4 <__vector_14>:



// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <get_duration_timer>
	if (duration_timer) {
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	21 f0       	breq	.+8      	; 0xf6 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <set_duration_timer>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
  f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <set_sound_playing>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_19>:
// 	if (Index_escritura==N_DATOS) {
// 		FLAG_datos_recibidos=1;
// 	}
// }

ISR(USART_UDRE_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	UDR0 = get_TX_data(get_TX_index_lectura()); // BufferTX[index_lectura]
 146:	0e 94 fe 00 	call	0x1fc	; 0x1fc <get_TX_index_lectura>
 14a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <get_TX_data>
 14e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	inc_TX_index_lectura();						// index_lectura++
 152:	0e 94 06 01 	call	0x20c	; 0x20c <inc_TX_index_lectura>
	if (!hay_datos_TX_buffer()) {	// buffer_len = 8
 156:	0e 94 60 01 	call	0x2c0	; 0x2c0 <hay_datos_TX_buffer>
 15a:	81 11       	cpse	r24, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <__vector_19+0x42>
		reset_TX_index_lectura();
 15e:	0e 94 01 01 	call	0x202	; 0x202 <reset_TX_index_lectura>
		SerialPort_TX_Interrupt_Disable();
 162:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SerialPort_TX_Interrupt_Disable>
	}
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:
	// char MENU_flag=0;


	//Habilito la m?scara de interrupciones

	SerialPort_Init(103); // 9600 baudios para 16MHz
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SerialPort_Init>
	SerialPort_TX_Enable();
 18e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SerialPort_TX_Enable>
	SerialPort_TX_Interrupt_Enable();
 192:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SerialPort_TX_Interrupt_Enable>

	sei();
 196:	78 94       	sei

	int i = 0;
	uint8_t * string = "hola\r\n";
	UART_Write_String_To_Buffer(string);
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 28 01 	call	0x250	; 0x250 <UART_Write_String_To_Buffer>
	{
		//Main
		// Send a string to the UART
		//sprintf(string, "%d\r\n", i);
		//i++;
		UART_Update();
 1a0:	0e 94 3e 01 	call	0x27c	; 0x27c <UART_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	89 e6       	ldi	r24, 0x69	; 105
 1a8:	98 e1       	ldi	r25, 0x18	; 24
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x22>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x2c>
 1b4:	00 00       	nop
 1b6:	f4 cf       	rjmp	.-24     	; 0x1a0 <main+0x18>

000001b8 <SerialPort_Init>:
 1b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1bc:	96 e0       	ldi	r25, 0x06	; 6
 1be:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1ca:	08 95       	ret

000001cc <SerialPort_TX_Enable>:
 1cc:	e1 ec       	ldi	r30, 0xC1	; 193
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <SerialPort_TX_Interrupt_Enable>:
 1d8:	e1 ec       	ldi	r30, 0xC1	; 193
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	80 83       	st	Z, r24
 1e2:	08 95       	ret

000001e4 <SerialPort_TX_Interrupt_Disable>:
 1e4:	e1 ec       	ldi	r30, 0xC1	; 193
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	8f 7d       	andi	r24, 0xDF	; 223
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret

000001f0 <get_TX_data>:
		*dato=UDR0;
		return 1;
	}
	else
		return 0;
}
 1f0:	e8 2f       	mov	r30, r24
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ed 5e       	subi	r30, 0xED	; 237
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	80 81       	ld	r24, Z
 1fa:	08 95       	ret

000001fc <get_TX_index_lectura>:
 1fc:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <TX_buffer+0x192>
 200:	08 95       	ret

00000202 <reset_TX_index_lectura>:
 202:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <TX_buffer+0x193>
 206:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <TX_buffer+0x192>
 20a:	08 95       	ret

0000020c <inc_TX_index_lectura>:
 20c:	e5 ea       	ldi	r30, 0xA5	; 165
 20e:	f2 e0       	ldi	r31, 0x02	; 2
 210:	80 81       	ld	r24, Z
 212:	91 81       	ldd	r25, Z+1	; 0x01
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <UART_Send_Char>:
 21c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 220:	08 95       	ret

00000222 <UART_Write_Char_To_Buffer>:
 222:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <TX_buffer+0x190>
 226:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <TX_buffer+0x191>
 22a:	20 39       	cpi	r18, 0x90	; 144
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	39 07       	cpc	r19, r25
 230:	68 f4       	brcc	.+26     	; 0x24c <UART_Write_Char_To_Buffer+0x2a>
 232:	f9 01       	movw	r30, r18
 234:	ed 5e       	subi	r30, 0xED	; 237
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	80 83       	st	Z, r24
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	30 93 a4 02 	sts	0x02A4, r19	; 0x8002a4 <TX_buffer+0x191>
 242:	20 93 a3 02 	sts	0x02A3, r18	; 0x8002a3 <TX_buffer+0x190>
 246:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SerialPort_TX_Interrupt_Enable>
 24a:	08 95       	ret
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	08 95       	ret

00000250 <UART_Write_String_To_Buffer>:
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	8c 01       	movw	r16, r24
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	03 c0       	rjmp	.+6      	; 0x262 <UART_Write_String_To_Buffer+0x12>
 25c:	0e 94 11 01 	call	0x222	; 0x222 <UART_Write_Char_To_Buffer>
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	f8 01       	movw	r30, r16
 264:	ec 0f       	add	r30, r28
 266:	f1 1d       	adc	r31, r1
 268:	80 81       	ld	r24, Z
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	20 50       	subi	r18, 0x00	; 0
 270:	31 40       	sbci	r19, 0x01	; 1
 272:	a1 f7       	brne	.-24     	; 0x25c <UART_Write_String_To_Buffer+0xc>
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <UART_Update>:

void UART_Update (void)
{
	// Hay byte en el buffer Tx para transmitir?
	if (TX_buffer.indice_lectura < TX_buffer.indice_escritura)
 27c:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <TX_buffer+0x192>
 280:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <TX_buffer+0x193>
 284:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <TX_buffer+0x190>
 288:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <TX_buffer+0x191>
 28c:	82 17       	cp	r24, r18
 28e:	93 07       	cpc	r25, r19
 290:	70 f4       	brcc	.+28     	; 0x2ae <UART_Update+0x32>
	{
		UART_Send_Char ( TX_buffer.data[TX_buffer.indice_lectura] ); // entrega al perif�rico para enviar
 292:	fc 01       	movw	r30, r24
 294:	ed 5e       	subi	r30, 0xED	; 237
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 81       	ld	r24, Z
 29a:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_Send_Char>
		TX_buffer.indice_lectura++;
 29e:	e5 ea       	ldi	r30, 0xA5	; 165
 2a0:	f2 e0       	ldi	r31, 0x02	; 2
 2a2:	80 81       	ld	r24, Z
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	91 83       	std	Z+1, r25	; 0x01
 2aa:	80 83       	st	Z, r24
 2ac:	08 95       	ret
	}
	else
	{// No hay datos disponibles para enviar
		TX_buffer.indice_lectura = 0;
 2ae:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <TX_buffer+0x193>
 2b2:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <TX_buffer+0x192>
		TX_buffer.indice_escritura = 0;
 2b6:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <TX_buffer+0x191>
 2ba:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <TX_buffer+0x190>
 2be:	08 95       	ret

000002c0 <hay_datos_TX_buffer>:
	}
}

char hay_datos_TX_buffer() {
	return (TX_buffer.indice_lectura < TX_buffer.indice_escritura);
 2c0:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <TX_buffer+0x192>
 2c4:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <TX_buffer+0x193>
 2c8:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <TX_buffer+0x190>
 2cc:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <TX_buffer+0x191>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	42 17       	cp	r20, r18
 2d4:	53 07       	cpc	r21, r19
 2d6:	08 f0       	brcs	.+2      	; 0x2da <hay_datos_TX_buffer+0x1a>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
}
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
