
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  000003bc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  008001fe  008001fe  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000155b  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b05  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e8a  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  000036a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000962  00000000  00000000  00003ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a81  00000000  00000000  00004502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00004f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_18>
  4c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  9e:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_duration_timer>:
  a6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <duration_timer+0x1>
  aa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <duration_timer>
  ae:	08 95       	ret

000000b0 <set_sound_playing>:
  b0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x1>
  b4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end>
  b8:	08 95       	ret

000000ba <get_duration_timer>:
  ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <duration_timer>
  be:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <duration_timer+0x1>
  c2:	08 95       	ret

000000c4 <__vector_14>:

uint8_t FLAG_datos_recibidos = 0;

// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <get_duration_timer>
	if (duration_timer) {
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	21 f0       	breq	.+8      	; 0xf6 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <set_duration_timer>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
  f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <set_sound_playing>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_18>:


ISR(USART_RX_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	set_RX_data_UDR0(); // BufferRX[index_escritura] = UDR0
 146:	0e 94 73 01 	call	0x2e6	; 0x2e6 <set_RX_data_UDR0>
	inc_RX_index_escritura(); // index_escritura++
 14a:	0e 94 89 01 	call	0x312	; 0x312 <inc_RX_index_escritura>
	if (get_RX_data_index_lectura() == (uint8_t)'\n') {
 14e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <get_RX_data_index_lectura>
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	31 f4       	brne	.+12     	; 0x162 <__vector_18+0x3e>
		set_RX_data('\0');
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <set_RX_data>
		FLAG_datos_recibidos=1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <FLAG_datos_recibidos>
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_19>:

ISR(USART_UDRE_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	UDR0 = get_TX_data(get_TX_index_lectura()); // BufferTX[index_lectura]
 1a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_TX_index_lectura>
 1aa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <get_TX_data>
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	inc_TX_index_lectura();						// index_lectura++
 1b2:	0e 94 91 01 	call	0x322	; 0x322 <inc_TX_index_lectura>
	if (!hay_datos_TX_buffer()) {	// buffer_len = 8
 1b6:	0e 94 ce 01 	call	0x39c	; 0x39c <hay_datos_TX_buffer>
 1ba:	81 11       	cpse	r24, r1
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <__vector_19+0x42>
		reset_TX_index();
 1be:	0e 94 80 01 	call	0x300	; 0x300 <reset_TX_index>
		SerialPort_TX_Interrupt_Disable();
 1c2:	0e 94 3a 01 	call	0x274	; 0x274 <SerialPort_TX_Interrupt_Disable>
	}
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <main>:
	// char MENU_flag=0;


	//Habilito la m?scara de interrupciones

	Buffer_Init();
 1e8:	0e 94 4c 01 	call	0x298	; 0x298 <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 1ec:	87 e6       	ldi	r24, 0x67	; 103
 1ee:	0e 94 24 01 	call	0x248	; 0x248 <SerialPort_Init>
	SerialPort_TX_Enable();
 1f2:	0e 94 2e 01 	call	0x25c	; 0x25c <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 1f6:	0e 94 40 01 	call	0x280	; 0x280 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 1fa:	0e 94 46 01 	call	0x28c	; 0x28c <SerialPort_RX_Interrupt_Enable>

	sei();
 1fe:	78 94       	sei

	int i = 0;
	uint8_t * string = "hola\r\n\0";

	UART_Write_String_To_Buffer(msjBienvenida);
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 208:	88 e9       	ldi	r24, 0x98	; 152
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 210:	86 e6       	ldi	r24, 0x66	; 102
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 218:	8d e2       	ldi	r24, 0x2D	; 45
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 b5 01 	call	0x36a	; 0x36a <UART_Write_String_To_Buffer>

	uint8_t aa = '\r';
	while(1)
	{
		if (FLAG_datos_recibidos == 1) {
 228:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <FLAG_datos_recibidos>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	11 f4       	brne	.+4      	; 0x234 <main+0x4c>
			FLAG_datos_recibidos = 0;
 230:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <FLAG_datos_recibidos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	89 e6       	ldi	r24, 0x69	; 105
 238:	98 e1       	ldi	r25, 0x18	; 24
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x52>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x5c>
 244:	00 00       	nop
		// 	set_duration_timer(2000);
		// 	set_sound_playing(1);
		// 	while (get_sound_playing());
		// }
		i++;
	}
 246:	f0 cf       	rjmp	.-32     	; 0x228 <main+0x40>

00000248 <SerialPort_Init>:
 248:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 24c:	96 e0       	ldi	r25, 0x06	; 6
 24e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 252:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 256:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 25a:	08 95       	ret

0000025c <SerialPort_TX_Enable>:
 25c:	e1 ec       	ldi	r30, 0xC1	; 193
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 60       	ori	r24, 0x08	; 8
 264:	80 83       	st	Z, r24
 266:	08 95       	ret

00000268 <SerialPort_TX_Interrupt_Enable>:
 268:	e1 ec       	ldi	r30, 0xC1	; 193
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 62       	ori	r24, 0x20	; 32
 270:	80 83       	st	Z, r24
 272:	08 95       	ret

00000274 <SerialPort_TX_Interrupt_Disable>:
 274:	e1 ec       	ldi	r30, 0xC1	; 193
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8f 7d       	andi	r24, 0xDF	; 223
 27c:	80 83       	st	Z, r24
 27e:	08 95       	ret

00000280 <SerialPort_RX_Enable>:
 280:	e1 ec       	ldi	r30, 0xC1	; 193
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 61       	ori	r24, 0x10	; 16
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <SerialPort_RX_Interrupt_Enable>:
 28c:	e1 ec       	ldi	r30, 0xC1	; 193
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 68       	ori	r24, 0x80	; 128
 294:	80 83       	st	Z, r24
 296:	08 95       	ret

00000298 <Buffer_Init>:
		*dato=UDR0;
		return 1;
	}
	else
		return 0;
}
 298:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x191>
 29c:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x190>
 2a0:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TX_buffer+0x193>
 2a4:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x192>
 2a8:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <RX_buffer+0x191>
 2ac:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <RX_buffer+0x190>
 2b0:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <RX_buffer+0x193>
 2b4:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <RX_buffer+0x192>
 2b8:	08 95       	ret

000002ba <get_TX_data>:
 2ba:	e8 2f       	mov	r30, r24
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e9 5f       	subi	r30, 0xF9	; 249
 2c0:	fd 4f       	sbci	r31, 0xFD	; 253
 2c2:	80 81       	ld	r24, Z
 2c4:	08 95       	ret

000002c6 <get_RX_data_index_lectura>:
 2c6:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <RX_buffer+0x192>
 2ca:	f0 91 2e 05 	lds	r31, 0x052E	; 0x80052e <RX_buffer+0x193>
 2ce:	e5 56       	subi	r30, 0x65	; 101
 2d0:	fc 4f       	sbci	r31, 0xFC	; 252
 2d2:	80 81       	ld	r24, Z
 2d4:	08 95       	ret

000002d6 <set_RX_data>:
 2d6:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 2da:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 2de:	e5 56       	subi	r30, 0x65	; 101
 2e0:	fc 4f       	sbci	r31, 0xFC	; 252
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret

000002e6 <set_RX_data_UDR0>:
 2e6:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 2ea:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 2ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f2:	e5 56       	subi	r30, 0x65	; 101
 2f4:	fc 4f       	sbci	r31, 0xFC	; 252
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <get_TX_index_lectura>:
 2fa:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <TX_buffer+0x192>
 2fe:	08 95       	ret

00000300 <reset_TX_index>:
 300:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TX_buffer+0x193>
 304:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x192>
 308:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x191>
 30c:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x190>
 310:	08 95       	ret

00000312 <inc_RX_index_escritura>:
 312:	eb e2       	ldi	r30, 0x2B	; 43
 314:	f5 e0       	ldi	r31, 0x05	; 5
 316:	80 81       	ld	r24, Z
 318:	91 81       	ldd	r25, Z+1	; 0x01
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	91 83       	std	Z+1, r25	; 0x01
 31e:	80 83       	st	Z, r24
 320:	08 95       	ret

00000322 <inc_TX_index_lectura>:
 322:	e9 e9       	ldi	r30, 0x99	; 153
 324:	f3 e0       	ldi	r31, 0x03	; 3
 326:	80 81       	ld	r24, Z
 328:	91 81       	ldd	r25, Z+1	; 0x01
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	91 83       	std	Z+1, r25	; 0x01
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret

00000332 <UART_Write_Char_To_Buffer>:
 332:	cf 93       	push	r28
 334:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <TX_buffer+0x190>
 338:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <TX_buffer+0x191>
 33c:	20 39       	cpi	r18, 0x90	; 144
 33e:	31 40       	sbci	r19, 0x01	; 1
 340:	88 f4       	brcc	.+34     	; 0x364 <UART_Write_Char_To_Buffer+0x32>
 342:	c8 2f       	mov	r28, r24
 344:	0e 94 3a 01 	call	0x274	; 0x274 <SerialPort_TX_Interrupt_Disable>
 348:	e7 e9       	ldi	r30, 0x97	; 151
 34a:	f3 e0       	ldi	r31, 0x03	; 3
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	dc 01       	movw	r26, r24
 352:	a9 5f       	subi	r26, 0xF9	; 249
 354:	bd 4f       	sbci	r27, 0xFD	; 253
 356:	cc 93       	st	X, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	91 83       	std	Z+1, r25	; 0x01
 35c:	80 83       	st	Z, r24
 35e:	0e 94 34 01 	call	0x268	; 0x268 <SerialPort_TX_Interrupt_Enable>
 362:	01 c0       	rjmp	.+2      	; 0x366 <UART_Write_Char_To_Buffer+0x34>
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <UART_Write_String_To_Buffer>:
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	8c 01       	movw	r16, r24
 372:	c0 e0       	ldi	r28, 0x00	; 0
 374:	03 c0       	rjmp	.+6      	; 0x37c <UART_Write_String_To_Buffer+0x12>
 376:	0e 94 99 01 	call	0x332	; 0x332 <UART_Write_Char_To_Buffer>
 37a:	cf 5f       	subi	r28, 0xFF	; 255
 37c:	f8 01       	movw	r30, r16
 37e:	ec 0f       	add	r30, r28
 380:	f1 1d       	adc	r31, r1
 382:	80 81       	ld	r24, Z
 384:	81 11       	cpse	r24, r1
 386:	f7 cf       	rjmp	.-18     	; 0x376 <UART_Write_String_To_Buffer+0xc>
 388:	8d e0       	ldi	r24, 0x0D	; 13
 38a:	0e 94 99 01 	call	0x332	; 0x332 <UART_Write_Char_To_Buffer>
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	0e 94 99 01 	call	0x332	; 0x332 <UART_Write_Char_To_Buffer>
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <hay_datos_TX_buffer>:
		TX_buffer.index_escritura = 0;
	}
}

char hay_datos_TX_buffer() {
	return (TX_buffer.index_lectura < TX_buffer.index_escritura);
 39c:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <TX_buffer+0x192>
 3a0:	50 91 9a 03 	lds	r21, 0x039A	; 0x80039a <TX_buffer+0x193>
 3a4:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <TX_buffer+0x190>
 3a8:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <TX_buffer+0x191>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	42 17       	cp	r20, r18
 3b0:	53 07       	cpc	r21, r19
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <hay_datos_TX_buffer+0x1a>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
}
 3b6:	08 95       	ret

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
