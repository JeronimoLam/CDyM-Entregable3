
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  008001fe  008001fe  000005a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f1  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abb  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e60  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000944  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a39  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00004ec1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_18>
  4c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_duration_timer>:
  a6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <duration_timer+0x1>
  aa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <duration_timer>
  ae:	08 95       	ret

000000b0 <set_sound_playing>:
  b0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x1>
  b4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end>
  b8:	08 95       	ret

000000ba <get_duration_timer>:
  ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <duration_timer>
  be:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <duration_timer+0x1>
  c2:	08 95       	ret

000000c4 <__vector_14>:



// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <get_duration_timer>
	if (duration_timer) {
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	21 f0       	breq	.+8      	; 0xf6 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <set_duration_timer>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
  f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <set_sound_playing>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <main>:
	// char MENU_flag=0;


	//Habilito la m?scara de interrupciones

	Buffer_Init();
 124:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	0e 94 c0 00 	call	0x180	; 0x180 <SerialPort_Init>
	SerialPort_TX_Enable();
 12e:	0e 94 ca 00 	call	0x194	; 0x194 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 132:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 136:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SerialPort_RX_Interrupt_Enable>

	sei();
 13a:	78 94       	sei

	int i = 0;
	uint8_t * string = "hola\r\n\0";

	UART_Write_String_To_Buffer(msjBienvenida);
 13c:	80 ec       	ldi	r24, 0xC0	; 192
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 144:	88 e9       	ldi	r24, 0x98	; 152
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 14c:	86 e6       	ldi	r24, 0x66	; 102
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 154:	8d e2       	ldi	r24, 0x2D	; 45
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Write_String_To_Buffer>

	uint8_t aa = '\r';
	uint8_t *Buffer_RX;
	while(1)
	{
		if (get_FLAG_datos_recibidos() == 1) {
 164:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_FLAG_datos_recibidos>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x40>
			cli();
 16c:	f8 94       	cli
			set_FLAG_datos_recibidos(0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 80 01 	call	0x300	; 0x300 <set_FLAG_datos_recibidos>
			UART_Write_String_To_Buffer(get_RX_data());
 174:	0e 94 ff 00 	call	0x1fe	; 0x1fe <get_RX_data>
 178:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Write_String_To_Buffer>
			
			// procesamiento BUffer_Rx
			sei();
 17c:	78 94       	sei
		// 	set_duration_timer(2000);
		// 	set_sound_playing(1);
		// 	while (get_sound_playing());
		// }
		i++;
	}
 17e:	f2 cf       	rjmp	.-28     	; 0x164 <main+0x40>

00000180 <SerialPort_Init>:
 180:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 184:	96 e0       	ldi	r25, 0x06	; 6
 186:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 18a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 192:	08 95       	ret

00000194 <SerialPort_TX_Enable>:
 194:	e1 ec       	ldi	r30, 0xC1	; 193
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <SerialPort_TX_Interrupt_Enable>:
 1a0:	e1 ec       	ldi	r30, 0xC1	; 193
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <SerialPort_TX_Interrupt_Disable>:
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	8f 7d       	andi	r24, 0xDF	; 223
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret

000001b8 <SerialPort_RX_Enable>:
 1b8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <SerialPort_RX_Interrupt_Enable>:
 1c4:	e1 ec       	ldi	r30, 0xC1	; 193
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <Buffer_Init>:
		*dato=UDR0;
		return 1;
	}
	else
		return 0;
}
 1d0:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x191>
 1d4:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x190>
 1d8:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TX_buffer+0x193>
 1dc:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x192>
 1e0:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <RX_buffer+0x191>
 1e4:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <RX_buffer+0x190>
 1e8:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <RX_buffer+0x193>
 1ec:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <RX_buffer+0x192>
 1f0:	08 95       	ret

000001f2 <get_TX_data>:
 1f2:	e8 2f       	mov	r30, r24
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e9 5f       	subi	r30, 0xF9	; 249
 1f8:	fd 4f       	sbci	r31, 0xFD	; 253
 1fa:	80 81       	ld	r24, Z
 1fc:	08 95       	ret

000001fe <get_RX_data>:
 1fe:	8b e9       	ldi	r24, 0x9B	; 155
 200:	93 e0       	ldi	r25, 0x03	; 3
 202:	08 95       	ret

00000204 <set_RX_data>:
 204:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 208:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 20c:	e5 56       	subi	r30, 0x65	; 101
 20e:	fc 4f       	sbci	r31, 0xFC	; 252
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <set_RX_data_UDR0>:
 214:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 218:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 21c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 220:	e5 56       	subi	r30, 0x65	; 101
 222:	fc 4f       	sbci	r31, 0xFC	; 252
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <get_TX_index_lectura>:
 228:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <TX_buffer+0x192>
 22c:	08 95       	ret

0000022e <reset_TX_index>:
 22e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TX_buffer+0x193>
 232:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x192>
 236:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x191>
 23a:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x190>
 23e:	08 95       	ret

00000240 <inc_RX_index_escritura>:
 240:	eb e2       	ldi	r30, 0x2B	; 43
 242:	f5 e0       	ldi	r31, 0x05	; 5
 244:	40 81       	ld	r20, Z
 246:	51 81       	ldd	r21, Z+1	; 0x01
 248:	4f 5f       	subi	r20, 0xFF	; 255
 24a:	5f 4f       	sbci	r21, 0xFF	; 255
 24c:	9a 01       	movw	r18, r20
 24e:	32 95       	swap	r19
 250:	22 95       	swap	r18
 252:	2f 70       	andi	r18, 0x0F	; 15
 254:	23 27       	eor	r18, r19
 256:	3f 70       	andi	r19, 0x0F	; 15
 258:	23 27       	eor	r18, r19
 25a:	ae e3       	ldi	r26, 0x3E	; 62
 25c:	ba e0       	ldi	r27, 0x0A	; 10
 25e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 262:	20 e9       	ldi	r18, 0x90	; 144
 264:	31 e0       	ldi	r19, 0x01	; 1
 266:	bc 01       	movw	r22, r24
 268:	62 9f       	mul	r22, r18
 26a:	c0 01       	movw	r24, r0
 26c:	63 9f       	mul	r22, r19
 26e:	90 0d       	add	r25, r0
 270:	72 9f       	mul	r23, r18
 272:	90 0d       	add	r25, r0
 274:	11 24       	eor	r1, r1
 276:	48 1b       	sub	r20, r24
 278:	59 0b       	sbc	r21, r25
 27a:	51 83       	std	Z+1, r21	; 0x01
 27c:	40 83       	st	Z, r20
 27e:	08 95       	ret

00000280 <__vector_18>:
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
 2a2:	0e 94 0a 01 	call	0x214	; 0x214 <set_RX_data_UDR0>
 2a6:	0e 94 20 01 	call	0x240	; 0x240 <inc_RX_index_escritura>
 2aa:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 2ae:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 2b2:	e6 56       	subi	r30, 0x66	; 102
 2b4:	fc 4f       	sbci	r31, 0xFC	; 252
 2b6:	80 81       	ld	r24, Z
 2b8:	8a 30       	cpi	r24, 0x0A	; 10
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <__vector_18+0x48>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 02 01 	call	0x204	; 0x204 <set_RX_data>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <FLAG_datos_recibidos>
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <inc_TX_index_lectura>:
 2ea:	e9 e9       	ldi	r30, 0x99	; 153
 2ec:	f3 e0       	ldi	r31, 0x03	; 3
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	91 83       	std	Z+1, r25	; 0x01
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <get_FLAG_datos_recibidos>:
 2fa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <FLAG_datos_recibidos>
 2fe:	08 95       	ret

00000300 <set_FLAG_datos_recibidos>:
 300:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <FLAG_datos_recibidos>
 304:	08 95       	ret

00000306 <UART_Write_Char_To_Buffer>:
 306:	cf 93       	push	r28
 308:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <TX_buffer+0x190>
 30c:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <TX_buffer+0x191>
 310:	20 39       	cpi	r18, 0x90	; 144
 312:	31 40       	sbci	r19, 0x01	; 1
 314:	88 f4       	brcc	.+34     	; 0x338 <UART_Write_Char_To_Buffer+0x32>
 316:	c8 2f       	mov	r28, r24
 318:	0e 94 d6 00 	call	0x1ac	; 0x1ac <SerialPort_TX_Interrupt_Disable>
 31c:	e7 e9       	ldi	r30, 0x97	; 151
 31e:	f3 e0       	ldi	r31, 0x03	; 3
 320:	80 81       	ld	r24, Z
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	dc 01       	movw	r26, r24
 326:	a9 5f       	subi	r26, 0xF9	; 249
 328:	bd 4f       	sbci	r27, 0xFD	; 253
 32a:	cc 93       	st	X, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	91 83       	std	Z+1, r25	; 0x01
 330:	80 83       	st	Z, r24
 332:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SerialPort_TX_Interrupt_Enable>
 336:	01 c0       	rjmp	.+2      	; 0x33a <UART_Write_Char_To_Buffer+0x34>
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <UART_Write_String_To_Buffer>:
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	8c 01       	movw	r16, r24
 346:	c0 e0       	ldi	r28, 0x00	; 0
 348:	03 c0       	rjmp	.+6      	; 0x350 <UART_Write_String_To_Buffer+0x12>
 34a:	0e 94 83 01 	call	0x306	; 0x306 <UART_Write_Char_To_Buffer>
 34e:	cf 5f       	subi	r28, 0xFF	; 255
 350:	f8 01       	movw	r30, r16
 352:	ec 0f       	add	r30, r28
 354:	f1 1d       	adc	r31, r1
 356:	80 81       	ld	r24, Z
 358:	81 11       	cpse	r24, r1
 35a:	f7 cf       	rjmp	.-18     	; 0x34a <UART_Write_String_To_Buffer+0xc>
 35c:	8d e0       	ldi	r24, 0x0D	; 13
 35e:	0e 94 83 01 	call	0x306	; 0x306 <UART_Write_Char_To_Buffer>
 362:	8a e0       	ldi	r24, 0x0A	; 10
 364:	0e 94 83 01 	call	0x306	; 0x306 <UART_Write_Char_To_Buffer>
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <hay_datos_TX_buffer>:
		TX_buffer.index_escritura = 0;
	}
}

char hay_datos_TX_buffer() {
	return (TX_buffer.index_lectura < TX_buffer.index_escritura);
 370:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <TX_buffer+0x192>
 374:	50 91 9a 03 	lds	r21, 0x039A	; 0x80039a <TX_buffer+0x193>
 378:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <TX_buffer+0x190>
 37c:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <TX_buffer+0x191>
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	42 17       	cp	r20, r18
 384:	53 07       	cpc	r21, r19
 386:	08 f0       	brcs	.+2      	; 0x38a <hay_datos_TX_buffer+0x1a>
 388:	80 e0       	ldi	r24, 0x00	; 0
}
 38a:	08 95       	ret

0000038c <__vector_19>:
		set_RX_data('\0');
		FLAG_datos_recibidos=1;
	}
}

ISR(USART_UDRE_vect){
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	UDR0 = get_TX_data(get_TX_index_lectura()); // BufferTX[index_lectura]
 3ae:	0e 94 14 01 	call	0x228	; 0x228 <get_TX_index_lectura>
 3b2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <get_TX_data>
 3b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	inc_TX_index_lectura();						// index_lectura++
 3ba:	0e 94 75 01 	call	0x2ea	; 0x2ea <inc_TX_index_lectura>
	if (!hay_datos_TX_buffer()) {	// buffer_len = 8
 3be:	0e 94 b8 01 	call	0x370	; 0x370 <hay_datos_TX_buffer>
 3c2:	81 11       	cpse	r24, r1
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <__vector_19+0x42>
		reset_TX_index();
 3c6:	0e 94 17 01 	call	0x22e	; 0x22e <reset_TX_index>
		SerialPort_TX_Interrupt_Disable();
 3ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <SerialPort_TX_Interrupt_Disable>
	}
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__umulhisi3>:
 3f0:	a2 9f       	mul	r26, r18
 3f2:	b0 01       	movw	r22, r0
 3f4:	b3 9f       	mul	r27, r19
 3f6:	c0 01       	movw	r24, r0
 3f8:	a3 9f       	mul	r26, r19
 3fa:	70 0d       	add	r23, r0
 3fc:	81 1d       	adc	r24, r1
 3fe:	11 24       	eor	r1, r1
 400:	91 1d       	adc	r25, r1
 402:	b2 9f       	mul	r27, r18
 404:	70 0d       	add	r23, r0
 406:	81 1d       	adc	r24, r1
 408:	11 24       	eor	r1, r1
 40a:	91 1d       	adc	r25, r1
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
