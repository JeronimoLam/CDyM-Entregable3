
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000556  00800100  00000e5a  00000eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000274  00800656  00800656  00001444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e90  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d46  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001433  00000000  00000000  0000435a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  00005790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a24  00000000  00000000  00005e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a70  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00007298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_14>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_18>
  4c:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_19>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	6b 02       	muls	r22, r27
  6a:	6f 02       	muls	r22, r31
  6c:	58 02       	muls	r21, r24
  6e:	5b 02       	muls	r21, r27
  70:	5f 02       	muls	r21, r31
  72:	63 02       	muls	r22, r19
  74:	67 02       	muls	r22, r23
  76:	76 02       	muls	r23, r22
  78:	76 02       	muls	r23, r22
  7a:	76 02       	muls	r23, r22
  7c:	76 02       	muls	r23, r22
  7e:	76 02       	muls	r23, r22
  80:	76 02       	muls	r23, r22
  82:	76 02       	muls	r23, r22
  84:	76 02       	muls	r23, r22
  86:	73 02       	muls	r23, r19

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	16 e0       	ldi	r17, 0x06	; 6
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	ea e5       	ldi	r30, 0x5A	; 90
  9c:	fe e0       	ldi	r31, 0x0E	; 14
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a6 35       	cpi	r26, 0x56	; 86
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	28 e0       	ldi	r18, 0x08	; 8
  ac:	a6 e5       	ldi	r26, 0x56	; 86
  ae:	b6 e0       	ldi	r27, 0x06	; 6
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	aa 3c       	cpi	r26, 0xCA	; 202
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 75 03 	call	0x6ea	; 0x6ea <main>
  be:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <sound>:
	return octave;
}

unsigned int get_tempo() {
	return tempo;
}
  c6:	40 91 58 06 	lds	r20, 0x0658	; 0x800658 <sound_playing>
  ca:	50 91 59 06 	lds	r21, 0x0659	; 0x800659 <sound_playing+0x1>
  ce:	45 2b       	or	r20, r21
  d0:	d1 f7       	brne	.-12     	; 0xc6 <sound>
  d2:	70 93 64 06 	sts	0x0664, r23	; 0x800664 <duration_timer+0x1>
  d6:	60 93 63 06 	sts	0x0663, r22	; 0x800663 <duration_timer>
  da:	e0 e8       	ldi	r30, 0x80	; 128
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	20 81       	ld	r18, Z
  e0:	20 64       	ori	r18, 0x40	; 64
  e2:	20 83       	st	Z, r18
  e4:	9c 01       	movw	r18, r24
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	72 e1       	ldi	r23, 0x12	; 18
  ee:	8a e7       	ldi	r24, 0x7A	; 122
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divmodsi4>
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	31 09       	sbc	r19, r1
  fa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fe:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 59 06 	sts	0x0659, r25	; 0x800659 <sound_playing+0x1>
 10a:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <sound_playing>
 10e:	08 95       	ret

00000110 <stop_song>:
 110:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <is_song_playing>
 114:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <sound_playing+0x1>
 118:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <sound_playing>
 11c:	e0 e8       	ldi	r30, 0x80	; 128
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 7b       	andi	r24, 0xBF	; 191
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <start_song>:
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <is_song_playing>
 12e:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <__data_end>
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e8 5f       	subi	r30, 0xF8	; 248
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <song+0x1>
 144:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <song>
 148:	05 c0       	rjmp	.+10     	; 0x154 <start_song+0x2c>
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 150:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 154:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 158:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 15c:	80 81       	ld	r24, Z
 15e:	8a 33       	cpi	r24, 0x3A	; 58
 160:	a1 f7       	brne	.-24     	; 0x14a <start_song+0x22>
 162:	31 96       	adiw	r30, 0x01	; 1
 164:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 168:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 16c:	3f c1       	rjmp	.+638    	; 0x3ec <start_song+0x2c4>
 16e:	80 81       	ld	r24, Z
 170:	84 36       	cpi	r24, 0x64	; 100
 172:	09 f0       	breq	.+2      	; 0x176 <start_song+0x4e>
 174:	55 c0       	rjmp	.+170    	; 0x220 <start_song+0xf8>
 176:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <duration>
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 180:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 184:	05 c0       	rjmp	.+10     	; 0x190 <start_song+0x68>
 186:	31 96       	adiw	r30, 0x01	; 1
 188:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 18c:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 190:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 194:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 198:	80 81       	ld	r24, Z
 19a:	8d 33       	cpi	r24, 0x3D	; 61
 19c:	a1 f3       	breq	.-24     	; 0x186 <start_song+0x5e>
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <start_song+0x82>
 1a0:	31 96       	adiw	r30, 0x01	; 1
 1a2:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 1a6:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 1aa:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 1ae:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 1b2:	80 81       	ld	r24, Z
 1b4:	80 32       	cpi	r24, 0x20	; 32
 1b6:	a1 f3       	breq	.-24     	; 0x1a0 <start_song+0x78>
 1b8:	80 81       	ld	r24, Z
 1ba:	80 33       	cpi	r24, 0x30	; 48
 1bc:	38 f0       	brcs	.+14     	; 0x1cc <start_song+0xa4>
 1be:	80 81       	ld	r24, Z
 1c0:	8a 33       	cpi	r24, 0x3A	; 58
 1c2:	20 f4       	brcc	.+8      	; 0x1cc <start_song+0xa4>
 1c4:	80 81       	ld	r24, Z
 1c6:	80 53       	subi	r24, 0x30	; 48
 1c8:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <duration>
 1cc:	cf 01       	movw	r24, r30
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <song+0x1>
 1d4:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <song>
 1d8:	21 81       	ldd	r18, Z+1	; 0x01
 1da:	20 33       	cpi	r18, 0x30	; 48
 1dc:	d0 f0       	brcs	.+52     	; 0x212 <start_song+0xea>
 1de:	21 81       	ldd	r18, Z+1	; 0x01
 1e0:	2a 33       	cpi	r18, 0x3A	; 58
 1e2:	b8 f4       	brcc	.+46     	; 0x212 <start_song+0xea>
 1e4:	31 81       	ldd	r19, Z+1	; 0x01
 1e6:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <duration>
 1ea:	22 0f       	add	r18, r18
 1ec:	42 2f       	mov	r20, r18
 1ee:	44 0f       	add	r20, r20
 1f0:	44 0f       	add	r20, r20
 1f2:	24 0f       	add	r18, r20
 1f4:	23 0f       	add	r18, r19
 1f6:	20 53       	subi	r18, 0x30	; 48
 1f8:	20 93 62 06 	sts	0x0662, r18	; 0x800662 <duration>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <song+0x1>
 202:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <song>
 206:	05 c0       	rjmp	.+10     	; 0x212 <start_song+0xea>
 208:	31 96       	adiw	r30, 0x01	; 1
 20a:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 20e:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 212:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 216:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 21a:	80 81       	ld	r24, Z
 21c:	8c 32       	cpi	r24, 0x2C	; 44
 21e:	a1 f3       	breq	.-24     	; 0x208 <start_song+0xe0>
 220:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 224:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 228:	80 81       	ld	r24, Z
 22a:	8f 36       	cpi	r24, 0x6F	; 111
 22c:	e9 f5       	brne	.+122    	; 0x2a8 <start_song+0x180>
 22e:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <octave>
 232:	31 96       	adiw	r30, 0x01	; 1
 234:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 238:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 23c:	05 c0       	rjmp	.+10     	; 0x248 <start_song+0x120>
 23e:	31 96       	adiw	r30, 0x01	; 1
 240:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 244:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 248:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 24c:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 250:	80 81       	ld	r24, Z
 252:	8d 33       	cpi	r24, 0x3D	; 61
 254:	a1 f3       	breq	.-24     	; 0x23e <start_song+0x116>
 256:	05 c0       	rjmp	.+10     	; 0x262 <start_song+0x13a>
 258:	31 96       	adiw	r30, 0x01	; 1
 25a:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 25e:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 262:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 266:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 26a:	80 81       	ld	r24, Z
 26c:	80 32       	cpi	r24, 0x20	; 32
 26e:	a1 f3       	breq	.-24     	; 0x258 <start_song+0x130>
 270:	80 81       	ld	r24, Z
 272:	80 33       	cpi	r24, 0x30	; 48
 274:	38 f0       	brcs	.+14     	; 0x284 <start_song+0x15c>
 276:	80 81       	ld	r24, Z
 278:	8a 33       	cpi	r24, 0x3A	; 58
 27a:	20 f4       	brcc	.+8      	; 0x284 <start_song+0x15c>
 27c:	80 81       	ld	r24, Z
 27e:	80 53       	subi	r24, 0x30	; 48
 280:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <octave>
 284:	31 96       	adiw	r30, 0x01	; 1
 286:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 28a:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 28e:	05 c0       	rjmp	.+10     	; 0x29a <start_song+0x172>
 290:	31 96       	adiw	r30, 0x01	; 1
 292:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 296:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 29a:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 29e:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 2a2:	80 81       	ld	r24, Z
 2a4:	8c 32       	cpi	r24, 0x2C	; 44
 2a6:	a1 f3       	breq	.-24     	; 0x290 <start_song+0x168>
 2a8:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 2ac:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 2b0:	80 81       	ld	r24, Z
 2b2:	82 36       	cpi	r24, 0x62	; 98
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <start_song+0x190>
 2b6:	93 c0       	rjmp	.+294    	; 0x3de <start_song+0x2b6>
 2b8:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <tempo+0x1>
 2bc:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <tempo>
 2c0:	31 96       	adiw	r30, 0x01	; 1
 2c2:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 2c6:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <start_song+0x1ae>
 2cc:	31 96       	adiw	r30, 0x01	; 1
 2ce:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 2d2:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 2d6:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 2da:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 2de:	80 81       	ld	r24, Z
 2e0:	8d 33       	cpi	r24, 0x3D	; 61
 2e2:	a1 f3       	breq	.-24     	; 0x2cc <start_song+0x1a4>
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <start_song+0x1c8>
 2e6:	31 96       	adiw	r30, 0x01	; 1
 2e8:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 2ec:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 2f0:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 2f4:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 2f8:	80 81       	ld	r24, Z
 2fa:	80 32       	cpi	r24, 0x20	; 32
 2fc:	a1 f3       	breq	.-24     	; 0x2e6 <start_song+0x1be>
 2fe:	80 81       	ld	r24, Z
 300:	80 33       	cpi	r24, 0x30	; 48
 302:	50 f0       	brcs	.+20     	; 0x318 <start_song+0x1f0>
 304:	80 81       	ld	r24, Z
 306:	8a 33       	cpi	r24, 0x3A	; 58
 308:	38 f4       	brcc	.+14     	; 0x318 <start_song+0x1f0>
 30a:	80 81       	ld	r24, Z
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	c0 97       	sbiw	r24, 0x30	; 48
 310:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <tempo+0x1>
 314:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <tempo>
 318:	df 01       	movw	r26, r30
 31a:	11 96       	adiw	r26, 0x01	; 1
 31c:	b0 93 60 06 	sts	0x0660, r27	; 0x800660 <song+0x1>
 320:	a0 93 5f 06 	sts	0x065F, r26	; 0x80065f <song>
 324:	81 81       	ldd	r24, Z+1	; 0x01
 326:	80 33       	cpi	r24, 0x30	; 48
 328:	08 f4       	brcc	.+2      	; 0x32c <start_song+0x204>
 32a:	4c c0       	rjmp	.+152    	; 0x3c4 <start_song+0x29c>
 32c:	81 81       	ldd	r24, Z+1	; 0x01
 32e:	8a 33       	cpi	r24, 0x3A	; 58
 330:	08 f0       	brcs	.+2      	; 0x334 <start_song+0x20c>
 332:	48 c0       	rjmp	.+144    	; 0x3c4 <start_song+0x29c>
 334:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <tempo>
 338:	90 91 5d 06 	lds	r25, 0x065D	; 0x80065d <tempo+0x1>
 33c:	9c 01       	movw	r18, r24
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
 352:	21 81       	ldd	r18, Z+1	; 0x01
 354:	82 0f       	add	r24, r18
 356:	91 1d       	adc	r25, r1
 358:	c0 97       	sbiw	r24, 0x30	; 48
 35a:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <tempo+0x1>
 35e:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <tempo>
 362:	9d 01       	movw	r18, r26
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	30 93 60 06 	sts	0x0660, r19	; 0x800660 <song+0x1>
 36c:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <song>
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	4c 91       	ld	r20, X
 374:	11 97       	sbiw	r26, 0x01	; 1
 376:	40 33       	cpi	r20, 0x30	; 48
 378:	28 f1       	brcs	.+74     	; 0x3c4 <start_song+0x29c>
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	4c 91       	ld	r20, X
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	4a 33       	cpi	r20, 0x3A	; 58
 382:	00 f5       	brcc	.+64     	; 0x3c4 <start_song+0x29c>
 384:	ac 01       	movw	r20, r24
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	84 0f       	add	r24, r20
 398:	95 1f       	adc	r25, r21
 39a:	11 96       	adiw	r26, 0x01	; 1
 39c:	4c 91       	ld	r20, X
 39e:	84 0f       	add	r24, r20
 3a0:	91 1d       	adc	r25, r1
 3a2:	c0 97       	sbiw	r24, 0x30	; 48
 3a4:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <tempo+0x1>
 3a8:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <tempo>
 3ac:	2f 5f       	subi	r18, 0xFF	; 255
 3ae:	3f 4f       	sbci	r19, 0xFF	; 255
 3b0:	30 93 60 06 	sts	0x0660, r19	; 0x800660 <song+0x1>
 3b4:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <song>
 3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <start_song+0x29c>
 3ba:	31 96       	adiw	r30, 0x01	; 1
 3bc:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 3c0:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 3c4:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 3c8:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 3cc:	80 81       	ld	r24, Z
 3ce:	8c 32       	cpi	r24, 0x2C	; 44
 3d0:	a1 f3       	breq	.-24     	; 0x3ba <start_song+0x292>
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <start_song+0x2b6>
 3d4:	31 96       	adiw	r30, 0x01	; 1
 3d6:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 3da:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 3de:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 3e2:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 3e6:	80 81       	ld	r24, Z
 3e8:	8c 32       	cpi	r24, 0x2C	; 44
 3ea:	a1 f3       	breq	.-24     	; 0x3d4 <start_song+0x2ac>
 3ec:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 3f0:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 3f4:	80 81       	ld	r24, Z
 3f6:	8a 33       	cpi	r24, 0x3A	; 58
 3f8:	09 f0       	breq	.+2      	; 0x3fc <start_song+0x2d4>
 3fa:	b9 ce       	rjmp	.-654    	; 0x16e <start_song+0x46>
 3fc:	31 96       	adiw	r30, 0x01	; 1
 3fe:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 402:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 406:	08 95       	ret

00000408 <play_song>:
 408:	0f 93       	push	r16
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 412:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 416:	80 81       	ld	r24, Z
 418:	88 23       	and	r24, r24
 41a:	09 f4       	brne	.+2      	; 0x41e <play_song+0x16>
 41c:	27 c1       	rjmp	.+590    	; 0x66c <play_song+0x264>
 41e:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <is_song_playing>
 422:	88 23       	and	r24, r24
 424:	09 f4       	brne	.+2      	; 0x428 <play_song+0x20>
 426:	22 c1       	rjmp	.+580    	; 0x66c <play_song+0x264>
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 42e:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <octave>
 432:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <temp_octave>
 436:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <duration>
 43a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <temp_duration>
 43e:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <dot_flag>
 442:	80 81       	ld	r24, Z
 444:	80 33       	cpi	r24, 0x30	; 48
 446:	18 f1       	brcs	.+70     	; 0x48e <play_song+0x86>
 448:	80 81       	ld	r24, Z
 44a:	8a 33       	cpi	r24, 0x3A	; 58
 44c:	00 f5       	brcc	.+64     	; 0x48e <play_song+0x86>
 44e:	df 01       	movw	r26, r30
 450:	8d 91       	ld	r24, X+
 452:	80 53       	subi	r24, 0x30	; 48
 454:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <temp_duration>
 458:	b0 93 60 06 	sts	0x0660, r27	; 0x800660 <song+0x1>
 45c:	a0 93 5f 06 	sts	0x065F, r26	; 0x80065f <song>
 460:	81 81       	ldd	r24, Z+1	; 0x01
 462:	80 33       	cpi	r24, 0x30	; 48
 464:	a0 f0       	brcs	.+40     	; 0x48e <play_song+0x86>
 466:	81 81       	ldd	r24, Z+1	; 0x01
 468:	8a 33       	cpi	r24, 0x3A	; 58
 46a:	88 f4       	brcc	.+34     	; 0x48e <play_song+0x86>
 46c:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <temp_duration>
 470:	91 81       	ldd	r25, Z+1	; 0x01
 472:	88 0f       	add	r24, r24
 474:	28 2f       	mov	r18, r24
 476:	22 0f       	add	r18, r18
 478:	22 0f       	add	r18, r18
 47a:	82 0f       	add	r24, r18
 47c:	89 0f       	add	r24, r25
 47e:	80 53       	subi	r24, 0x30	; 48
 480:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <temp_duration>
 484:	11 96       	adiw	r26, 0x01	; 1
 486:	b0 93 60 06 	sts	0x0660, r27	; 0x800660 <song+0x1>
 48a:	a0 93 5f 06 	sts	0x065F, r26	; 0x80065f <song>
 48e:	c0 91 5f 06 	lds	r28, 0x065F	; 0x80065f <song>
 492:	d0 91 60 06 	lds	r29, 0x0660	; 0x800660 <song+0x1>
 496:	e8 81       	ld	r30, Y
 498:	8e 2f       	mov	r24, r30
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	fc 01       	movw	r30, r24
 49e:	e1 56       	subi	r30, 0x61	; 97
 4a0:	f1 09       	sbc	r31, r1
 4a2:	e0 31       	cpi	r30, 0x10	; 16
 4a4:	f1 05       	cpc	r31, r1
 4a6:	10 f5       	brcc	.+68     	; 0x4ec <play_song+0xe4>
 4a8:	ec 5c       	subi	r30, 0xCC	; 204
 4aa:	ff 4f       	sbci	r31, 0xFF	; 255
 4ac:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__tablejump2__>
 4b0:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <current_note>
 4b4:	1b c0       	rjmp	.+54     	; 0x4ec <play_song+0xe4>
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4bc:	17 c0       	rjmp	.+46     	; 0x4ec <play_song+0xe4>
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4c4:	13 c0       	rjmp	.+38     	; 0x4ec <play_song+0xe4>
 4c6:	85 e0       	ldi	r24, 0x05	; 5
 4c8:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4cc:	0f c0       	rjmp	.+30     	; 0x4ec <play_song+0xe4>
 4ce:	87 e0       	ldi	r24, 0x07	; 7
 4d0:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4d4:	0b c0       	rjmp	.+22     	; 0x4ec <play_song+0xe4>
 4d6:	89 e0       	ldi	r24, 0x09	; 9
 4d8:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4dc:	07 c0       	rjmp	.+14     	; 0x4ec <play_song+0xe4>
 4de:	8b e0       	ldi	r24, 0x0B	; 11
 4e0:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <play_song+0xe4>
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_note>
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <song+0x1>
 4f4:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <song>
 4f8:	29 81       	ldd	r18, Y+1	; 0x01
 4fa:	23 32       	cpi	r18, 0x23	; 35
 4fc:	51 f4       	brne	.+20     	; 0x512 <play_song+0x10a>
 4fe:	20 91 5e 06 	lds	r18, 0x065E	; 0x80065e <current_note>
 502:	2f 5f       	subi	r18, 0xFF	; 255
 504:	20 93 5e 06 	sts	0x065E, r18	; 0x80065e <current_note>
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <song+0x1>
 50e:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <song>
 512:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 516:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 51a:	80 81       	ld	r24, Z
 51c:	8e 32       	cpi	r24, 0x2E	; 46
 51e:	41 f4       	brne	.+16     	; 0x530 <play_song+0x128>
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <dot_flag>
 526:	31 96       	adiw	r30, 0x01	; 1
 528:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 52c:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 530:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 534:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 538:	80 81       	ld	r24, Z
 53a:	80 33       	cpi	r24, 0x30	; 48
 53c:	58 f0       	brcs	.+22     	; 0x554 <play_song+0x14c>
 53e:	80 81       	ld	r24, Z
 540:	8a 33       	cpi	r24, 0x3A	; 58
 542:	40 f4       	brcc	.+16     	; 0x554 <play_song+0x14c>
 544:	81 91       	ld	r24, Z+
 546:	80 53       	subi	r24, 0x30	; 48
 548:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <temp_octave>
 54c:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 550:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 554:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 558:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 55c:	80 81       	ld	r24, Z
 55e:	8e 32       	cpi	r24, 0x2E	; 46
 560:	71 f4       	brne	.+28     	; 0x57e <play_song+0x176>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <dot_flag>
 568:	31 96       	adiw	r30, 0x01	; 1
 56a:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 56e:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 572:	05 c0       	rjmp	.+10     	; 0x57e <play_song+0x176>
 574:	31 96       	adiw	r30, 0x01	; 1
 576:	f0 93 60 06 	sts	0x0660, r31	; 0x800660 <song+0x1>
 57a:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <song>
 57e:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <song>
 582:	f0 91 60 06 	lds	r31, 0x0660	; 0x800660 <song+0x1>
 586:	80 81       	ld	r24, Z
 588:	8c 32       	cpi	r24, 0x2C	; 44
 58a:	a1 f3       	breq	.-24     	; 0x574 <play_song+0x16c>
 58c:	20 91 5c 06 	lds	r18, 0x065C	; 0x80065c <tempo>
 590:	30 91 5d 06 	lds	r19, 0x065D	; 0x80065d <tempo+0x1>
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	50 e0       	ldi	r21, 0x00	; 0
 598:	60 e6       	ldi	r22, 0x60	; 96
 59a:	7a ee       	ldi	r23, 0xEA	; 234
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divmodsi4>
 5a4:	ca 01       	movw	r24, r20
 5a6:	b9 01       	movw	r22, r18
 5a8:	00 91 65 06 	lds	r16, 0x0665	; 0x800665 <temp_duration>
 5ac:	20 2f       	mov	r18, r16
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divmodsi4>
 5b8:	30 93 68 06 	sts	0x0668, r19	; 0x800668 <calc_duration+0x1>
 5bc:	20 93 67 06 	sts	0x0667, r18	; 0x800667 <calc_duration>
 5c0:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <calc_duration>
 5c4:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <calc_duration+0x1>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	90 93 68 06 	sts	0x0668, r25	; 0x800668 <calc_duration+0x1>
 5d4:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <calc_duration>
 5d8:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <dot_flag>
 5dc:	88 23       	and	r24, r24
 5de:	79 f0       	breq	.+30     	; 0x5fe <play_song+0x1f6>
 5e0:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <calc_duration>
 5e4:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <calc_duration+0x1>
 5e8:	9c 01       	movw	r18, r24
 5ea:	22 0f       	add	r18, r18
 5ec:	33 1f       	adc	r19, r19
 5ee:	82 0f       	add	r24, r18
 5f0:	93 1f       	adc	r25, r19
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	90 93 68 06 	sts	0x0668, r25	; 0x800668 <calc_duration+0x1>
 5fa:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <calc_duration>
 5fe:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_note>
 602:	8f 3f       	cpi	r24, 0xFF	; 255
 604:	f1 f0       	breq	.+60     	; 0x642 <play_song+0x23a>
 606:	60 91 67 06 	lds	r22, 0x0667	; 0x800667 <calc_duration>
 60a:	70 91 68 06 	lds	r23, 0x0668	; 0x800668 <calc_duration+0x1>
 60e:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <temp_octave>
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	04 97       	sbiw	r24, 0x04	; 4
 616:	20 91 5e 06 	lds	r18, 0x065E	; 0x80065e <current_note>
 61a:	fc 01       	movw	r30, r24
 61c:	ee 0f       	add	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	e8 0f       	add	r30, r24
 622:	f9 1f       	adc	r31, r25
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	e2 0f       	add	r30, r18
 62e:	f1 1d       	adc	r31, r1
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	e0 5f       	subi	r30, 0xF0	; 240
 636:	fe 4f       	sbci	r31, 0xFE	; 254
 638:	80 81       	ld	r24, Z
 63a:	91 81       	ldd	r25, Z+1	; 0x01
 63c:	0e 94 63 00 	call	0xc6	; 0xc6 <sound>
 640:	0e c0       	rjmp	.+28     	; 0x65e <play_song+0x256>
 642:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <calc_duration>
 646:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <calc_duration+0x1>
 64a:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <duration_timer+0x1>
 64e:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <duration_timer>
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	90 93 59 06 	sts	0x0659, r25	; 0x800659 <sound_playing+0x1>
 65a:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <sound_playing>
 65e:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <sound_playing>
 662:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <sound_playing+0x1>
 666:	89 2b       	or	r24, r25
 668:	d1 f7       	brne	.-12     	; 0x65e <play_song+0x256>
 66a:	02 c0       	rjmp	.+4      	; 0x670 <play_song+0x268>
 66c:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <is_song_playing>
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	0f 91       	pop	r16
 676:	08 95       	ret

00000678 <AUDIO_get_songs_menu>:
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	08 95       	ret

0000067e <set_song>:
 67e:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <__data_end>
 682:	e8 2f       	mov	r30, r24
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	e8 5f       	subi	r30, 0xF8	; 248
 68c:	fe 4f       	sbci	r31, 0xFE	; 254
 68e:	80 81       	ld	r24, Z
 690:	91 81       	ldd	r25, Z+1	; 0x01
 692:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <song+0x1>
 696:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <song>
 69a:	08 95       	ret

0000069c <set_duration_timer>:
 69c:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <duration_timer+0x1>
 6a0:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <duration_timer>
 6a4:	08 95       	ret

000006a6 <set_sound_playing>:
 6a6:	90 93 59 06 	sts	0x0659, r25	; 0x800659 <sound_playing+0x1>
 6aa:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <sound_playing>
 6ae:	08 95       	ret

000006b0 <get_duration_timer>:
 6b0:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <duration_timer>
 6b4:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <duration_timer+0x1>
 6b8:	08 95       	ret

000006ba <get_is_song_playing>:

unsigned char get_is_song_playing(){
	return is_song_playing;
 6ba:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <is_song_playing>
}
 6be:	08 95       	ret

000006c0 <get_song_playing>:

char *get_song_playing(){
	return songs_menu[current_song];
 6c0:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <__data_end>
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e0 50       	subi	r30, 0x00	; 0
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
}
 6ce:	80 81       	ld	r24, Z
 6d0:	91 81       	ldd	r25, Z+1	; 0x01
 6d2:	08 95       	ret

000006d4 <sleep>:

// @brief	Duerme al CPU en SLEEP_MODE_IDLE (permite interrupciones de la UART y de los TIMER0,1)
// @param	void
// @return	void
void sleep(){
	set_sleep_mode(SLEEP_MODE_IDLE);
 6d4:	83 b7       	in	r24, 0x33	; 51
 6d6:	81 7f       	andi	r24, 0xF1	; 241
 6d8:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	81 60       	ori	r24, 0x01	; 1
 6de:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 6e0:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 6e2:	83 b7       	in	r24, 0x33	; 51
 6e4:	8e 7f       	andi	r24, 0xFE	; 254
 6e6:	83 bf       	out	0x33, r24	; 51
 6e8:	08 95       	ret

000006ea <main>:
#include "functions/functions.h"

int main(void)
{
	// Configuracion de los TIMERs 0,1 para la reproduccion de audio
	TIMER0_Init();
 6ea:	0e 94 26 05 	call	0xa4c	; 0xa4c <TIMER0_Init>
	TIMER1_Init();
 6ee:	0e 94 2f 05 	call	0xa5e	; 0xa5e <TIMER1_Init>

	// Inicializacion de los buffers de recepcion y transmision de la UART
	UART_Buffer_Init();
 6f2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <UART_Buffer_Init>

	// Inicializacion y configuracion del periferco UART para transmision serie
	SerialPort_Init(103);					// 9600 baudios para 16MHz
 6f6:	87 e6       	ldi	r24, 0x67	; 103
 6f8:	0e 94 c8 04 	call	0x990	; 0x990 <SerialPort_Init>
	SerialPort_TX_Enable();
 6fc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 700:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 704:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SerialPort_RX_Interrupt_Enable>

	// Menu de inicio del sistema
	MENU_display_welcome();
 708:	0e 94 de 03 	call	0x7bc	; 0x7bc <MENU_display_welcome>

	// Activacion global de interrupciones
	sei();
 70c:	78 94       	sei
	// Bucle principal (TAREAS EN FOREGROUND)
	while(1){

		// Tarea para la lectura de palabras del buffer de recepcion
		
		if (UART_get_words_counter() > 0) {
 70e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <UART_get_words_counter>
 712:	89 2b       	or	r24, r25
 714:	49 f0       	breq	.+18     	; 0x728 <main+0x3e>

			SerialPort_RX_Interrupt_Disable();
 716:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SerialPort_RX_Interrupt_Disable>
			UART_dec_words_counter();			// Seccion critica
 71a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UART_dec_words_counter>
			SerialPort_RX_Interrupt_Enable();
 71e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SerialPort_RX_Interrupt_Enable>

			MENU_process_inpt();
 722:	0e 94 a1 04 	call	0x942	; 0x942 <MENU_process_inpt>
 726:	06 c0       	rjmp	.+12     	; 0x734 <main+0x4a>
		}
		// Tarea para la reproduccion de una nota de la cancions
		else if (get_is_song_playing() == 1){
 728:	0e 94 5d 03 	call	0x6ba	; 0x6ba <get_is_song_playing>
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	11 f4       	brne	.+4      	; 0x734 <main+0x4a>
			play_song();
 730:	0e 94 04 02 	call	0x408	; 0x408 <play_song>
		}

		// Se duerme el CPU hasta la proxima interrupcion (IDLE_MODE)
		sleep();
 734:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <sleep>

	}
 738:	ea cf       	rjmp	.-44     	; 0x70e <main+0x24>

0000073a <MENU_display_songs>:
const char msjPlay[] = "    ==> PLAY: Reproduce la cancion seleccionada";
const char msjStop[] = "    ==> STOP: Detiene la reproduccion del sonido en curso";
const char msjNum[] = "    ==> NUM: Numero de cancion a seleccionar de la lista [1 a N]";
const char msjReset[] = "    ==> RESET: Reinicia el sistema al estado inicial\n";

void MENU_display_songs(void){
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
	UART_Write_String_To_Buffer(msjSongs);
 742:	84 e2       	ldi	r24, 0x24	; 36
 744:	96 e0       	ldi	r25, 0x06	; 6
 746:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>

	const char ** songs = AUDIO_get_songs_menu();
 74a:	0e 94 3c 03 	call	0x678	; 0x678 <AUDIO_get_songs_menu>
 74e:	8c 01       	movw	r16, r24
	for (int i = 0; i < CANT_SONGS; i++){
 750:	c0 e0       	ldi	r28, 0x00	; 0
 752:	d0 e0       	ldi	r29, 0x00	; 0
 754:	16 c0       	rjmp	.+44     	; 0x782 <MENU_display_songs+0x48>
		UART_Write_String_To_Buffer_No_NewLine("	");
 756:	83 e2       	ldi	r24, 0x23	; 35
 758:	94 e0       	ldi	r25, 0x04	; 4
 75a:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
		uint8_t n = i+48;
		UART_Write_Char_To_Buffer(n);
 75e:	8c 2f       	mov	r24, r28
 760:	80 5d       	subi	r24, 0xD0	; 208
 762:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_Write_Char_To_Buffer>
		UART_Write_String_To_Buffer_No_NewLine(": ");
 766:	87 e3       	ldi	r24, 0x37	; 55
 768:	94 e0       	ldi	r25, 0x04	; 4
 76a:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
		UART_Write_String_To_Buffer(songs[i]);
 76e:	fe 01       	movw	r30, r28
 770:	ee 0f       	add	r30, r30
 772:	ff 1f       	adc	r31, r31
 774:	e0 0f       	add	r30, r16
 776:	f1 1f       	adc	r31, r17
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>

void MENU_display_songs(void){
	UART_Write_String_To_Buffer(msjSongs);

	const char ** songs = AUDIO_get_songs_menu();
	for (int i = 0; i < CANT_SONGS; i++){
 780:	21 96       	adiw	r28, 0x01	; 1
 782:	c4 30       	cpi	r28, 0x04	; 4
 784:	d1 05       	cpc	r29, r1
 786:	3c f3       	brlt	.-50     	; 0x756 <MENU_display_songs+0x1c>
		uint8_t n = i+48;
		UART_Write_Char_To_Buffer(n);
		UART_Write_String_To_Buffer_No_NewLine(": ");
		UART_Write_String_To_Buffer(songs[i]);
	}
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	08 95       	ret

00000792 <MENU_display_commands>:

void MENU_display_commands(){
	UART_Write_String_To_Buffer(msjCommands);
 792:	8a e1       	ldi	r24, 0x1A	; 26
 794:	96 e0       	ldi	r25, 0x06	; 6
 796:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 79a:	8a ee       	ldi	r24, 0xEA	; 234
 79c:	95 e0       	ldi	r25, 0x05	; 5
 79e:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 7a2:	80 eb       	ldi	r24, 0xB0	; 176
 7a4:	95 e0       	ldi	r25, 0x05	; 5
 7a6:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 7aa:	8f e6       	ldi	r24, 0x6F	; 111
 7ac:	95 e0       	ldi	r25, 0x05	; 5
 7ae:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 7b2:	89 e3       	ldi	r24, 0x39	; 57
 7b4:	95 e0       	ldi	r25, 0x05	; 5
 7b6:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
 7ba:	08 95       	ret

000007bc <MENU_display_welcome>:
}

void MENU_display_welcome(){
	UART_Write_String_To_Buffer(msjBienvenida);
 7bc:	8f e2       	ldi	r24, 0x2F	; 47
 7be:	96 e0       	ldi	r25, 0x06	; 6
 7c0:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	MENU_display_songs();
 7c4:	0e 94 9d 03 	call	0x73a	; 0x73a <MENU_display_songs>
	UART_Write_String_To_Buffer_No_NewLine("\n");
 7c8:	85 e6       	ldi	r24, 0x65	; 101
 7ca:	94 e0       	ldi	r25, 0x04	; 4
 7cc:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
	MENU_display_commands();
 7d0:	0e 94 c9 03 	call	0x792	; 0x792 <MENU_display_commands>
 7d4:	08 95       	ret

000007d6 <create_substring>:

}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
 7d6:	cf 92       	push	r12
 7d8:	df 92       	push	r13
 7da:	ef 92       	push	r14
 7dc:	ff 92       	push	r15
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	8c 01       	movw	r16, r24
 7e8:	7b 01       	movw	r14, r22
	uint16_t j = 0;
 7ea:	c0 e0       	ldi	r28, 0x00	; 0
 7ec:	d0 e0       	ldi	r29, 0x00	; 0

	while (buffer->data[buffer->index_lectura] != '\r') {
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		substring[j++] = buffer->data[buffer->index_lectura];
 7f0:	6e 01       	movw	r12, r28
 7f2:	9f ef       	ldi	r25, 0xFF	; 255
 7f4:	c9 1a       	sub	r12, r25
 7f6:	d9 0a       	sbc	r13, r25
 7f8:	ce 0d       	add	r28, r14
 7fa:	df 1d       	adc	r29, r15
 7fc:	88 83       	st	Y, r24
		inc_RX_index_lectura();
 7fe:	0e 94 4b 06 	call	0xc96	; 0xc96 <inc_RX_index_lectura>

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
	uint16_t j = 0;

	while (buffer->data[buffer->index_lectura] != '\r') {
		substring[j++] = buffer->data[buffer->index_lectura];
 802:	e6 01       	movw	r28, r12
}

void create_substring(Buffer_RX* buffer, uint8_t* substring) {
	uint16_t j = 0;

	while (buffer->data[buffer->index_lectura] != '\r') {
 804:	f8 01       	movw	r30, r16
 806:	ea 59       	subi	r30, 0x9A	; 154
 808:	ff 4f       	sbci	r31, 0xFF	; 255
 80a:	01 90       	ld	r0, Z+
 80c:	f0 81       	ld	r31, Z
 80e:	e0 2d       	mov	r30, r0
 810:	e0 0f       	add	r30, r16
 812:	f1 1f       	adc	r31, r17
 814:	80 81       	ld	r24, Z
 816:	8d 30       	cpi	r24, 0x0D	; 13
 818:	59 f7       	brne	.-42     	; 0x7f0 <create_substring+0x1a>
		substring[j++] = buffer->data[buffer->index_lectura];
		inc_RX_index_lectura();
	}
	inc_RX_index_lectura();
 81a:	0e 94 4b 06 	call	0xc96	; 0xc96 <inc_RX_index_lectura>
	inc_RX_index_lectura();
 81e:	0e 94 4b 06 	call	0xc96	; 0xc96 <inc_RX_index_lectura>
	substring[j] = '\0'; // append null character at the end
 822:	ce 0d       	add	r28, r14
 824:	df 1d       	adc	r29, r15
 826:	18 82       	st	Y, r1
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	ff 90       	pop	r15
 832:	ef 90       	pop	r14
 834:	df 90       	pop	r13
 836:	cf 90       	pop	r12
 838:	08 95       	ret

0000083a <MENU_select_option>:


void MENU_select_option(char * inpt){
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	ec 01       	movw	r28, r24
	if (strcmp(inpt, "PLAY") == 0){
 840:	65 e2       	ldi	r22, 0x25	; 37
 842:	74 e0       	ldi	r23, 0x04	; 4
 844:	0e 94 14 07 	call	0xe28	; 0xe28 <strcmp>
 848:	89 2b       	or	r24, r25
 84a:	79 f4       	brne	.+30     	; 0x86a <MENU_select_option+0x30>
		start_song();
 84c:	0e 94 94 00 	call	0x128	; 0x128 <start_song>
		UART_Write_String_To_Buffer_No_NewLine("Reproduciendo: ");
 850:	8a e2       	ldi	r24, 0x2A	; 42
 852:	94 e0       	ldi	r25, 0x04	; 4
 854:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
		UART_Write_String_To_Buffer_No_NewLine(get_song_playing());
 858:	0e 94 60 03 	call	0x6c0	; 0x6c0 <get_song_playing>
 85c:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
		UART_Write_String_To_Buffer("\r\n");
 860:	84 e6       	ldi	r24, 0x64	; 100
 862:	94 e0       	ldi	r25, 0x04	; 4
 864:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
 868:	69 c0       	rjmp	.+210    	; 0x93c <__stack+0x3d>
		
	}
	else if (strncmp(inpt, "NUM", 3) == 0){
 86a:	43 e0       	ldi	r20, 0x03	; 3
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	6a e3       	ldi	r22, 0x3A	; 58
 870:	74 e0       	ldi	r23, 0x04	; 4
 872:	ce 01       	movw	r24, r28
 874:	0e 94 1d 07 	call	0xe3a	; 0xe3a <strncmp>
 878:	89 2b       	or	r24, r25
 87a:	91 f5       	brne	.+100    	; 0x8e0 <MENU_select_option+0xa6>

		if (get_is_song_playing()) {
 87c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <get_is_song_playing>
 880:	88 23       	and	r24, r24
 882:	29 f0       	breq	.+10     	; 0x88e <MENU_select_option+0x54>
			UART_Write_String_To_Buffer("ERROR: Hay una cancion en reproduccion\r\n");
 884:	8e e3       	ldi	r24, 0x3E	; 62
 886:	94 e0       	ldi	r25, 0x04	; 4
 888:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
			return;
 88c:	57 c0       	rjmp	.+174    	; 0x93c <__stack+0x3d>
		}

		// Si el formato es "NUM X"
		if (inpt[3] == ' ' && inpt[5] == '\0') {
 88e:	8b 81       	ldd	r24, Y+3	; 0x03
 890:	80 32       	cpi	r24, 0x20	; 32
 892:	09 f5       	brne	.+66     	; 0x8d6 <MENU_select_option+0x9c>
 894:	8d 81       	ldd	r24, Y+5	; 0x05
 896:	81 11       	cpse	r24, r1
 898:	1e c0       	rjmp	.+60     	; 0x8d6 <MENU_select_option+0x9c>

			// value contiene el valor "X"
			uint8_t value = inpt[4] - '0';
 89a:	8c 81       	ldd	r24, Y+4	; 0x04
 89c:	80 53       	subi	r24, 0x30	; 48

			if (value >= 0 && value < CANT_SONGS){
 89e:	84 30       	cpi	r24, 0x04	; 4
 8a0:	78 f4       	brcc	.+30     	; 0x8c0 <MENU_select_option+0x86>
				set_song(value);
 8a2:	0e 94 3f 03 	call	0x67e	; 0x67e <set_song>
				UART_Write_String_To_Buffer_No_NewLine("Se selecciono: ");
 8a6:	87 e6       	ldi	r24, 0x67	; 103
 8a8:	94 e0       	ldi	r25, 0x04	; 4
 8aa:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
				UART_Write_String_To_Buffer(get_song_playing());
 8ae:	0e 94 60 03 	call	0x6c0	; 0x6c0 <get_song_playing>
 8b2:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
				UART_Write_String_To_Buffer_No_NewLine("\n");
 8b6:	85 e6       	ldi	r24, 0x65	; 101
 8b8:	94 e0       	ldi	r25, 0x04	; 4
 8ba:	0e 94 a0 05 	call	0xb40	; 0xb40 <UART_Write_String_To_Buffer_No_NewLine>
 8be:	3e c0       	rjmp	.+124    	; 0x93c <__stack+0x3d>
			}
			else{
				UART_Write_String_To_Buffer("Ingrese un numero adecuado");
 8c0:	87 e7       	ldi	r24, 0x77	; 119
 8c2:	94 e0       	ldi	r25, 0x04	; 4
 8c4:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
				MENU_display_songs();
 8c8:	0e 94 9d 03 	call	0x73a	; 0x73a <MENU_display_songs>
				UART_Write_String_To_Buffer("\n");
 8cc:	85 e6       	ldi	r24, 0x65	; 101
 8ce:	94 e0       	ldi	r25, 0x04	; 4
 8d0:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
 8d4:	33 c0       	rjmp	.+102    	; 0x93c <__stack+0x3d>
			}
		}
		else {
			// Si el formato no es "NUM X"
			UART_Write_String_To_Buffer("Uso del comando: NUM [numero de cancion]\n");
 8d6:	82 e9       	ldi	r24, 0x92	; 146
 8d8:	94 e0       	ldi	r25, 0x04	; 4
 8da:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
 8de:	2e c0       	rjmp	.+92     	; 0x93c <__stack+0x3d>
		}
	}
	else if (strcmp(inpt, "STOP") == 0){
 8e0:	6c eb       	ldi	r22, 0xBC	; 188
 8e2:	74 e0       	ldi	r23, 0x04	; 4
 8e4:	ce 01       	movw	r24, r28
 8e6:	0e 94 14 07 	call	0xe28	; 0xe28 <strcmp>
 8ea:	89 2b       	or	r24, r25
 8ec:	81 f4       	brne	.+32     	; 0x90e <__stack+0xf>

		if (get_is_song_playing()){
 8ee:	0e 94 5d 03 	call	0x6ba	; 0x6ba <get_is_song_playing>
 8f2:	88 23       	and	r24, r24
 8f4:	29 f0       	breq	.+10     	; 0x900 <__stack+0x1>
			UART_Write_String_To_Buffer("Reproduccion detenida\n");
 8f6:	81 ec       	ldi	r24, 0xC1	; 193
 8f8:	94 e0       	ldi	r25, 0x04	; 4
 8fa:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
		}
		else {
			UART_Write_String_To_Buffer("No hay cancion en reproduccion\n");
 900:	88 ed       	ldi	r24, 0xD8	; 216
 902:	94 e0       	ldi	r25, 0x04	; 4
 904:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
		}
		
		stop_song();
 908:	0e 94 88 00 	call	0x110	; 0x110 <stop_song>
 90c:	17 c0       	rjmp	.+46     	; 0x93c <__stack+0x3d>

	}
	else if (strcmp(inpt, "RESET") == 0){
 90e:	68 ef       	ldi	r22, 0xF8	; 248
 910:	74 e0       	ldi	r23, 0x04	; 4
 912:	ce 01       	movw	r24, r28
 914:	0e 94 14 07 	call	0xe28	; 0xe28 <strcmp>
 918:	89 2b       	or	r24, r25
 91a:	61 f4       	brne	.+24     	; 0x934 <__stack+0x35>
		UART_Write_String_To_Buffer("Reestableciendo el sistema\n");
 91c:	8e ef       	ldi	r24, 0xFE	; 254
 91e:	94 e0       	ldi	r25, 0x04	; 4
 920:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
		stop_song();
 924:	0e 94 88 00 	call	0x110	; 0x110 <stop_song>
		set_song(0);
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	0e 94 3f 03 	call	0x67e	; 0x67e <set_song>
		sei();
		UART_Write_String_To_Buffer("RESETTING system\n");
		*/
		// Reimprime el menu
		
		MENU_display_welcome();
 92e:	0e 94 de 03 	call	0x7bc	; 0x7bc <MENU_display_welcome>
 932:	04 c0       	rjmp	.+8      	; 0x93c <__stack+0x3d>

	}
	else{
		UART_Write_String_To_Buffer("ERROR: Comando no encontrado\r\n");
 934:	8a e1       	ldi	r24, 0x1A	; 26
 936:	95 e0       	ldi	r25, 0x05	; 5
 938:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	}
}
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <MENU_process_inpt>:

void MENU_process_inpt(){
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	c4 56       	subi	r28, 0x64	; 100
 94c:	d1 09       	sbc	r29, r1
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
	uint8_t substring[BUFFER_RX_LEN];

	create_substring(get_RX_data(), substring);
 958:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <get_RX_data>
 95c:	be 01       	movw	r22, r28
 95e:	6f 5f       	subi	r22, 0xFF	; 255
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <create_substring>
	UART_Write_String_To_Buffer(substring);
 966:	ce 01       	movw	r24, r28
 968:	01 96       	adiw	r24, 0x01	; 1
 96a:	0e 94 87 05 	call	0xb0e	; 0xb0e <UART_Write_String_To_Buffer>
	if (strcmp(substring, "")){
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	88 23       	and	r24, r24
 972:	21 f0       	breq	.+8      	; 0x97c <MENU_process_inpt+0x3a>
		MENU_select_option(substring);
 974:	ce 01       	movw	r24, r28
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	0e 94 1d 04 	call	0x83a	; 0x83a <MENU_select_option>
	}
}
 97c:	cc 59       	subi	r28, 0x9C	; 156
 97e:	df 4f       	sbci	r29, 0xFF	; 255
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	f8 94       	cli
 984:	de bf       	out	0x3e, r29	; 62
 986:	0f be       	out	0x3f, r0	; 63
 988:	cd bf       	out	0x3d, r28	; 61
 98a:	df 91       	pop	r29
 98c:	cf 91       	pop	r28
 98e:	08 95       	ret

00000990 <SerialPort_Init>:
// Inicializaci�n de Puerto Serie

void SerialPort_Init(uint8_t config){
	// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
	// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
	UCSR0B = 0;
 990:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 994:	96 e0       	ldi	r25, 0x06	; 6
 996:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = (unsigned char)(config>>8);
 99a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)config;
 99e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 9a2:	08 95       	ret

000009a4 <SerialPort_TX_Enable>:


// Inicializaci�n de Transmisor

void SerialPort_TX_Enable(void){
	UCSR0B |= (1<<TXEN0);
 9a4:	e1 ec       	ldi	r30, 0xC1	; 193
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	88 60       	ori	r24, 0x08	; 8
 9ac:	80 83       	st	Z, r24
 9ae:	08 95       	ret

000009b0 <SerialPort_TX_Interrupt_Enable>:
}

void SerialPort_TX_Interrupt_Enable(void){
	UCSR0B |= (1<<UDRIE0);
 9b0:	e1 ec       	ldi	r30, 0xC1	; 193
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	80 81       	ld	r24, Z
 9b6:	80 62       	ori	r24, 0x20	; 32
 9b8:	80 83       	st	Z, r24
 9ba:	08 95       	ret

000009bc <SerialPort_TX_Interrupt_Disable>:
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 9bc:	e1 ec       	ldi	r30, 0xC1	; 193
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	80 81       	ld	r24, Z
 9c2:	8f 7d       	andi	r24, 0xDF	; 223
 9c4:	80 83       	st	Z, r24
 9c6:	08 95       	ret

000009c8 <SerialPort_RX_Enable>:


// Inicializaci�n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 9c8:	e1 ec       	ldi	r30, 0xC1	; 193
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	80 81       	ld	r24, Z
 9ce:	80 61       	ori	r24, 0x10	; 16
 9d0:	80 83       	st	Z, r24
 9d2:	08 95       	ret

000009d4 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 9d4:	e1 ec       	ldi	r30, 0xC1	; 193
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	80 68       	ori	r24, 0x80	; 128
 9dc:	80 83       	st	Z, r24
 9de:	08 95       	ret

000009e0 <SerialPort_RX_Interrupt_Disable>:
}

void SerialPort_RX_Interrupt_Disable(void){
	UCSR0B &=~(1<<RXCIE0);
 9e0:	e1 ec       	ldi	r30, 0xC1	; 193
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	8f 77       	andi	r24, 0x7F	; 127
 9e8:	80 83       	st	Z, r24
 9ea:	08 95       	ret

000009ec <__vector_14>:

#include "TIMER0.h"

// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	3f 93       	push	r19
 9fa:	4f 93       	push	r20
 9fc:	5f 93       	push	r21
 9fe:	6f 93       	push	r22
 a00:	7f 93       	push	r23
 a02:	8f 93       	push	r24
 a04:	9f 93       	push	r25
 a06:	af 93       	push	r26
 a08:	bf 93       	push	r27
 a0a:	ef 93       	push	r30
 a0c:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
 a0e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <get_duration_timer>
	if (duration_timer) {
 a12:	00 97       	sbiw	r24, 0x00	; 0
 a14:	21 f0       	breq	.+8      	; 0xa1e <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
 a16:	01 97       	sbiw	r24, 0x01	; 1
 a18:	0e 94 4e 03 	call	0x69c	; 0x69c <set_duration_timer>
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
 a1e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 53 03 	call	0x6a6	; 0x6a6 <set_sound_playing>
	}
}
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	0f 90       	pop	r0
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	0f 90       	pop	r0
 a48:	1f 90       	pop	r1
 a4a:	18 95       	reti

00000a4c <TIMER0_Init>:

void TIMER0_Init(){
	// Configuro una interrupci?n cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
 a4c:	88 ef       	ldi	r24, 0xF8	; 248
 a4e:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 a50:	82 e0       	ldi	r24, 0x02	; 2
 a52:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 a54:	93 e0       	ldi	r25, 0x03	; 3
 a56:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci?n de comparaci?n
 a58:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 a5c:	08 95       	ret

00000a5e <TIMER1_Init>:

#include "TIMER1.h"

void TIMER1_Init(){
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
 a5e:	e0 e8       	ldi	r30, 0x80	; 128
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	80 64       	ori	r24, 0x40	; 64
 a66:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 a68:	e1 e8       	ldi	r30, 0x81	; 129
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	89 60       	ori	r24, 0x09	; 9
 a70:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB ser? el pin de salida
 a72:	84 b1       	in	r24, 0x04	; 4
 a74:	82 60       	ori	r24, 0x02	; 2
 a76:	84 b9       	out	0x04, r24	; 4
 a78:	08 95       	ret

00000a7a <UART_Buffer_Init>:
	RX_buffer.index_lectura = (RX_buffer.index_lectura+1)%BUFFER_RX_LEN;
}

void inc_TX_index_escritura (void)
{
	TX_buffer.index_escritura = (TX_buffer.index_escritura+1)%BUFFER_TX_LEN;
 a7a:	10 92 5f 08 	sts	0x085F, r1	; 0x80085f <TX_buffer+0x1f5>
 a7e:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <TX_buffer+0x1f4>
 a82:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <TX_buffer+0x1f7>
 a86:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <TX_buffer+0x1f6>
 a8a:	10 92 c7 08 	sts	0x08C7, r1	; 0x8008c7 <RX_buffer+0x65>
 a8e:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <RX_buffer+0x64>
 a92:	10 92 c9 08 	sts	0x08C9, r1	; 0x8008c9 <RX_buffer+0x67>
 a96:	10 92 c8 08 	sts	0x08C8, r1	; 0x8008c8 <RX_buffer+0x66>
 a9a:	08 95       	ret

00000a9c <UART_Write_Char_To_Buffer>:
 a9c:	cf 93       	push	r28
 a9e:	c8 2f       	mov	r28, r24
 aa0:	40 91 5e 08 	lds	r20, 0x085E	; 0x80085e <TX_buffer+0x1f4>
 aa4:	50 91 5f 08 	lds	r21, 0x085F	; 0x80085f <TX_buffer+0x1f5>
 aa8:	fa 01       	movw	r30, r20
 aaa:	31 96       	adiw	r30, 0x01	; 1
 aac:	9f 01       	movw	r18, r30
 aae:	36 95       	lsr	r19
 ab0:	27 95       	ror	r18
 ab2:	36 95       	lsr	r19
 ab4:	27 95       	ror	r18
 ab6:	a5 ec       	ldi	r26, 0xC5	; 197
 ab8:	b0 e2       	ldi	r27, 0x20	; 32
 aba:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__umulhisi3>
 abe:	92 95       	swap	r25
 ac0:	82 95       	swap	r24
 ac2:	8f 70       	andi	r24, 0x0F	; 15
 ac4:	89 27       	eor	r24, r25
 ac6:	9f 70       	andi	r25, 0x0F	; 15
 ac8:	89 27       	eor	r24, r25
 aca:	64 ef       	ldi	r22, 0xF4	; 244
 acc:	71 e0       	ldi	r23, 0x01	; 1
 ace:	86 9f       	mul	r24, r22
 ad0:	90 01       	movw	r18, r0
 ad2:	87 9f       	mul	r24, r23
 ad4:	30 0d       	add	r19, r0
 ad6:	96 9f       	mul	r25, r22
 ad8:	30 0d       	add	r19, r0
 ada:	11 24       	eor	r1, r1
 adc:	cf 01       	movw	r24, r30
 ade:	82 1b       	sub	r24, r18
 ae0:	93 0b       	sbc	r25, r19
 ae2:	20 91 60 08 	lds	r18, 0x0860	; 0x800860 <TX_buffer+0x1f6>
 ae6:	30 91 61 08 	lds	r19, 0x0861	; 0x800861 <TX_buffer+0x1f7>
 aea:	82 17       	cp	r24, r18
 aec:	93 07       	cpc	r25, r19
 aee:	61 f0       	breq	.+24     	; 0xb08 <UART_Write_Char_To_Buffer+0x6c>
 af0:	fa 01       	movw	r30, r20
 af2:	e6 59       	subi	r30, 0x96	; 150
 af4:	f9 4f       	sbci	r31, 0xF9	; 249
 af6:	c0 83       	st	Z, r28
 af8:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <TX_buffer+0x1f5>
 afc:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <TX_buffer+0x1f4>
 b00:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <SerialPort_TX_Interrupt_Enable>
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <UART_Write_Char_To_Buffer+0x6e>
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

00000b0e <UART_Write_String_To_Buffer>:
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	8c 01       	movw	r16, r24
 b16:	c0 e0       	ldi	r28, 0x00	; 0
 b18:	03 c0       	rjmp	.+6      	; 0xb20 <UART_Write_String_To_Buffer+0x12>
 b1a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_Write_Char_To_Buffer>
 b1e:	cf 5f       	subi	r28, 0xFF	; 255
 b20:	f8 01       	movw	r30, r16
 b22:	ec 0f       	add	r30, r28
 b24:	f1 1d       	adc	r31, r1
 b26:	80 81       	ld	r24, Z
 b28:	81 11       	cpse	r24, r1
 b2a:	f7 cf       	rjmp	.-18     	; 0xb1a <UART_Write_String_To_Buffer+0xc>
 b2c:	8d e0       	ldi	r24, 0x0D	; 13
 b2e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_Write_Char_To_Buffer>
 b32:	8a e0       	ldi	r24, 0x0A	; 10
 b34:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_Write_Char_To_Buffer>
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	08 95       	ret

00000b40 <UART_Write_String_To_Buffer_No_NewLine>:
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	8c 01       	movw	r16, r24
 b48:	c0 e0       	ldi	r28, 0x00	; 0
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <UART_Write_String_To_Buffer_No_NewLine+0x12>
 b4c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <UART_Write_Char_To_Buffer>
 b50:	cf 5f       	subi	r28, 0xFF	; 255
 b52:	f8 01       	movw	r30, r16
 b54:	ec 0f       	add	r30, r28
 b56:	f1 1d       	adc	r31, r1
 b58:	80 81       	ld	r24, Z
 b5a:	81 11       	cpse	r24, r1
 b5c:	f7 cf       	rjmp	.-18     	; 0xb4c <UART_Write_String_To_Buffer_No_NewLine+0xc>
 b5e:	cf 91       	pop	r28
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	08 95       	ret

00000b66 <TX_buffer_is_full>:
 b66:	40 91 60 08 	lds	r20, 0x0860	; 0x800860 <TX_buffer+0x1f6>
 b6a:	50 91 61 08 	lds	r21, 0x0861	; 0x800861 <TX_buffer+0x1f7>
 b6e:	e0 91 5e 08 	lds	r30, 0x085E	; 0x80085e <TX_buffer+0x1f4>
 b72:	f0 91 5f 08 	lds	r31, 0x085F	; 0x80085f <TX_buffer+0x1f5>
 b76:	9a 01       	movw	r18, r20
 b78:	36 95       	lsr	r19
 b7a:	27 95       	ror	r18
 b7c:	36 95       	lsr	r19
 b7e:	27 95       	ror	r18
 b80:	a5 ec       	ldi	r26, 0xC5	; 197
 b82:	b0 e2       	ldi	r27, 0x20	; 32
 b84:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__umulhisi3>
 b88:	92 95       	swap	r25
 b8a:	82 95       	swap	r24
 b8c:	8f 70       	andi	r24, 0x0F	; 15
 b8e:	89 27       	eor	r24, r25
 b90:	9f 70       	andi	r25, 0x0F	; 15
 b92:	89 27       	eor	r24, r25
 b94:	64 ef       	ldi	r22, 0xF4	; 244
 b96:	71 e0       	ldi	r23, 0x01	; 1
 b98:	86 9f       	mul	r24, r22
 b9a:	90 01       	movw	r18, r0
 b9c:	87 9f       	mul	r24, r23
 b9e:	30 0d       	add	r19, r0
 ba0:	96 9f       	mul	r25, r22
 ba2:	30 0d       	add	r19, r0
 ba4:	11 24       	eor	r1, r1
 ba6:	42 1b       	sub	r20, r18
 ba8:	53 0b       	sbc	r21, r19
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	4e 17       	cp	r20, r30
 bae:	5f 07       	cpc	r21, r31
 bb0:	09 f0       	breq	.+2      	; 0xbb4 <TX_buffer_is_full+0x4e>
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	08 95       	ret

00000bb6 <UART_get_words_counter>:
 bb6:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <words_counter>
 bba:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <words_counter+0x1>
 bbe:	08 95       	ret

00000bc0 <UART_dec_words_counter>:
 bc0:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <words_counter>
 bc4:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <words_counter+0x1>
 bc8:	01 97       	sbiw	r24, 0x01	; 1
 bca:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <words_counter+0x1>
 bce:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <words_counter>
 bd2:	08 95       	ret

00000bd4 <get_RX_data>:
 bd4:	82 e6       	ldi	r24, 0x62	; 98
 bd6:	98 e0       	ldi	r25, 0x08	; 8
 bd8:	08 95       	ret

00000bda <set_RX_data_UDR0>:
 bda:	e0 91 c6 08 	lds	r30, 0x08C6	; 0x8008c6 <RX_buffer+0x64>
 bde:	f0 91 c7 08 	lds	r31, 0x08C7	; 0x8008c7 <RX_buffer+0x65>
 be2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 be6:	ee 59       	subi	r30, 0x9E	; 158
 be8:	f7 4f       	sbci	r31, 0xF7	; 247
 bea:	80 83       	st	Z, r24
 bec:	08 95       	ret

00000bee <inc_RX_index_escritura>:
 bee:	e6 ec       	ldi	r30, 0xC6	; 198
 bf0:	f8 e0       	ldi	r31, 0x08	; 8
 bf2:	40 81       	ld	r20, Z
 bf4:	51 81       	ldd	r21, Z+1	; 0x01
 bf6:	4f 5f       	subi	r20, 0xFF	; 255
 bf8:	5f 4f       	sbci	r21, 0xFF	; 255
 bfa:	9a 01       	movw	r18, r20
 bfc:	36 95       	lsr	r19
 bfe:	27 95       	ror	r18
 c00:	36 95       	lsr	r19
 c02:	27 95       	ror	r18
 c04:	ab e7       	ldi	r26, 0x7B	; 123
 c06:	b4 e1       	ldi	r27, 0x14	; 20
 c08:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__umulhisi3>
 c0c:	96 95       	lsr	r25
 c0e:	87 95       	ror	r24
 c10:	64 e6       	ldi	r22, 0x64	; 100
 c12:	68 9f       	mul	r22, r24
 c14:	90 01       	movw	r18, r0
 c16:	69 9f       	mul	r22, r25
 c18:	30 0d       	add	r19, r0
 c1a:	11 24       	eor	r1, r1
 c1c:	42 1b       	sub	r20, r18
 c1e:	53 0b       	sbc	r21, r19
 c20:	51 83       	std	Z+1, r21	; 0x01
 c22:	40 83       	st	Z, r20
 c24:	08 95       	ret

00000c26 <__vector_18>:
 c26:	1f 92       	push	r1
 c28:	0f 92       	push	r0
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	0f 92       	push	r0
 c2e:	11 24       	eor	r1, r1
 c30:	2f 93       	push	r18
 c32:	3f 93       	push	r19
 c34:	4f 93       	push	r20
 c36:	5f 93       	push	r21
 c38:	6f 93       	push	r22
 c3a:	7f 93       	push	r23
 c3c:	8f 93       	push	r24
 c3e:	9f 93       	push	r25
 c40:	af 93       	push	r26
 c42:	bf 93       	push	r27
 c44:	ef 93       	push	r30
 c46:	ff 93       	push	r31
 c48:	0e 94 ed 05 	call	0xbda	; 0xbda <set_RX_data_UDR0>
 c4c:	e0 91 c6 08 	lds	r30, 0x08C6	; 0x8008c6 <RX_buffer+0x64>
 c50:	f0 91 c7 08 	lds	r31, 0x08C7	; 0x8008c7 <RX_buffer+0x65>
 c54:	ee 59       	subi	r30, 0x9E	; 158
 c56:	f7 4f       	sbci	r31, 0xF7	; 247
 c58:	80 81       	ld	r24, Z
 c5a:	8a 30       	cpi	r24, 0x0A	; 10
 c5c:	49 f4       	brne	.+18     	; 0xc70 <__vector_18+0x4a>
 c5e:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <words_counter>
 c62:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <words_counter+0x1>
 c66:	01 96       	adiw	r24, 0x01	; 1
 c68:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <words_counter+0x1>
 c6c:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <words_counter>
 c70:	0e 94 f7 05 	call	0xbee	; 0xbee <inc_RX_index_escritura>
 c74:	ff 91       	pop	r31
 c76:	ef 91       	pop	r30
 c78:	bf 91       	pop	r27
 c7a:	af 91       	pop	r26
 c7c:	9f 91       	pop	r25
 c7e:	8f 91       	pop	r24
 c80:	7f 91       	pop	r23
 c82:	6f 91       	pop	r22
 c84:	5f 91       	pop	r21
 c86:	4f 91       	pop	r20
 c88:	3f 91       	pop	r19
 c8a:	2f 91       	pop	r18
 c8c:	0f 90       	pop	r0
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	0f 90       	pop	r0
 c92:	1f 90       	pop	r1
 c94:	18 95       	reti

00000c96 <inc_RX_index_lectura>:
 c96:	e8 ec       	ldi	r30, 0xC8	; 200
 c98:	f8 e0       	ldi	r31, 0x08	; 8
 c9a:	40 81       	ld	r20, Z
 c9c:	51 81       	ldd	r21, Z+1	; 0x01
 c9e:	4f 5f       	subi	r20, 0xFF	; 255
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255
 ca2:	9a 01       	movw	r18, r20
 ca4:	36 95       	lsr	r19
 ca6:	27 95       	ror	r18
 ca8:	36 95       	lsr	r19
 caa:	27 95       	ror	r18
 cac:	ab e7       	ldi	r26, 0x7B	; 123
 cae:	b4 e1       	ldi	r27, 0x14	; 20
 cb0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__umulhisi3>
 cb4:	96 95       	lsr	r25
 cb6:	87 95       	ror	r24
 cb8:	64 e6       	ldi	r22, 0x64	; 100
 cba:	68 9f       	mul	r22, r24
 cbc:	90 01       	movw	r18, r0
 cbe:	69 9f       	mul	r22, r25
 cc0:	30 0d       	add	r19, r0
 cc2:	11 24       	eor	r1, r1
 cc4:	42 1b       	sub	r20, r18
 cc6:	53 0b       	sbc	r21, r19
 cc8:	51 83       	std	Z+1, r21	; 0x01
 cca:	40 83       	st	Z, r20
 ccc:	08 95       	ret

00000cce <inc_TX_index_lectura>:
}

void inc_TX_index_lectura (void)
{
	TX_buffer.index_lectura = (TX_buffer.index_lectura+1)%BUFFER_TX_LEN;
 cce:	e0 e6       	ldi	r30, 0x60	; 96
 cd0:	f8 e0       	ldi	r31, 0x08	; 8
 cd2:	40 81       	ld	r20, Z
 cd4:	51 81       	ldd	r21, Z+1	; 0x01
 cd6:	4f 5f       	subi	r20, 0xFF	; 255
 cd8:	5f 4f       	sbci	r21, 0xFF	; 255
 cda:	9a 01       	movw	r18, r20
 cdc:	36 95       	lsr	r19
 cde:	27 95       	ror	r18
 ce0:	36 95       	lsr	r19
 ce2:	27 95       	ror	r18
 ce4:	a5 ec       	ldi	r26, 0xC5	; 197
 ce6:	b0 e2       	ldi	r27, 0x20	; 32
 ce8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__umulhisi3>
 cec:	92 95       	swap	r25
 cee:	82 95       	swap	r24
 cf0:	8f 70       	andi	r24, 0x0F	; 15
 cf2:	89 27       	eor	r24, r25
 cf4:	9f 70       	andi	r25, 0x0F	; 15
 cf6:	89 27       	eor	r24, r25
 cf8:	64 ef       	ldi	r22, 0xF4	; 244
 cfa:	71 e0       	ldi	r23, 0x01	; 1
 cfc:	86 9f       	mul	r24, r22
 cfe:	90 01       	movw	r18, r0
 d00:	87 9f       	mul	r24, r23
 d02:	30 0d       	add	r19, r0
 d04:	96 9f       	mul	r25, r22
 d06:	30 0d       	add	r19, r0
 d08:	11 24       	eor	r1, r1
 d0a:	42 1b       	sub	r20, r18
 d0c:	53 0b       	sbc	r21, r19
 d0e:	51 83       	std	Z+1, r21	; 0x01
 d10:	40 83       	st	Z, r20
 d12:	08 95       	ret

00000d14 <__vector_19>:
}

// @brief	Handler de interrupcion para la recepcion UART. Interrumpe cuando hay un dato en UDR0
// @param	
// @return	
ISR(USART_UDRE_vect){
 d14:	1f 92       	push	r1
 d16:	0f 92       	push	r0
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	0f 92       	push	r0
 d1c:	11 24       	eor	r1, r1
 d1e:	2f 93       	push	r18
 d20:	3f 93       	push	r19
 d22:	4f 93       	push	r20
 d24:	5f 93       	push	r21
 d26:	6f 93       	push	r22
 d28:	7f 93       	push	r23
 d2a:	8f 93       	push	r24
 d2c:	9f 93       	push	r25
 d2e:	af 93       	push	r26
 d30:	bf 93       	push	r27
 d32:	ef 93       	push	r30
 d34:	ff 93       	push	r31
	if(TX_buffer_is_full() == 1){
 d36:	0e 94 b3 05 	call	0xb66	; 0xb66 <TX_buffer_is_full>
 d3a:	81 30       	cpi	r24, 0x01	; 1
 d3c:	19 f4       	brne	.+6      	; 0xd44 <__vector_19+0x30>
		SerialPort_TX_Interrupt_Disable();
 d3e:	0e 94 de 04 	call	0x9bc	; 0x9bc <SerialPort_TX_Interrupt_Disable>
 d42:	0b c0       	rjmp	.+22     	; 0xd5a <__vector_19+0x46>
		//SerialPort_RX_Interrupt_Enable();
	}
	// Se escribe en el buffer y se avanza en el indice de lectura
	else{
		if (TX_buffer.data[TX_buffer.index_lectura] != '/0') {	
			UDR0 = TX_buffer.data[TX_buffer.index_lectura];
 d44:	e0 91 60 08 	lds	r30, 0x0860	; 0x800860 <TX_buffer+0x1f6>
 d48:	f0 91 61 08 	lds	r31, 0x0861	; 0x800861 <TX_buffer+0x1f7>
 d4c:	e6 59       	subi	r30, 0x96	; 150
 d4e:	f9 4f       	sbci	r31, 0xF9	; 249
 d50:	80 81       	ld	r24, Z
 d52:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		}
		inc_TX_index_lectura();
 d56:	0e 94 67 06 	call	0xcce	; 0xcce <inc_TX_index_lectura>
	}
}
 d5a:	ff 91       	pop	r31
 d5c:	ef 91       	pop	r30
 d5e:	bf 91       	pop	r27
 d60:	af 91       	pop	r26
 d62:	9f 91       	pop	r25
 d64:	8f 91       	pop	r24
 d66:	7f 91       	pop	r23
 d68:	6f 91       	pop	r22
 d6a:	5f 91       	pop	r21
 d6c:	4f 91       	pop	r20
 d6e:	3f 91       	pop	r19
 d70:	2f 91       	pop	r18
 d72:	0f 90       	pop	r0
 d74:	0f be       	out	0x3f, r0	; 63
 d76:	0f 90       	pop	r0
 d78:	1f 90       	pop	r1
 d7a:	18 95       	reti

00000d7c <__divmodsi4>:
 d7c:	05 2e       	mov	r0, r21
 d7e:	97 fb       	bst	r25, 7
 d80:	1e f4       	brtc	.+6      	; 0xd88 <__divmodsi4+0xc>
 d82:	00 94       	com	r0
 d84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__negsi2>
 d88:	57 fd       	sbrc	r21, 7
 d8a:	07 d0       	rcall	.+14     	; 0xd9a <__divmodsi4_neg2>
 d8c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__udivmodsi4>
 d90:	07 fc       	sbrc	r0, 7
 d92:	03 d0       	rcall	.+6      	; 0xd9a <__divmodsi4_neg2>
 d94:	4e f4       	brtc	.+18     	; 0xda8 <__divmodsi4_exit>
 d96:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__negsi2>

00000d9a <__divmodsi4_neg2>:
 d9a:	50 95       	com	r21
 d9c:	40 95       	com	r20
 d9e:	30 95       	com	r19
 da0:	21 95       	neg	r18
 da2:	3f 4f       	sbci	r19, 0xFF	; 255
 da4:	4f 4f       	sbci	r20, 0xFF	; 255
 da6:	5f 4f       	sbci	r21, 0xFF	; 255

00000da8 <__divmodsi4_exit>:
 da8:	08 95       	ret

00000daa <__negsi2>:
 daa:	90 95       	com	r25
 dac:	80 95       	com	r24
 dae:	70 95       	com	r23
 db0:	61 95       	neg	r22
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	8f 4f       	sbci	r24, 0xFF	; 255
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	08 95       	ret

00000dba <__tablejump2__>:
 dba:	ee 0f       	add	r30, r30
 dbc:	ff 1f       	adc	r31, r31
 dbe:	05 90       	lpm	r0, Z+
 dc0:	f4 91       	lpm	r31, Z
 dc2:	e0 2d       	mov	r30, r0
 dc4:	09 94       	ijmp

00000dc6 <__umulhisi3>:
 dc6:	a2 9f       	mul	r26, r18
 dc8:	b0 01       	movw	r22, r0
 dca:	b3 9f       	mul	r27, r19
 dcc:	c0 01       	movw	r24, r0
 dce:	a3 9f       	mul	r26, r19
 dd0:	70 0d       	add	r23, r0
 dd2:	81 1d       	adc	r24, r1
 dd4:	11 24       	eor	r1, r1
 dd6:	91 1d       	adc	r25, r1
 dd8:	b2 9f       	mul	r27, r18
 dda:	70 0d       	add	r23, r0
 ddc:	81 1d       	adc	r24, r1
 dde:	11 24       	eor	r1, r1
 de0:	91 1d       	adc	r25, r1
 de2:	08 95       	ret

00000de4 <__udivmodsi4>:
 de4:	a1 e2       	ldi	r26, 0x21	; 33
 de6:	1a 2e       	mov	r1, r26
 de8:	aa 1b       	sub	r26, r26
 dea:	bb 1b       	sub	r27, r27
 dec:	fd 01       	movw	r30, r26
 dee:	0d c0       	rjmp	.+26     	; 0xe0a <__udivmodsi4_ep>

00000df0 <__udivmodsi4_loop>:
 df0:	aa 1f       	adc	r26, r26
 df2:	bb 1f       	adc	r27, r27
 df4:	ee 1f       	adc	r30, r30
 df6:	ff 1f       	adc	r31, r31
 df8:	a2 17       	cp	r26, r18
 dfa:	b3 07       	cpc	r27, r19
 dfc:	e4 07       	cpc	r30, r20
 dfe:	f5 07       	cpc	r31, r21
 e00:	20 f0       	brcs	.+8      	; 0xe0a <__udivmodsi4_ep>
 e02:	a2 1b       	sub	r26, r18
 e04:	b3 0b       	sbc	r27, r19
 e06:	e4 0b       	sbc	r30, r20
 e08:	f5 0b       	sbc	r31, r21

00000e0a <__udivmodsi4_ep>:
 e0a:	66 1f       	adc	r22, r22
 e0c:	77 1f       	adc	r23, r23
 e0e:	88 1f       	adc	r24, r24
 e10:	99 1f       	adc	r25, r25
 e12:	1a 94       	dec	r1
 e14:	69 f7       	brne	.-38     	; 0xdf0 <__udivmodsi4_loop>
 e16:	60 95       	com	r22
 e18:	70 95       	com	r23
 e1a:	80 95       	com	r24
 e1c:	90 95       	com	r25
 e1e:	9b 01       	movw	r18, r22
 e20:	ac 01       	movw	r20, r24
 e22:	bd 01       	movw	r22, r26
 e24:	cf 01       	movw	r24, r30
 e26:	08 95       	ret

00000e28 <strcmp>:
 e28:	fb 01       	movw	r30, r22
 e2a:	dc 01       	movw	r26, r24
 e2c:	8d 91       	ld	r24, X+
 e2e:	01 90       	ld	r0, Z+
 e30:	80 19       	sub	r24, r0
 e32:	01 10       	cpse	r0, r1
 e34:	d9 f3       	breq	.-10     	; 0xe2c <strcmp+0x4>
 e36:	99 0b       	sbc	r25, r25
 e38:	08 95       	ret

00000e3a <strncmp>:
 e3a:	fb 01       	movw	r30, r22
 e3c:	dc 01       	movw	r26, r24
 e3e:	41 50       	subi	r20, 0x01	; 1
 e40:	50 40       	sbci	r21, 0x00	; 0
 e42:	30 f0       	brcs	.+12     	; 0xe50 <strncmp+0x16>
 e44:	8d 91       	ld	r24, X+
 e46:	01 90       	ld	r0, Z+
 e48:	80 19       	sub	r24, r0
 e4a:	19 f4       	brne	.+6      	; 0xe52 <strncmp+0x18>
 e4c:	00 20       	and	r0, r0
 e4e:	b9 f7       	brne	.-18     	; 0xe3e <strncmp+0x4>
 e50:	88 1b       	sub	r24, r24
 e52:	99 0b       	sbc	r25, r25
 e54:	08 95       	ret

00000e56 <_exit>:
 e56:	f8 94       	cli

00000e58 <__stop_program>:
 e58:	ff cf       	rjmp	.-2      	; 0xe58 <__stop_program>
