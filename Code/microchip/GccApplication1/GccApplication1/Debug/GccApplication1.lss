
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000034c  00800100  00000ab0  00000b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000333  0080044c  0080044c  00000e90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f8  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab9  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa6  00000000  00000000  000031c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00004170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000962  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000931  00000000  00000000  00004fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000591f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_18>
  4c:	0c 94 b9 04 	jmp	0x972	; 0x972 <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	76 02       	muls	r23, r22
  6a:	78 02       	muls	r23, r24
  6c:	7a 02       	muls	r23, r26
  6e:	6e 02       	muls	r22, r30
  70:	70 02       	muls	r23, r16
  72:	72 02       	muls	r23, r18
  74:	74 02       	muls	r23, r20

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	14 e0       	ldi	r17, 0x04	; 4
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e0 eb       	ldi	r30, 0xB0	; 176
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 34       	cpi	r26, 0x4C	; 76
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	27 e0       	ldi	r18, 0x07	; 7
  9a:	ac e4       	ldi	r26, 0x4C	; 76
  9c:	b4 e0       	ldi	r27, 0x04	; 4
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 37       	cpi	r26, 0x7F	; 127
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
  ac:	0c 94 56 05 	jmp	0xaac	; 0xaac <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <set_song>:
// @brief *resumen*
// @param  *parametrsoq que resumen*
// @return *lo que retorna*
unsigned int get_tempo() {
	return tempo;
}
  b4:	e8 2f       	mov	r30, r24
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ef 5f       	subi	r30, 0xFF	; 255
  be:	fe 4f       	sbci	r31, 0xFE	; 254
  c0:	80 81       	ld	r24, Z
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <song+0x1>
  c8:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <song>
  cc:	08 95       	ret

000000ce <set_duration_timer>:
  ce:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <duration_timer+0x1>
  d2:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <duration_timer>
  d6:	08 95       	ret

000000d8 <set_sound_playing>:
  d8:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <__data_end+0x1>
  dc:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__data_end>
  e0:	08 95       	ret

000000e2 <get_duration_timer>:
  e2:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <duration_timer>
  e6:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <duration_timer+0x1>
  ea:	08 95       	ret

000000ec <sound>:


// Saco el sonido por el PIN5 del PORTD: freq en Hz, dur en ms
void sound(unsigned int freq, unsigned int dur)
{
  ec:	9c 01       	movw	r18, r24
	while (sound_playing && song_playing);      // Si hay alg?n sonido presente, espero a que termine
  ee:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <__data_end>
  f2:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <__data_end+0x1>
  f6:	45 2b       	or	r20, r21
  f8:	21 f0       	breq	.+8      	; 0x102 <sound+0x16>
  fa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	91 11       	cpse	r25, r1
 100:	f6 cf       	rjmp	.-20     	; 0xee <sound+0x2>

	duration_timer = dur;       // Seteo el tiempo de duraci?n
 102:	70 93 55 04 	sts	0x0455, r23	; 0x800455 <duration_timer+0x1>
 106:	60 93 54 04 	sts	0x0454, r22	; 0x800454 <duration_timer>

	// Activo la salida y configuro el timer para que genere la se?al de la frecuencia apropiada
	TCCR1A|=(1<<COM1A0);
 10a:	e0 e8       	ldi	r30, 0x80	; 128
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24

	// Actualizo el valor de OCR1A para que produzca la nota adecuada
	OCR1A=(8000000/(freq))-1;
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	72 e1       	ldi	r23, 0x12	; 18
 11c:	8a e7       	ldi	r24, 0x7A	; 122
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodsi4>
 124:	21 50       	subi	r18, 0x01	; 1
 126:	31 09       	sbc	r19, r1
 128:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	sound_playing = 1;          // Activo el flag para avisar que hay una nota sonando
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <__data_end+0x1>
 138:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__data_end>
 13c:	08 95       	ret

0000013e <stop_song>:
}

void stop_song()
{
	song_playing = 0;           // Activo el flag para avisar que hay una nota sonando
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sound_playing = 0;          // Activo el flag para avisar que hay una nota sonando
 142:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <__data_end+0x1>
 146:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <__data_end>
	TCCR1A&=~(1<<COM1A0);       // Desactivo la salida
 14a:	e0 e8       	ldi	r30, 0x80	; 128
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8f 7b       	andi	r24, 0xBF	; 191
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <play_song>:
}

// Esta funci?n reproduce una canci?n que se le pase en un string con formato RTTTL
void play_song()
{
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	song_playing = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	unsigned char temp_duration, temp_octave, current_note, dot_flag;
	unsigned int calc_duration;
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <duration>
	tempo = 63;                   // Tempo est?ndar = 63 bpm
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <tempo+0x1>
 172:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <tempo>
	octave = 6;                   // Octava est?ndar = 6th
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <octave>
	while (*song != ':' && song_playing) song++;  // Busca el primer ':'
 17c:	05 c0       	rjmp	.+10     	; 0x188 <play_song+0x32>
 17e:	31 96       	adiw	r30, 0x01	; 1
 180:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 184:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 188:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 18c:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 190:	80 81       	ld	r24, Z
 192:	8a 33       	cpi	r24, 0x3A	; 58
 194:	21 f0       	breq	.+8      	; 0x19e <play_song+0x48>
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	81 11       	cpse	r24, r1
 19c:	f0 cf       	rjmp	.-32     	; 0x17e <play_song+0x28>
	song++;                       // Saltea el primer ':'
 19e:	31 96       	adiw	r30, 0x01	; 1
 1a0:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 1a4:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
	while (*song!=':' && song_playing)            // Repite hasta encontrar ':'
 1a8:	51 c1       	rjmp	.+674    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		if (*song == 'd')           // Entra si es el seteo de la duraci?n
 1aa:	84 36       	cpi	r24, 0x64	; 100
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <play_song+0x5a>
 1ae:	5c c0       	rjmp	.+184    	; 0x268 <play_song+0x112>
		{
			duration = 0;             // Seteo la duraci?n en cero (temporalmente)
 1b0:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 1b4:	31 96       	adiw	r30, 0x01	; 1
 1b6:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 1ba:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <play_song+0x74>
 1c0:	31 96       	adiw	r30, 0x01	; 1
 1c2:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 1c6:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 1ca:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 1ce:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 1d2:	80 81       	ld	r24, Z
 1d4:	8d 33       	cpi	r24, 0x3D	; 61
 1d6:	51 f4       	brne	.+20     	; 0x1ec <play_song+0x96>
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	81 11       	cpse	r24, r1
 1de:	f0 cf       	rjmp	.-32     	; 0x1c0 <play_song+0x6a>
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <play_song+0x96>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 1e2:	31 96       	adiw	r30, 0x01	; 1
 1e4:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 1e8:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 1ec:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 1f0:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	80 32       	cpi	r24, 0x20	; 32
 1f8:	21 f4       	brne	.+8      	; 0x202 <play_song+0xac>
 1fa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	91 11       	cpse	r25, r1
 200:	f0 cf       	rjmp	.-32     	; 0x1e2 <play_song+0x8c>
			// Si el caracter es un n?mero, seteo la duraci?n
			if (*song>='0' && *song<='9') duration = *song - '0';
 202:	80 53       	subi	r24, 0x30	; 48
 204:	8a 30       	cpi	r24, 0x0A	; 10
 206:	10 f4       	brcc	.+4      	; 0x20c <play_song+0xb6>
 208:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <duration>
			song++;                   // Avanzo al pr?ximo caracter
 20c:	9f 01       	movw	r18, r30
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <song+0x1>
 216:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <song>
			// Me fijo si el caracter es un n?mero, ya que la diraci?n puede ser de dos d?gitos de largo
			if (*song>='0' && *song<='9')
 21a:	81 81       	ldd	r24, Z+1	; 0x01
 21c:	90 ed       	ldi	r25, 0xD0	; 208
 21e:	98 0f       	add	r25, r24
 220:	9a 30       	cpi	r25, 0x0A	; 10
 222:	b8 f4       	brcc	.+46     	; 0x252 <play_song+0xfc>
			{ // Multiplico duraci?n por 10 y le agrego el valor del caracter
				duration = duration*10 + (*song - '0');
 224:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <duration>
 228:	99 0f       	add	r25, r25
 22a:	49 2f       	mov	r20, r25
 22c:	44 0f       	add	r20, r20
 22e:	44 0f       	add	r20, r20
 230:	94 0f       	add	r25, r20
 232:	89 0f       	add	r24, r25
 234:	80 53       	subi	r24, 0x30	; 48
 236:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <duration>
				song++;                 // Avanzo al pr?ximo caracter
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <song+0x1>
 242:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <song>
 246:	05 c0       	rjmp	.+10     	; 0x252 <play_song+0xfc>
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
 248:	31 96       	adiw	r30, 0x01	; 1
 24a:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 24e:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 252:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 256:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 25a:	80 81       	ld	r24, Z
 25c:	8c 32       	cpi	r24, 0x2C	; 44
 25e:	21 f4       	brne	.+8      	; 0x268 <play_song+0x112>
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	81 11       	cpse	r24, r1
 266:	f0 cf       	rjmp	.-32     	; 0x248 <play_song+0xf2>
		}

		if (*song == 'o')           // Entra si es el seteo de la octava
 268:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 26c:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 270:	80 81       	ld	r24, Z
 272:	8f 36       	cpi	r24, 0x6F	; 111
 274:	09 f0       	breq	.+2      	; 0x278 <play_song+0x122>
 276:	44 c0       	rjmp	.+136    	; 0x300 <play_song+0x1aa>
		{
			octave = 0;               // Seteo la octava en cero (temporalmente)
 278:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <octave>
			song++;                   // Avanzo al pr?ximo caracter
 27c:	31 96       	adiw	r30, 0x01	; 1
 27e:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 282:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 286:	05 c0       	rjmp	.+10     	; 0x292 <play_song+0x13c>
 288:	31 96       	adiw	r30, 0x01	; 1
 28a:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 28e:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 292:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 296:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 29a:	80 81       	ld	r24, Z
 29c:	8d 33       	cpi	r24, 0x3D	; 61
 29e:	51 f4       	brne	.+20     	; 0x2b4 <play_song+0x15e>
 2a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a4:	81 11       	cpse	r24, r1
 2a6:	f0 cf       	rjmp	.-32     	; 0x288 <play_song+0x132>
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <play_song+0x15e>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 2aa:	31 96       	adiw	r30, 0x01	; 1
 2ac:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 2b0:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 2b4:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 2b8:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 2bc:	80 81       	ld	r24, Z
 2be:	80 32       	cpi	r24, 0x20	; 32
 2c0:	21 f4       	brne	.+8      	; 0x2ca <play_song+0x174>
 2c2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c6:	91 11       	cpse	r25, r1
 2c8:	f0 cf       	rjmp	.-32     	; 0x2aa <play_song+0x154>
			// Si el caracter es un n?mero, seteo la octava
			if (*song>='0' && *song<='9') octave = *song - '0';
 2ca:	80 53       	subi	r24, 0x30	; 48
 2cc:	8a 30       	cpi	r24, 0x0A	; 10
 2ce:	10 f4       	brcc	.+4      	; 0x2d4 <play_song+0x17e>
 2d0:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <octave>
			song++;                   // Avanzo al pr?ximo caracter
 2d4:	31 96       	adiw	r30, 0x01	; 1
 2d6:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 2da:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
			while (*song == ',' && song_playing) song++;  // Salteo ','
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <play_song+0x194>
 2e0:	31 96       	adiw	r30, 0x01	; 1
 2e2:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 2e6:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 2ea:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 2ee:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 2f2:	80 81       	ld	r24, Z
 2f4:	8c 32       	cpi	r24, 0x2C	; 44
 2f6:	21 f4       	brne	.+8      	; 0x300 <play_song+0x1aa>
 2f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fc:	81 11       	cpse	r24, r1
 2fe:	f0 cf       	rjmp	.-32     	; 0x2e0 <play_song+0x18a>
		}
		if (*song == 'b')           // Entra si es el seteo del tempo (beats por minuto)
 300:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 304:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 308:	80 81       	ld	r24, Z
 30a:	82 36       	cpi	r24, 0x62	; 98
 30c:	09 f0       	breq	.+2      	; 0x310 <play_song+0x1ba>
 30e:	93 c0       	rjmp	.+294    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
			tempo = 0;                // Seteo el tempo en cero (temporalmente)
 310:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <tempo+0x1>
 314:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 318:	31 96       	adiw	r30, 0x01	; 1
 31a:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 31e:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
			while (*song == '=' && song_playing) song++;  // Salteo '='
 322:	05 c0       	rjmp	.+10     	; 0x32e <play_song+0x1d8>
 324:	31 96       	adiw	r30, 0x01	; 1
 326:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 32a:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 32e:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 332:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 336:	80 81       	ld	r24, Z
 338:	8d 33       	cpi	r24, 0x3D	; 61
 33a:	51 f4       	brne	.+20     	; 0x350 <play_song+0x1fa>
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 340:	81 11       	cpse	r24, r1
 342:	f0 cf       	rjmp	.-32     	; 0x324 <play_song+0x1ce>
 344:	05 c0       	rjmp	.+10     	; 0x350 <play_song+0x1fa>
			while (*song == ' ' && song_playing) song++;  // Salteo los espacios
 346:	31 96       	adiw	r30, 0x01	; 1
 348:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 34c:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 350:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 354:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 358:	80 81       	ld	r24, Z
 35a:	80 32       	cpi	r24, 0x20	; 32
 35c:	21 f4       	brne	.+8      	; 0x366 <play_song+0x210>
 35e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 362:	91 11       	cpse	r25, r1
 364:	f0 cf       	rjmp	.-32     	; 0x346 <play_song+0x1f0>
			// Ahora leo el seteo del tempo (puede tener 3 d?gitos de largo)
			if (*song>='0' && *song<='9') tempo = *song - '0';
 366:	90 ed       	ldi	r25, 0xD0	; 208
 368:	98 0f       	add	r25, r24
 36a:	9a 30       	cpi	r25, 0x0A	; 10
 36c:	30 f4       	brcc	.+12     	; 0x37a <play_song+0x224>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	c0 97       	sbiw	r24, 0x30	; 48
 372:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <tempo+0x1>
 376:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <tempo>
			song++;                   // Avanzo al pr?ximo caracter
 37a:	df 01       	movw	r26, r30
 37c:	11 96       	adiw	r26, 0x01	; 1
 37e:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <song+0x1>
 382:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <song>
			if (*song>='0' && *song<='9')
 386:	41 81       	ldd	r20, Z+1	; 0x01
 388:	80 ed       	ldi	r24, 0xD0	; 208
 38a:	84 0f       	add	r24, r20
 38c:	8a 30       	cpi	r24, 0x0A	; 10
 38e:	08 f0       	brcs	.+2      	; 0x392 <play_song+0x23c>
 390:	41 c0       	rjmp	.+130    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				tempo = tempo*10 + (*song - '0'); // El tempo tiene dos d?gitos
 392:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <tempo>
 396:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <tempo+0x1>
 39a:	c9 01       	movw	r24, r18
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	22 0f       	add	r18, r18
 3a6:	33 1f       	adc	r19, r19
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	82 0f       	add	r24, r18
 3ae:	93 1f       	adc	r25, r19
 3b0:	84 0f       	add	r24, r20
 3b2:	91 1d       	adc	r25, r1
 3b4:	c0 97       	sbiw	r24, 0x30	; 48
 3b6:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <tempo+0x1>
 3ba:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <tempo>
				song++;                 // Avanzo al pr?ximo caracter
 3be:	9d 01       	movw	r18, r26
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
 3c2:	3f 4f       	sbci	r19, 0xFF	; 255
 3c4:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <song+0x1>
 3c8:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <song>
				if (*song>='0' && *song<='9')
 3cc:	11 96       	adiw	r26, 0x01	; 1
 3ce:	4c 91       	ld	r20, X
 3d0:	50 ed       	ldi	r21, 0xD0	; 208
 3d2:	54 0f       	add	r21, r20
 3d4:	5a 30       	cpi	r21, 0x0A	; 10
 3d6:	f0 f4       	brcc	.+60     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				{
					tempo = tempo*10 + (*song - '0'); // El tempo tiene tres d?gitos
 3d8:	bc 01       	movw	r22, r24
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	86 0f       	add	r24, r22
 3ec:	97 1f       	adc	r25, r23
 3ee:	84 0f       	add	r24, r20
 3f0:	91 1d       	adc	r25, r1
 3f2:	c0 97       	sbiw	r24, 0x30	; 48
 3f4:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <tempo+0x1>
 3f8:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <tempo>
					song++;               // Avanzo al pr?ximo caracter
 3fc:	2f 5f       	subi	r18, 0xFF	; 255
 3fe:	3f 4f       	sbci	r19, 0xFF	; 255
 400:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <song+0x1>
 404:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <song>
 408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				}
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
 40a:	31 96       	adiw	r30, 0x01	; 1
 40c:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 410:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 414:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 418:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 41c:	80 81       	ld	r24, Z
 41e:	8c 32       	cpi	r24, 0x2C	; 44
 420:	51 f4       	brne	.+20     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 422:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 426:	81 11       	cpse	r24, r1
 428:	f0 cf       	rjmp	.-32     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
 42c:	31 96       	adiw	r30, 0x01	; 1
 42e:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 432:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 436:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 43a:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 43e:	80 81       	ld	r24, Z
 440:	8c 32       	cpi	r24, 0x2C	; 44
 442:	21 f4       	brne	.+8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 444:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 448:	81 11       	cpse	r24, r1
 44a:	f0 cf       	rjmp	.-32     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
	tempo = 63;                   // Tempo est?ndar = 63 bpm
	octave = 6;                   // Octava est?ndar = 6th
	while (*song != ':' && song_playing) song++;  // Busca el primer ':'
	song++;                       // Saltea el primer ':'
	while (*song!=':' && song_playing)            // Repite hasta encontrar ':'
 44c:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 450:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 454:	80 81       	ld	r24, Z
 456:	8a 33       	cpi	r24, 0x3A	; 58
 458:	21 f0       	breq	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 45e:	91 11       	cpse	r25, r1
 460:	a4 ce       	rjmp	.-696    	; 0x1aa <play_song+0x54>
			}
			while (*song == ',' && song_playing) song++;  // Salteo ','
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
 462:	31 96       	adiw	r30, 0x01	; 1
 464:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 468:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
 46c:	e0 c0       	rjmp	.+448    	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
 46e:	c0 91 56 04 	lds	r28, 0x0456	; 0x800456 <octave>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
 472:	00 91 53 04 	lds	r16, 0x0453	; 0x800453 <duration>
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
 476:	80 53       	subi	r24, 0x30	; 48
 478:	8a 30       	cpi	r24, 0x0A	; 10
 47a:	e0 f4       	brcc	.+56     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
		{
			temp_duration = *song - '0';
			song++;
 47c:	af 01       	movw	r20, r30
 47e:	4f 5f       	subi	r20, 0xFF	; 255
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	50 93 52 04 	sts	0x0452, r21	; 0x800452 <song+0x1>
 486:	40 93 51 04 	sts	0x0451, r20	; 0x800451 <song>
			if (*song>='0' && *song<='9')
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	20 ed       	ldi	r18, 0xD0	; 208
 48e:	29 0f       	add	r18, r25
 490:	2a 30       	cpi	r18, 0x0A	; 10
 492:	78 f4       	brcc	.+30     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				temp_duration = temp_duration*10 + (*song - '0');
 494:	88 0f       	add	r24, r24
 496:	08 2f       	mov	r16, r24
 498:	00 0f       	add	r16, r16
 49a:	00 0f       	add	r16, r16
 49c:	80 0f       	add	r24, r16
 49e:	08 2f       	mov	r16, r24
 4a0:	09 0f       	add	r16, r25
 4a2:	00 53       	subi	r16, 0x30	; 48
				song++;
 4a4:	4f 5f       	subi	r20, 0xFF	; 255
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	50 93 52 04 	sts	0x0452, r21	; 0x800452 <song+0x1>
 4ac:	40 93 51 04 	sts	0x0451, r20	; 0x800451 <song>
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
		{
			temp_duration = *song - '0';
 4b2:	08 2f       	mov	r16, r24
				temp_duration = temp_duration*10 + (*song - '0');
				song++;
			}
		}
		// Busco una nota
		switch (*song)
 4b4:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <song>
 4b8:	30 91 52 04 	lds	r19, 0x0452	; 0x800452 <song+0x1>
 4bc:	d9 01       	movw	r26, r18
 4be:	ec 91       	ld	r30, X
 4c0:	8e 2f       	mov	r24, r30
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	e1 56       	subi	r30, 0x61	; 97
 4c8:	f1 09       	sbc	r31, r1
 4ca:	e7 30       	cpi	r30, 0x07	; 7
 4cc:	f1 05       	cpc	r31, r1
 4ce:	20 f4       	brcc	.+8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d0:	ec 5c       	subi	r30, 0xCC	; 204
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__tablejump2__>
	}
	song++;                       // Avanzo al pr?ximo caracter
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
	{
		current_note = 255;         // Nota por defecto = pausa
 4d8:	df ef       	ldi	r29, 0xFF	; 255
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
		}
		// Busco una nota
		switch (*song)
		{
			case 'c': current_note = 0; break;    // C (do)
			case 'd': current_note = 2; break;    // D (re)
 4dc:	d2 e0       	ldi	r29, 0x02	; 2
 4de:	0b c0       	rjmp	.+22     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			case 'e': current_note = 4; break;    // E (mi)
 4e0:	d4 e0       	ldi	r29, 0x04	; 4
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			case 'f': current_note = 5; break;    // F (fa)
 4e4:	d5 e0       	ldi	r29, 0x05	; 5
 4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			case 'g': current_note = 7; break;    // G (sol)
 4e8:	d7 e0       	ldi	r29, 0x07	; 7
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			case 'a': current_note = 9; break;    // A (la)
 4ec:	d9 e0       	ldi	r29, 0x09	; 9
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			case 'b': current_note = 11; break;   // B (si)
 4f0:	db e0       	ldi	r29, 0x0B	; 11
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			}
		}
		// Busco una nota
		switch (*song)
		{
			case 'c': current_note = 0; break;    // C (do)
 4f4:	d0 e0       	ldi	r29, 0x00	; 0
			case 'g': current_note = 7; break;    // G (sol)
			case 'a': current_note = 9; break;    // A (la)
			case 'b': current_note = 11; break;   // B (si)
			case 'p': current_note = 255; break;  // pausa
		}
		song++;                     // Avanzo al pr?ximo caracter
 4f6:	c9 01       	movw	r24, r18
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <song+0x1>
 4fe:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <song>
		// Busco un '#' siguiendo la nota
		if (*song=='#')
 502:	f9 01       	movw	r30, r18
 504:	21 81       	ldd	r18, Z+1	; 0x01
 506:	23 32       	cpi	r18, 0x23	; 35
 508:	31 f4       	brne	.+12     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
		{
			current_note++;   // Incremento la nota (A->A#, C->C#, D->D#, F->F#, G->G#)
 50a:	df 5f       	subi	r29, 0xFF	; 255
			song++;                   // Avanzo al pr?ximo caracter
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <song+0x1>
 512:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <song>




		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
 516:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 51a:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 51e:	80 81       	ld	r24, Z
 520:	8e 32       	cpi	r24, 0x2E	; 46
 522:	41 f4       	brne	.+16     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 524:	31 96       	adiw	r30, 0x01	; 1
 526:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 52a:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>


		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 52e:	ff 24       	eor	r15, r15
 530:	f3 94       	inc	r15
 532:	01 c0       	rjmp	.+2      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
		dot_flag = 0;               // Borro el flag de detecci?n de punto
 534:	f1 2c       	mov	r15, r1
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
 536:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 53a:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 53e:	80 81       	ld	r24, Z
 540:	80 53       	subi	r24, 0x30	; 48
 542:	8a 30       	cpi	r24, 0x0A	; 10
 544:	30 f4       	brcc	.+12     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
 546:	31 96       	adiw	r30, 0x01	; 1
 548:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 54c:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
			song++;                   // Avanzo al pr?ximo caracter
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
 550:	c8 2f       	mov	r28, r24
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
 552:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 556:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 55a:	80 81       	ld	r24, Z
 55c:	8e 32       	cpi	r24, 0x2E	; 46
 55e:	69 f4       	brne	.+26     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 560:	31 96       	adiw	r30, 0x01	; 1
 562:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 566:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 56a:	ff 24       	eor	r15, r15
 56c:	f3 94       	inc	r15
 56e:	05 c0       	rjmp	.+10     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
			song++;                   // Avanzo al pr?ximo caracter
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
 570:	31 96       	adiw	r30, 0x01	; 1
 572:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <song+0x1>
 576:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <song>
 57a:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 57e:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 582:	80 81       	ld	r24, Z
 584:	8c 32       	cpi	r24, 0x2C	; 44
 586:	21 f4       	brne	.+8      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 588:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 58c:	81 11       	cpse	r24, r1
 58e:	f0 cf       	rjmp	.-32     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
		// Calculo la duraci?n de la nota
		calc_duration = (60000/tempo)/(temp_duration);
 590:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <tempo>
 594:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <tempo+0x1>
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	60 e6       	ldi	r22, 0x60	; 96
 59e:	7a ee       	ldi	r23, 0xEA	; 234
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodsi4>
 5a8:	ca 01       	movw	r24, r20
 5aa:	b9 01       	movw	r22, r18
 5ac:	20 2f       	mov	r18, r16
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodsi4>
		calc_duration *= 4;         // La nota completa tiene cuatro beats
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	22 0f       	add	r18, r18
 5be:	33 1f       	adc	r19, r19
		// Chequeo si el flag de punto est? activado, de ser as?, extiendo la duraci?n en un 50%
		if (dot_flag) calc_duration = (calc_duration*3)/2;
 5c0:	ff 20       	and	r15, r15
 5c2:	39 f0       	breq	.+14     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5c4:	b9 01       	movw	r22, r18
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	26 0f       	add	r18, r22
 5cc:	37 1f       	adc	r19, r23
 5ce:	36 95       	lsr	r19
 5d0:	27 95       	ror	r18
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funci?n sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
 5d2:	df 3f       	cpi	r29, 0xFF	; 255
 5d4:	c1 f0       	breq	.+48     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5d6:	8c 2f       	mov	r24, r28
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	04 97       	sbiw	r24, 0x04	; 4
 5dc:	fc 01       	movw	r30, r24
 5de:	ee 0f       	add	r30, r30
 5e0:	ff 1f       	adc	r31, r31
 5e2:	e8 0f       	add	r30, r24
 5e4:	f9 1f       	adc	r31, r25
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ed 0f       	add	r30, r29
 5f0:	f1 1d       	adc	r31, r1
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	e9 5f       	subi	r30, 0xF9	; 249
 5f8:	fe 4f       	sbci	r31, 0xFE	; 254
 5fa:	b9 01       	movw	r22, r18
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	0e 94 76 00 	call	0xec	; 0xec <sound>
 604:	0a c0       	rjmp	.+20     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
 606:	30 93 55 04 	sts	0x0455, r19	; 0x800455 <duration_timer+0x1>
 60a:	20 93 54 04 	sts	0x0454, r18	; 0x800454 <duration_timer>
			sound_playing = 1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <__data_end+0x1>
 616:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__data_end>
		}
		while (sound_playing && song_playing);      // Espero a la que nota/pausa en curso finalice
 61a:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <__data_end>
 61e:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <__data_end+0x1>
 622:	89 2b       	or	r24, r25
 624:	21 f0       	breq	.+8      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 626:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 62a:	81 11       	cpse	r24, r1
 62c:	f6 cf       	rjmp	.-20     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
		}
		while (*song == ',' && song_playing) song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
	// read the musical notes
	while (*song && song_playing)                 // Repito hasta que el caracter sea null
 62e:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <song>
 632:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <song+0x1>
 636:	80 81       	ld	r24, Z
 638:	88 23       	and	r24, r24
 63a:	21 f0       	breq	.+8      	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
 63c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 640:	91 11       	cpse	r25, r1
 642:	15 cf       	rjmp	.-470    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			duration_timer = calc_duration;
			sound_playing = 1;
		}
		while (sound_playing && song_playing);      // Espero a la que nota/pausa en curso finalice
	}
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	0f 91       	pop	r16
 64a:	ff 90       	pop	r15
 64c:	08 95       	ret

0000064e <__vector_14>:
#include "serialPort/serialPort.h"
#include "UART/UART.h"

// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
 670:	0e 94 71 00 	call	0xe2	; 0xe2 <get_duration_timer>
	if (duration_timer) {
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	21 f0       	breq	.+8      	; 0x680 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	0e 94 67 00 	call	0xce	; 0xce <set_duration_timer>
 67e:	06 c0       	rjmp	.+12     	; 0x68c <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
 680:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_sound_playing>
	}
}
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	bf 91       	pop	r27
 692:	af 91       	pop	r26
 694:	9f 91       	pop	r25
 696:	8f 91       	pop	r24
 698:	7f 91       	pop	r23
 69a:	6f 91       	pop	r22
 69c:	5f 91       	pop	r21
 69e:	4f 91       	pop	r20
 6a0:	3f 91       	pop	r19
 6a2:	2f 91       	pop	r18
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <main>:


	// ------------------------ Timer 0 ------------------------

	// Configuro una interrupci?n cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
 6ae:	88 ef       	ldi	r24, 0xF8	; 248
 6b0:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 6b6:	93 e0       	ldi	r25, 0x03	; 3
 6b8:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci?n de comparaci?n
 6ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>


	// // ------------------------ Timer 1 ------------------------

	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
 6be:	e0 e8       	ldi	r30, 0x80	; 128
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	80 64       	ori	r24, 0x40	; 64
 6c6:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 6c8:	e1 e8       	ldi	r30, 0x81	; 129
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	89 60       	ori	r24, 0x09	; 9
 6d0:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB ser? el pin de salida
 6d2:	84 b1       	in	r24, 0x04	; 4
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	84 b9       	out	0x04, r24	; 4
	char MENU_flag=0;


	//Habilito la m?scara de interrupciones

	Buffer_Init();
 6d8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 6dc:	87 e6       	ldi	r24, 0x67	; 103
 6de:	0e 94 ae 03 	call	0x75c	; 0x75c <SerialPort_Init>
	SerialPort_TX_Enable();
 6e2:	0e 94 b8 03 	call	0x770	; 0x770 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 6e6:	0e 94 ca 03 	call	0x794	; 0x794 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 6ea:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <SerialPort_RX_Interrupt_Enable>

	sei();
 6ee:	78 94       	sei

	UART_Write_Menu();
 6f0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <UART_Write_Menu>
	char command;
	uint8_t num = 0;
	while(1)
	{
		if (get_FLAG_datos_recibidos() == 1) {
 6f4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <get_FLAG_datos_recibidos>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <main+0x46>
			//cli();
			set_FLAG_datos_recibidos(0);
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 73 04 	call	0x8e6	; 0x8e6 <set_FLAG_datos_recibidos>
			command = get_RX_data_index_lectura();
 702:	0e 94 ed 03 	call	0x7da	; 0x7da <get_RX_data_index_lectura>
 706:	c8 2f       	mov	r28, r24
			Buffer_Init();
 708:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Buffer_Init>

			// procesamiento BUffer_Rx
			switch (command){
 70c:	c0 35       	cpi	r28, 0x50	; 80
 70e:	49 f0       	breq	.+18     	; 0x722 <main+0x74>
 710:	18 f4       	brcc	.+6      	; 0x718 <main+0x6a>
 712:	ce 34       	cpi	r28, 0x4E	; 78
 714:	a1 f0       	breq	.+40     	; 0x73e <main+0x90>
 716:	ee cf       	rjmp	.-36     	; 0x6f4 <main+0x46>
 718:	c2 35       	cpi	r28, 0x52	; 82
 71a:	c9 f0       	breq	.+50     	; 0x74e <main+0xa0>
 71c:	c3 35       	cpi	r28, 0x53	; 83
 71e:	41 f0       	breq	.+16     	; 0x730 <main+0x82>
 720:	e9 cf       	rjmp	.-46     	; 0x6f4 <main+0x46>
				case 'P':
				UART_Write_String_To_Buffer("Playing song");
 722:	8b e2       	ldi	r24, 0x2B	; 43
 724:	93 e0       	ldi	r25, 0x03	; 3
 726:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
				play_song();
 72a:	0e 94 ab 00 	call	0x156	; 0x156 <play_song>
				break;
 72e:	e2 cf       	rjmp	.-60     	; 0x6f4 <main+0x46>
				case 'S':
				stop_song();
 730:	0e 94 9f 00 	call	0x13e	; 0x13e <stop_song>
				UART_Write_String_To_Buffer("Stopped song");
 734:	88 e3       	ldi	r24, 0x38	; 56
 736:	93 e0       	ldi	r25, 0x03	; 3
 738:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
				break;
 73c:	db cf       	rjmp	.-74     	; 0x6f4 <main+0x46>
				case 'N':
				UART_Write_String_To_Buffer("New song");
 73e:	85 e4       	ldi	r24, 0x45	; 69
 740:	93 e0       	ldi	r25, 0x03	; 3
 742:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
				set_song(num);
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 5a 00 	call	0xb4	; 0xb4 <set_song>
				break;
 74c:	d3 cf       	rjmp	.-90     	; 0x6f4 <main+0x46>
				case 'R':
				cli();
 74e:	f8 94       	cli
				Buffer_Init();
 750:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Buffer_Init>
				sei();
 754:	78 94       	sei
				UART_Write_Menu();
 756:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <UART_Write_Menu>
				break;
 75a:	cc cf       	rjmp	.-104    	; 0x6f4 <main+0x46>

0000075c <SerialPort_Init>:
 75c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 760:	96 e0       	ldi	r25, 0x06	; 6
 762:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 766:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 76a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 76e:	08 95       	ret

00000770 <SerialPort_TX_Enable>:
 770:	e1 ec       	ldi	r30, 0xC1	; 193
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	88 60       	ori	r24, 0x08	; 8
 778:	80 83       	st	Z, r24
 77a:	08 95       	ret

0000077c <SerialPort_TX_Interrupt_Enable>:
 77c:	e1 ec       	ldi	r30, 0xC1	; 193
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	80 62       	ori	r24, 0x20	; 32
 784:	80 83       	st	Z, r24
 786:	08 95       	ret

00000788 <SerialPort_TX_Interrupt_Disable>:
 788:	e1 ec       	ldi	r30, 0xC1	; 193
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	8f 7d       	andi	r24, 0xDF	; 223
 790:	80 83       	st	Z, r24
 792:	08 95       	ret

00000794 <SerialPort_RX_Enable>:
 794:	e1 ec       	ldi	r30, 0xC1	; 193
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	80 61       	ori	r24, 0x10	; 16
 79c:	80 83       	st	Z, r24
 79e:	08 95       	ret

000007a0 <SerialPort_RX_Interrupt_Enable>:
 7a0:	e1 ec       	ldi	r30, 0xC1	; 193
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	80 68       	ori	r24, 0x80	; 128
 7a8:	80 83       	st	Z, r24
 7aa:	08 95       	ret

000007ac <Buffer_Init>:
	return (TX_buffer.index_lectura < TX_buffer.index_escritura);
}

char hay_datos_RX_buffer() {
	return (RX_buffer.index_lectura < RX_buffer.index_escritura);
}
 7ac:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <TX_buffer+0x191>
 7b0:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <TX_buffer+0x190>
 7b4:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <TX_buffer+0x193>
 7b8:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <TX_buffer+0x192>
 7bc:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <RX_buffer+0x191>
 7c0:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <RX_buffer+0x190>
 7c4:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <RX_buffer+0x193>
 7c8:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <RX_buffer+0x192>
 7cc:	08 95       	ret

000007ce <get_TX_data>:
 7ce:	e8 2f       	mov	r30, r24
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	e9 5a       	subi	r30, 0xA9	; 169
 7d4:	fb 4f       	sbci	r31, 0xFB	; 251
 7d6:	80 81       	ld	r24, Z
 7d8:	08 95       	ret

000007da <get_RX_data_index_lectura>:
 7da:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <RX_buffer+0x192>
 7de:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <RX_buffer+0x193>
 7e2:	e5 51       	subi	r30, 0x15	; 21
 7e4:	fa 4f       	sbci	r31, 0xFA	; 250
 7e6:	80 81       	ld	r24, Z
 7e8:	08 95       	ret

000007ea <set_RX_data>:
 7ea:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <RX_buffer+0x190>
 7ee:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <RX_buffer+0x191>
 7f2:	e5 51       	subi	r30, 0x15	; 21
 7f4:	fa 4f       	sbci	r31, 0xFA	; 250
 7f6:	80 83       	st	Z, r24
 7f8:	08 95       	ret

000007fa <set_RX_data_UDR0>:
 7fa:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <RX_buffer+0x190>
 7fe:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <RX_buffer+0x191>
 802:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 806:	e5 51       	subi	r30, 0x15	; 21
 808:	fa 4f       	sbci	r31, 0xFA	; 250
 80a:	80 83       	st	Z, r24
 80c:	08 95       	ret

0000080e <get_TX_index_lectura>:
 80e:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <TX_buffer+0x192>
 812:	08 95       	ret

00000814 <reset_TX_index>:
 814:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <TX_buffer+0x193>
 818:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <TX_buffer+0x192>
 81c:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <TX_buffer+0x191>
 820:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <TX_buffer+0x190>
 824:	08 95       	ret

00000826 <inc_RX_index_escritura>:
 826:	eb e7       	ldi	r30, 0x7B	; 123
 828:	f7 e0       	ldi	r31, 0x07	; 7
 82a:	40 81       	ld	r20, Z
 82c:	51 81       	ldd	r21, Z+1	; 0x01
 82e:	4f 5f       	subi	r20, 0xFF	; 255
 830:	5f 4f       	sbci	r21, 0xFF	; 255
 832:	9a 01       	movw	r18, r20
 834:	32 95       	swap	r19
 836:	22 95       	swap	r18
 838:	2f 70       	andi	r18, 0x0F	; 15
 83a:	23 27       	eor	r18, r19
 83c:	3f 70       	andi	r19, 0x0F	; 15
 83e:	23 27       	eor	r18, r19
 840:	ae e3       	ldi	r26, 0x3E	; 62
 842:	ba e0       	ldi	r27, 0x0A	; 10
 844:	0e 94 25 05 	call	0xa4a	; 0xa4a <__umulhisi3>
 848:	20 e9       	ldi	r18, 0x90	; 144
 84a:	31 e0       	ldi	r19, 0x01	; 1
 84c:	bc 01       	movw	r22, r24
 84e:	62 9f       	mul	r22, r18
 850:	c0 01       	movw	r24, r0
 852:	63 9f       	mul	r22, r19
 854:	90 0d       	add	r25, r0
 856:	72 9f       	mul	r23, r18
 858:	90 0d       	add	r25, r0
 85a:	11 24       	eor	r1, r1
 85c:	48 1b       	sub	r20, r24
 85e:	59 0b       	sbc	r21, r25
 860:	51 83       	std	Z+1, r21	; 0x01
 862:	40 83       	st	Z, r20
 864:	08 95       	ret

00000866 <__vector_18>:
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	2f 93       	push	r18
 872:	3f 93       	push	r19
 874:	4f 93       	push	r20
 876:	5f 93       	push	r21
 878:	6f 93       	push	r22
 87a:	7f 93       	push	r23
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	af 93       	push	r26
 882:	bf 93       	push	r27
 884:	ef 93       	push	r30
 886:	ff 93       	push	r31
 888:	0e 94 fd 03 	call	0x7fa	; 0x7fa <set_RX_data_UDR0>
 88c:	0e 94 13 04 	call	0x826	; 0x826 <inc_RX_index_escritura>
 890:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <RX_buffer+0x190>
 894:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <RX_buffer+0x191>
 898:	e6 51       	subi	r30, 0x16	; 22
 89a:	fa 4f       	sbci	r31, 0xFA	; 250
 89c:	80 81       	ld	r24, Z
 89e:	8a 30       	cpi	r24, 0x0A	; 10
 8a0:	31 f4       	brne	.+12     	; 0x8ae <__vector_18+0x48>
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_RX_data>
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <FLAG_datos_recibidos>
 8ae:	ff 91       	pop	r31
 8b0:	ef 91       	pop	r30
 8b2:	bf 91       	pop	r27
 8b4:	af 91       	pop	r26
 8b6:	9f 91       	pop	r25
 8b8:	8f 91       	pop	r24
 8ba:	7f 91       	pop	r23
 8bc:	6f 91       	pop	r22
 8be:	5f 91       	pop	r21
 8c0:	4f 91       	pop	r20
 8c2:	3f 91       	pop	r19
 8c4:	2f 91       	pop	r18
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <inc_TX_index_lectura>:
 8d0:	e9 ee       	ldi	r30, 0xE9	; 233
 8d2:	f5 e0       	ldi	r31, 0x05	; 5
 8d4:	80 81       	ld	r24, Z
 8d6:	91 81       	ldd	r25, Z+1	; 0x01
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	91 83       	std	Z+1, r25	; 0x01
 8dc:	80 83       	st	Z, r24
 8de:	08 95       	ret

000008e0 <get_FLAG_datos_recibidos>:
 8e0:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <FLAG_datos_recibidos>
 8e4:	08 95       	ret

000008e6 <set_FLAG_datos_recibidos>:
 8e6:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <FLAG_datos_recibidos>
 8ea:	08 95       	ret

000008ec <UART_Write_Char_To_Buffer>:
 8ec:	cf 93       	push	r28
 8ee:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <TX_buffer+0x190>
 8f2:	30 91 e8 05 	lds	r19, 0x05E8	; 0x8005e8 <TX_buffer+0x191>
 8f6:	20 39       	cpi	r18, 0x90	; 144
 8f8:	31 40       	sbci	r19, 0x01	; 1
 8fa:	88 f4       	brcc	.+34     	; 0x91e <__stack+0x1f>
 8fc:	c8 2f       	mov	r28, r24
 8fe:	0e 94 c4 03 	call	0x788	; 0x788 <SerialPort_TX_Interrupt_Disable>
 902:	e7 ee       	ldi	r30, 0xE7	; 231
 904:	f5 e0       	ldi	r31, 0x05	; 5
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	dc 01       	movw	r26, r24
 90c:	a9 5a       	subi	r26, 0xA9	; 169
 90e:	bb 4f       	sbci	r27, 0xFB	; 251
 910:	cc 93       	st	X, r28
 912:	01 96       	adiw	r24, 0x01	; 1
 914:	91 83       	std	Z+1, r25	; 0x01
 916:	80 83       	st	Z, r24
 918:	0e 94 be 03 	call	0x77c	; 0x77c <SerialPort_TX_Interrupt_Enable>
 91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0x21>
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <UART_Write_String_To_Buffer>:
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	8c 01       	movw	r16, r24
 92c:	c0 e0       	ldi	r28, 0x00	; 0
 92e:	03 c0       	rjmp	.+6      	; 0x936 <UART_Write_String_To_Buffer+0x12>
 930:	0e 94 76 04 	call	0x8ec	; 0x8ec <UART_Write_Char_To_Buffer>
 934:	cf 5f       	subi	r28, 0xFF	; 255
 936:	f8 01       	movw	r30, r16
 938:	ec 0f       	add	r30, r28
 93a:	f1 1d       	adc	r31, r1
 93c:	80 81       	ld	r24, Z
 93e:	81 11       	cpse	r24, r1
 940:	f7 cf       	rjmp	.-18     	; 0x930 <UART_Write_String_To_Buffer+0xc>
 942:	8d e0       	ldi	r24, 0x0D	; 13
 944:	0e 94 76 04 	call	0x8ec	; 0x8ec <UART_Write_Char_To_Buffer>
 948:	8a e0       	ldi	r24, 0x0A	; 10
 94a:	0e 94 76 04 	call	0x8ec	; 0x8ec <UART_Write_Char_To_Buffer>
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	08 95       	ret

00000956 <hay_datos_TX_buffer>:
 956:	40 91 e9 05 	lds	r20, 0x05E9	; 0x8005e9 <TX_buffer+0x192>
 95a:	50 91 ea 05 	lds	r21, 0x05EA	; 0x8005ea <TX_buffer+0x193>
 95e:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <TX_buffer+0x190>
 962:	30 91 e8 05 	lds	r19, 0x05E8	; 0x8005e8 <TX_buffer+0x191>
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	42 17       	cp	r20, r18
 96a:	53 07       	cpc	r21, r19
 96c:	08 f0       	brcs	.+2      	; 0x970 <hay_datos_TX_buffer+0x1a>
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	08 95       	ret

00000972 <__vector_19>:
 972:	1f 92       	push	r1
 974:	0f 92       	push	r0
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	0f 92       	push	r0
 97a:	11 24       	eor	r1, r1
 97c:	2f 93       	push	r18
 97e:	3f 93       	push	r19
 980:	4f 93       	push	r20
 982:	5f 93       	push	r21
 984:	6f 93       	push	r22
 986:	7f 93       	push	r23
 988:	8f 93       	push	r24
 98a:	9f 93       	push	r25
 98c:	af 93       	push	r26
 98e:	bf 93       	push	r27
 990:	ef 93       	push	r30
 992:	ff 93       	push	r31
 994:	0e 94 07 04 	call	0x80e	; 0x80e <get_TX_index_lectura>
 998:	0e 94 e7 03 	call	0x7ce	; 0x7ce <get_TX_data>
 99c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 9a0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <inc_TX_index_lectura>
 9a4:	0e 94 ab 04 	call	0x956	; 0x956 <hay_datos_TX_buffer>
 9a8:	81 11       	cpse	r24, r1
 9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <__vector_19+0x42>
 9ac:	0e 94 0a 04 	call	0x814	; 0x814 <reset_TX_index>
 9b0:	0e 94 c4 03 	call	0x788	; 0x788 <SerialPort_TX_Interrupt_Disable>
 9b4:	ff 91       	pop	r31
 9b6:	ef 91       	pop	r30
 9b8:	bf 91       	pop	r27
 9ba:	af 91       	pop	r26
 9bc:	9f 91       	pop	r25
 9be:	8f 91       	pop	r24
 9c0:	7f 91       	pop	r23
 9c2:	6f 91       	pop	r22
 9c4:	5f 91       	pop	r21
 9c6:	4f 91       	pop	r20
 9c8:	3f 91       	pop	r19
 9ca:	2f 91       	pop	r18
 9cc:	0f 90       	pop	r0
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	0f 90       	pop	r0
 9d2:	1f 90       	pop	r1
 9d4:	18 95       	reti

000009d6 <UART_Write_Menu>:

const char msjReset[] ="RESET: Reinicia el sistema al estado inicial";
#define LONGRESET 44

void UART_Write_Menu(void){
	UART_Write_String_To_Buffer(msjBienvenida);
 9d6:	8e e0       	ldi	r24, 0x0E	; 14
 9d8:	94 e0       	ldi	r25, 0x04	; 4
 9da:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 9de:	86 ee       	ldi	r24, 0xE6	; 230
 9e0:	93 e0       	ldi	r25, 0x03	; 3
 9e2:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 9e6:	84 eb       	ldi	r24, 0xB4	; 180
 9e8:	93 e0       	ldi	r25, 0x03	; 3
 9ea:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 9ee:	8b e7       	ldi	r24, 0x7B	; 123
 9f0:	93 e0       	ldi	r25, 0x03	; 3
 9f2:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 9f6:	8e e4       	ldi	r24, 0x4E	; 78
 9f8:	93 e0       	ldi	r25, 0x03	; 3
 9fa:	0e 94 92 04 	call	0x924	; 0x924 <UART_Write_String_To_Buffer>
 9fe:	08 95       	ret

00000a00 <__divmodsi4>:
 a00:	05 2e       	mov	r0, r21
 a02:	97 fb       	bst	r25, 7
 a04:	1e f4       	brtc	.+6      	; 0xa0c <__divmodsi4+0xc>
 a06:	00 94       	com	r0
 a08:	0e 94 17 05 	call	0xa2e	; 0xa2e <__negsi2>
 a0c:	57 fd       	sbrc	r21, 7
 a0e:	07 d0       	rcall	.+14     	; 0xa1e <__divmodsi4_neg2>
 a10:	0e 94 34 05 	call	0xa68	; 0xa68 <__udivmodsi4>
 a14:	07 fc       	sbrc	r0, 7
 a16:	03 d0       	rcall	.+6      	; 0xa1e <__divmodsi4_neg2>
 a18:	4e f4       	brtc	.+18     	; 0xa2c <__divmodsi4_exit>
 a1a:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__negsi2>

00000a1e <__divmodsi4_neg2>:
 a1e:	50 95       	com	r21
 a20:	40 95       	com	r20
 a22:	30 95       	com	r19
 a24:	21 95       	neg	r18
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	4f 4f       	sbci	r20, 0xFF	; 255
 a2a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a2c <__divmodsi4_exit>:
 a2c:	08 95       	ret

00000a2e <__negsi2>:
 a2e:	90 95       	com	r25
 a30:	80 95       	com	r24
 a32:	70 95       	com	r23
 a34:	61 95       	neg	r22
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	08 95       	ret

00000a3e <__tablejump2__>:
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	05 90       	lpm	r0, Z+
 a44:	f4 91       	lpm	r31, Z
 a46:	e0 2d       	mov	r30, r0
 a48:	09 94       	ijmp

00000a4a <__umulhisi3>:
 a4a:	a2 9f       	mul	r26, r18
 a4c:	b0 01       	movw	r22, r0
 a4e:	b3 9f       	mul	r27, r19
 a50:	c0 01       	movw	r24, r0
 a52:	a3 9f       	mul	r26, r19
 a54:	70 0d       	add	r23, r0
 a56:	81 1d       	adc	r24, r1
 a58:	11 24       	eor	r1, r1
 a5a:	91 1d       	adc	r25, r1
 a5c:	b2 9f       	mul	r27, r18
 a5e:	70 0d       	add	r23, r0
 a60:	81 1d       	adc	r24, r1
 a62:	11 24       	eor	r1, r1
 a64:	91 1d       	adc	r25, r1
 a66:	08 95       	ret

00000a68 <__udivmodsi4>:
 a68:	a1 e2       	ldi	r26, 0x21	; 33
 a6a:	1a 2e       	mov	r1, r26
 a6c:	aa 1b       	sub	r26, r26
 a6e:	bb 1b       	sub	r27, r27
 a70:	fd 01       	movw	r30, r26
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <__udivmodsi4_ep>

00000a74 <__udivmodsi4_loop>:
 a74:	aa 1f       	adc	r26, r26
 a76:	bb 1f       	adc	r27, r27
 a78:	ee 1f       	adc	r30, r30
 a7a:	ff 1f       	adc	r31, r31
 a7c:	a2 17       	cp	r26, r18
 a7e:	b3 07       	cpc	r27, r19
 a80:	e4 07       	cpc	r30, r20
 a82:	f5 07       	cpc	r31, r21
 a84:	20 f0       	brcs	.+8      	; 0xa8e <__udivmodsi4_ep>
 a86:	a2 1b       	sub	r26, r18
 a88:	b3 0b       	sbc	r27, r19
 a8a:	e4 0b       	sbc	r30, r20
 a8c:	f5 0b       	sbc	r31, r21

00000a8e <__udivmodsi4_ep>:
 a8e:	66 1f       	adc	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	1a 94       	dec	r1
 a98:	69 f7       	brne	.-38     	; 0xa74 <__udivmodsi4_loop>
 a9a:	60 95       	com	r22
 a9c:	70 95       	com	r23
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	9b 01       	movw	r18, r22
 aa4:	ac 01       	movw	r20, r24
 aa6:	bd 01       	movw	r22, r26
 aa8:	cf 01       	movw	r24, r30
 aaa:	08 95       	ret

00000aac <_exit>:
 aac:	f8 94       	cli

00000aae <__stop_program>:
 aae:	ff cf       	rjmp	.-2      	; 0xaae <__stop_program>
