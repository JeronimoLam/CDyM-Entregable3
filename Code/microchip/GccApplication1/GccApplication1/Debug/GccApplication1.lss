
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  008001fe  008001fe  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001573  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  00001d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec4  00000000  00000000  0000286d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000927  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a81  00000000  00000000  00004577  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00004ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_18>
  4c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_duration_timer>:

// @brief *resumen*
// @param  *parametrsoq que resumen*
// @return *lo que retorna*
void set_tempo(unsigned int tempo_num) {
	tempo = tempo_num;
  a6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <duration_timer+0x1>
  aa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <duration_timer>
  ae:	08 95       	ret

000000b0 <set_sound_playing>:
  b0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x1>
  b4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end>
  b8:	08 95       	ret

000000ba <get_duration_timer>:
// @brief *resumen*
// @param  *parametrsoq que resumen*
// @return *lo que retorna*
int get_duration_timer() {
	return duration_timer;
}
  ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <duration_timer>
  be:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <duration_timer+0x1>
  c2:	08 95       	ret

000000c4 <__vector_14>:



// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	unsigned int duration_timer = get_duration_timer();
  e6:	0e 94 5d 00 	call	0xba	; 0xba <get_duration_timer>
	if (duration_timer) {
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	21 f0       	breq	.+8      	; 0xf6 <__vector_14+0x32>
		duration_timer--; // Decremento el timer si > 0
		set_duration_timer(duration_timer);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <set_duration_timer>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_14+0x3e>
	}
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
  f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		set_sound_playing(0);                  // Borro el flag para avisar que no hay una nota sonando
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <set_sound_playing>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <main>:
	// char MENU_flag=0;


	//Habilito la m?scara de interrupciones

	Buffer_Init();
 124:	0e 94 ef 00 	call	0x1de	; 0x1de <Buffer_Init>
	SerialPort_Init(103); // 9600 baudios para 16MHz
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	0e 94 c7 00 	call	0x18e	; 0x18e <SerialPort_Init>
	SerialPort_TX_Enable();
 12e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 132:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 136:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <SerialPort_RX_Interrupt_Enable>

	sei();
 13a:	78 94       	sei

	int i = 0;
	uint8_t * string = "hola\r\n\0";

	UART_Write_String_To_Buffer(msjBienvenida);
 13c:	80 ec       	ldi	r24, 0xC0	; 192
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 91 01 	call	0x322	; 0x322 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjPlay);
 144:	88 e9       	ldi	r24, 0x98	; 152
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 91 01 	call	0x322	; 0x322 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjStop);
 14c:	86 e6       	ldi	r24, 0x66	; 102
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 91 01 	call	0x322	; 0x322 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjNum);
 154:	8d e2       	ldi	r24, 0x2D	; 45
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 91 01 	call	0x322	; 0x322 <UART_Write_String_To_Buffer>
	UART_Write_String_To_Buffer(msjReset);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 91 01 	call	0x322	; 0x322 <UART_Write_String_To_Buffer>

	uint8_t aa = '\r';
	while(1)
	{
		if (get_FLAG_datos_recibidos()) {
 164:	0e 94 6f 01 	call	0x2de	; 0x2de <get_FLAG_datos_recibidos>
 168:	88 23       	and	r24, r24
 16a:	39 f0       	breq	.+14     	; 0x17a <main+0x56>
			set_FLAG_datos_recibidos(0);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <set_FLAG_datos_recibidos>
			UART_Write_String_To_Buffer(get_RX_data());
 172:	0e 94 0e 01 	call	0x21c	; 0x21c <get_RX_data>
 176:	0e 94 91 01 	call	0x322	; 0x322 <UART_Write_String_To_Buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	89 e6       	ldi	r24, 0x69	; 105
 17e:	98 e1       	ldi	r25, 0x18	; 24
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x5c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x66>
 18a:	00 00       	nop
		// 	set_duration_timer(2000);
		// 	set_sound_playing(1);
		// 	while (get_sound_playing());
		// }
		i++;
	}
 18c:	eb cf       	rjmp	.-42     	; 0x164 <main+0x40>

0000018e <SerialPort_Init>:
// Inicialización de Puerto Serie

void SerialPort_Init(uint8_t config){
	// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
	// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
	UCSR0B = 0;
 18e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = (unsigned char)(config>>8);
 198:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)config;
 19c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1a0:	08 95       	ret

000001a2 <SerialPort_TX_Enable>:


// Inicialización de Transmisor

void SerialPort_TX_Enable(void){
	UCSR0B |= (1<<TXEN0);
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <SerialPort_TX_Interrupt_Enable>:
}

void SerialPort_TX_Interrupt_Enable(void){
	UCSR0B |= (1<<UDRIE0);
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <SerialPort_TX_Interrupt_Disable>:
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 1ba:	e1 ec       	ldi	r30, 0xC1	; 193
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret

000001c6 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 1c6:	e1 ec       	ldi	r30, 0xC1	; 193
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 1d2:	e1 ec       	ldi	r30, 0xC1	; 193
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	80 83       	st	Z, r24
 1dc:	08 95       	ret

000001de <Buffer_Init>:
		*dato=UDR0;
		return 1;
	}
	else
		return 0;
}
 1de:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x191>
 1e2:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x190>
 1e6:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TX_buffer+0x193>
 1ea:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x192>
 1ee:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <RX_buffer+0x191>
 1f2:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <RX_buffer+0x190>
 1f6:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <RX_buffer+0x193>
 1fa:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <RX_buffer+0x192>
 1fe:	08 95       	ret

00000200 <get_TX_data>:
 200:	e8 2f       	mov	r30, r24
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	e9 5f       	subi	r30, 0xF9	; 249
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	80 81       	ld	r24, Z
 20a:	08 95       	ret

0000020c <get_RX_data_index_lectura>:
 20c:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <RX_buffer+0x192>
 210:	f0 91 2e 05 	lds	r31, 0x052E	; 0x80052e <RX_buffer+0x193>
 214:	e5 56       	subi	r30, 0x65	; 101
 216:	fc 4f       	sbci	r31, 0xFC	; 252
 218:	80 81       	ld	r24, Z
 21a:	08 95       	ret

0000021c <get_RX_data>:
 21c:	8b e9       	ldi	r24, 0x9B	; 155
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	08 95       	ret

00000222 <set_RX_data>:
 222:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 226:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 22a:	e5 56       	subi	r30, 0x65	; 101
 22c:	fc 4f       	sbci	r31, 0xFC	; 252
 22e:	80 83       	st	Z, r24
 230:	08 95       	ret

00000232 <set_RX_data_UDR0>:
 232:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <RX_buffer+0x190>
 236:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <RX_buffer+0x191>
 23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23e:	e5 56       	subi	r30, 0x65	; 101
 240:	fc 4f       	sbci	r31, 0xFC	; 252
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <get_TX_index_lectura>:
 246:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <TX_buffer+0x192>
 24a:	08 95       	ret

0000024c <reset_TX_index>:
 24c:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TX_buffer+0x193>
 250:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TX_buffer+0x192>
 254:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TX_buffer+0x191>
 258:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <TX_buffer+0x190>
 25c:	08 95       	ret

0000025e <inc_RX_index_escritura>:
 25e:	eb e2       	ldi	r30, 0x2B	; 43
 260:	f5 e0       	ldi	r31, 0x05	; 5
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <__vector_18>:
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	0e 94 19 01 	call	0x232	; 0x232 <set_RX_data_UDR0>
 294:	0e 94 2f 01 	call	0x25e	; 0x25e <inc_RX_index_escritura>
 298:	0e 94 06 01 	call	0x20c	; 0x20c <get_RX_data_index_lectura>
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	31 f4       	brne	.+12     	; 0x2ac <__vector_18+0x3e>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 11 01 	call	0x222	; 0x222 <set_RX_data>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <FLAG_datos_recibidos>
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <inc_TX_index_lectura>:
 2ce:	e9 e9       	ldi	r30, 0x99	; 153
 2d0:	f3 e0       	ldi	r31, 0x03	; 3
 2d2:	80 81       	ld	r24, Z
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	91 83       	std	Z+1, r25	; 0x01
 2da:	80 83       	st	Z, r24
 2dc:	08 95       	ret

000002de <get_FLAG_datos_recibidos>:
 2de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <FLAG_datos_recibidos>
 2e2:	08 95       	ret

000002e4 <set_FLAG_datos_recibidos>:
 2e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <FLAG_datos_recibidos>
 2e8:	08 95       	ret

000002ea <UART_Write_Char_To_Buffer>:
 2ea:	cf 93       	push	r28
 2ec:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <TX_buffer+0x190>
 2f0:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <TX_buffer+0x191>
 2f4:	20 39       	cpi	r18, 0x90	; 144
 2f6:	31 40       	sbci	r19, 0x01	; 1
 2f8:	88 f4       	brcc	.+34     	; 0x31c <UART_Write_Char_To_Buffer+0x32>
 2fa:	c8 2f       	mov	r28, r24
 2fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SerialPort_TX_Interrupt_Disable>
 300:	e7 e9       	ldi	r30, 0x97	; 151
 302:	f3 e0       	ldi	r31, 0x03	; 3
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	dc 01       	movw	r26, r24
 30a:	a9 5f       	subi	r26, 0xF9	; 249
 30c:	bd 4f       	sbci	r27, 0xFD	; 253
 30e:	cc 93       	st	X, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
 316:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SerialPort_TX_Interrupt_Enable>
 31a:	01 c0       	rjmp	.+2      	; 0x31e <UART_Write_Char_To_Buffer+0x34>
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <UART_Write_String_To_Buffer>:
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	8c 01       	movw	r16, r24
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	03 c0       	rjmp	.+6      	; 0x334 <UART_Write_String_To_Buffer+0x12>
 32e:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_Write_Char_To_Buffer>
 332:	cf 5f       	subi	r28, 0xFF	; 255
 334:	f8 01       	movw	r30, r16
 336:	ec 0f       	add	r30, r28
 338:	f1 1d       	adc	r31, r1
 33a:	80 81       	ld	r24, Z
 33c:	81 11       	cpse	r24, r1
 33e:	f7 cf       	rjmp	.-18     	; 0x32e <UART_Write_String_To_Buffer+0xc>
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_Write_Char_To_Buffer>
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_Write_Char_To_Buffer>
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <hay_datos_TX_buffer>:
		TX_buffer.index_escritura = 0;
	}
}

char hay_datos_TX_buffer() {
	return (TX_buffer.index_lectura < TX_buffer.index_escritura);
 354:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <TX_buffer+0x192>
 358:	50 91 9a 03 	lds	r21, 0x039A	; 0x80039a <TX_buffer+0x193>
 35c:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <TX_buffer+0x190>
 360:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <TX_buffer+0x191>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	42 17       	cp	r20, r18
 368:	53 07       	cpc	r21, r19
 36a:	08 f0       	brcs	.+2      	; 0x36e <hay_datos_TX_buffer+0x1a>
 36c:	80 e0       	ldi	r24, 0x00	; 0
}
 36e:	08 95       	ret

00000370 <__vector_19>:
		set_RX_data('\0');
		FLAG_datos_recibidos=1;
	}
}

ISR(USART_UDRE_vect){
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	UDR0 = get_TX_data(get_TX_index_lectura()); // BufferTX[index_lectura]
 392:	0e 94 23 01 	call	0x246	; 0x246 <get_TX_index_lectura>
 396:	0e 94 00 01 	call	0x200	; 0x200 <get_TX_data>
 39a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	inc_TX_index_lectura();						// index_lectura++
 39e:	0e 94 67 01 	call	0x2ce	; 0x2ce <inc_TX_index_lectura>
	if (!hay_datos_TX_buffer()) {	// buffer_len = 8
 3a2:	0e 94 aa 01 	call	0x354	; 0x354 <hay_datos_TX_buffer>
 3a6:	81 11       	cpse	r24, r1
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__vector_19+0x42>
		reset_TX_index();
 3aa:	0e 94 26 01 	call	0x24c	; 0x24c <reset_TX_index>
		SerialPort_TX_Interrupt_Disable();
 3ae:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SerialPort_TX_Interrupt_Disable>
	}
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
