
Entregable3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000788  00800100  0000053a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800888  00800888  00000d56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000768  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000666  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a4  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002d6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	a0 01       	movw	r20, r0
  6a:	a2 01       	movw	r20, r4
  6c:	a4 01       	movw	r20, r8
  6e:	98 01       	movw	r18, r16
  70:	9a 01       	movw	r18, r20
  72:	9c 01       	movw	r18, r24
  74:	9e 01       	movw	r18, r28

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	18 e0       	ldi	r17, 0x08	; 8
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ea e3       	ldi	r30, 0x3A	; 58
  8a:	f5 e0       	ldi	r31, 0x05	; 5
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a8 38       	cpi	r26, 0x88	; 136
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	28 e0       	ldi	r18, 0x08	; 8
  9a:	a8 e8       	ldi	r26, 0x88	; 136
  9c:	b8 e0       	ldi	r27, 0x08	; 8
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 39       	cpi	r26, 0x90	; 144
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 21 02 	call	0x442	; 0x442 <main>
  ac:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_14>:
unsigned char duration, octave;
unsigned int tempo;

// Control de la duraci?n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci?n de comparaci?n del Timer 0
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	if (duration_timer) duration_timer--; // Decremento el timer si > 0
  c2:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <duration_timer>
  c6:	90 91 8d 08 	lds	r25, 0x088D	; 0x80088d <duration_timer+0x1>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	31 f0       	breq	.+12     	; 0xda <__vector_14+0x26>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <duration_timer+0x1>
  d4:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <duration_timer>
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <__vector_14+0x32>
	else                                  // si timer es = 0
	{
		TCCR1A=0;	// Desactivo el timer 1
  da:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sound_playing = 0;                  // Borro el flag para avisar que no hay una nota sonando
  de:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <sound_playing+0x1>
  e2:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <sound_playing>
	}
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <sound>:


// Saco el sonido por el PIN5 del PORTD: freq en Hz, dur en ms
void sound(unsigned int freq, unsigned int dur)
{
	while (sound_playing);      // Si hay alg?n sonido presente, espero a que termine
  f4:	40 91 8e 08 	lds	r20, 0x088E	; 0x80088e <sound_playing>
  f8:	50 91 8f 08 	lds	r21, 0x088F	; 0x80088f <sound_playing+0x1>
  fc:	45 2b       	or	r20, r21
  fe:	d1 f7       	brne	.-12     	; 0xf4 <sound>
	
	duration_timer = dur;       // Seteo el tiempo de duraci?n
 100:	70 93 8d 08 	sts	0x088D, r23	; 0x80088d <duration_timer+0x1>
 104:	60 93 8c 08 	sts	0x088C, r22	; 0x80088c <duration_timer>
	
	// Activo la salida y configuro el timer para que genere la se?al de la frecuencia apropiada
	TCCR1A|=(1<<COM1A0);
 108:	e0 e8       	ldi	r30, 0x80	; 128
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	20 81       	ld	r18, Z
 10e:	20 64       	ori	r18, 0x40	; 64
 110:	20 83       	st	Z, r18
	
	// Actualizo el valor de OCR1A para que produzca la nota adecuada
	OCR1A=(8000000/(freq))-1;
 112:	9c 01       	movw	r18, r24
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	72 e1       	ldi	r23, 0x12	; 18
 11c:	8a e7       	ldi	r24, 0x7A	; 122
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__divmodsi4>
 124:	21 50       	subi	r18, 0x01	; 1
 126:	31 09       	sbc	r19, r1
 128:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	sound_playing = 1;          // Activo el flag para avisar que hay una nota sonando
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 8f 08 	sts	0x088F, r25	; 0x80088f <sound_playing+0x1>
 138:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <sound_playing>
 13c:	08 95       	ret

0000013e <play_song>:
}

// Esta funci?n reproduce una canci?n que se le pase en un string con formato RTTTL
void play_song(char *song)
{
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	fc 01       	movw	r30, r24
	unsigned char temp_duration, temp_octave, current_note, dot_flag;
	unsigned int calc_duration;
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <duration>
	tempo = 63;                   // Tempo est?ndar = 63 bpm
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <__data_end+0x1>
 162:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <__data_end>
	octave = 6;                   // Octava est?ndar = 6th
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <octave>
	while (*song != ':') song++;  // Busca el primer ':'
 16c:	01 c0       	rjmp	.+2      	; 0x170 <play_song+0x32>
 16e:	31 96       	adiw	r30, 0x01	; 1
 170:	80 81       	ld	r24, Z
 172:	8a 33       	cpi	r24, 0x3A	; 58
 174:	e1 f7       	brne	.-8      	; 0x16e <play_song+0x30>
	song++;                       // Saltea el primer ':'
 176:	31 96       	adiw	r30, 0x01	; 1
	while (*song!=':')            // Repite hasta encontrar ':'
 178:	aa c0       	rjmp	.+340    	; 0x2ce <play_song+0x190>
	{
		if (*song == 'd')           // Entra si es el seteo de la duraci?n
 17a:	84 36       	cpi	r24, 0x64	; 100
 17c:	61 f5       	brne	.+88     	; 0x1d6 <play_song+0x98>
		{
			duration = 0;             // Seteo la duraci?n en cero (temporalmente)
 17e:	10 92 8a 08 	sts	0x088A, r1	; 0x80088a <duration>
			song++;                   // Avanzo al pr?ximo caracter
 182:	df 01       	movw	r26, r30
 184:	11 96       	adiw	r26, 0x01	; 1
			while (*song == '=') song++;  // Salteo '='
 186:	01 c0       	rjmp	.+2      	; 0x18a <play_song+0x4c>
 188:	11 96       	adiw	r26, 0x01	; 1
 18a:	8c 91       	ld	r24, X
 18c:	8d 33       	cpi	r24, 0x3D	; 61
 18e:	e1 f3       	breq	.-8      	; 0x188 <play_song+0x4a>
 190:	01 c0       	rjmp	.+2      	; 0x194 <play_song+0x56>
			while (*song == ' ') song++;  // Salteo los espacios
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	8c 91       	ld	r24, X
 196:	80 32       	cpi	r24, 0x20	; 32
 198:	e1 f3       	breq	.-8      	; 0x192 <play_song+0x54>
			// Si el caracter es un n?mero, seteo la duraci?n
			if (*song>='0' && *song<='9') duration = *song - '0';
 19a:	80 53       	subi	r24, 0x30	; 48
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	10 f4       	brcc	.+4      	; 0x1a4 <play_song+0x66>
 1a0:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <duration>
			song++;                   // Avanzo al pr?ximo caracter
 1a4:	fd 01       	movw	r30, r26
 1a6:	31 96       	adiw	r30, 0x01	; 1
			// Me fijo si el caracter es un n?mero, ya que la diraci?n puede ser de dos d?gitos de largo
			if (*song>='0' && *song<='9')
 1a8:	11 96       	adiw	r26, 0x01	; 1
 1aa:	8c 91       	ld	r24, X
 1ac:	90 ed       	ldi	r25, 0xD0	; 208
 1ae:	98 0f       	add	r25, r24
 1b0:	9a 30       	cpi	r25, 0x0A	; 10
 1b2:	70 f4       	brcc	.+28     	; 0x1d0 <play_song+0x92>
			{ // Multiplico duraci?n por 10 y le agrego el valor del caracter
				duration = duration*10 + (*song - '0');
 1b4:	90 91 8a 08 	lds	r25, 0x088A	; 0x80088a <duration>
 1b8:	99 0f       	add	r25, r25
 1ba:	29 2f       	mov	r18, r25
 1bc:	22 0f       	add	r18, r18
 1be:	22 0f       	add	r18, r18
 1c0:	92 0f       	add	r25, r18
 1c2:	89 0f       	add	r24, r25
 1c4:	80 53       	subi	r24, 0x30	; 48
 1c6:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <duration>
				song++;                 // Avanzo al pr?ximo caracter
 1ca:	31 96       	adiw	r30, 0x01	; 1
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <play_song+0x92>
			}
			while (*song == ',') song++;  // Salteo ','
 1ce:	31 96       	adiw	r30, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	8c 32       	cpi	r24, 0x2C	; 44
 1d4:	e1 f3       	breq	.-8      	; 0x1ce <play_song+0x90>
		}
		
		if (*song == 'o')           // Entra si es el seteo de la octava
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 36       	cpi	r24, 0x6F	; 111
 1da:	c1 f4       	brne	.+48     	; 0x20c <play_song+0xce>
		{
			octave = 0;               // Seteo la octava en cero (temporalmente)
 1dc:	10 92 8b 08 	sts	0x088B, r1	; 0x80088b <octave>
			song++;                   // Avanzo al pr?ximo caracter
 1e0:	31 96       	adiw	r30, 0x01	; 1
			while (*song == '=') song++;  // Salteo '='
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <play_song+0xa8>
 1e4:	31 96       	adiw	r30, 0x01	; 1
 1e6:	80 81       	ld	r24, Z
 1e8:	8d 33       	cpi	r24, 0x3D	; 61
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <play_song+0xa6>
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <play_song+0xb2>
			while (*song == ' ') song++;  // Salteo los espacios
 1ee:	31 96       	adiw	r30, 0x01	; 1
 1f0:	80 81       	ld	r24, Z
 1f2:	80 32       	cpi	r24, 0x20	; 32
 1f4:	e1 f3       	breq	.-8      	; 0x1ee <play_song+0xb0>
			// Si el caracter es un n?mero, seteo la octava
			if (*song>='0' && *song<='9') octave = *song - '0';
 1f6:	80 53       	subi	r24, 0x30	; 48
 1f8:	8a 30       	cpi	r24, 0x0A	; 10
 1fa:	10 f4       	brcc	.+4      	; 0x200 <play_song+0xc2>
 1fc:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <octave>
			song++;                   // Avanzo al pr?ximo caracter
 200:	31 96       	adiw	r30, 0x01	; 1
			while (*song == ',') song++;  // Salteo ','
 202:	01 c0       	rjmp	.+2      	; 0x206 <play_song+0xc8>
 204:	31 96       	adiw	r30, 0x01	; 1
 206:	80 81       	ld	r24, Z
 208:	8c 32       	cpi	r24, 0x2C	; 44
 20a:	e1 f3       	breq	.-8      	; 0x204 <play_song+0xc6>
		}
		if (*song == 'b')           // Entra si es el seteo del tempo (beats por minuto)
 20c:	80 81       	ld	r24, Z
 20e:	82 36       	cpi	r24, 0x62	; 98
 210:	09 f0       	breq	.+2      	; 0x214 <play_song+0xd6>
 212:	5a c0       	rjmp	.+180    	; 0x2c8 <play_song+0x18a>
		{
			tempo = 0;                // Seteo el tempo en cero (temporalmente)
 214:	10 92 89 08 	sts	0x0889, r1	; 0x800889 <__data_end+0x1>
 218:	10 92 88 08 	sts	0x0888, r1	; 0x800888 <__data_end>
			song++;                   // Avanzo al pr?ximo caracter
 21c:	df 01       	movw	r26, r30
 21e:	11 96       	adiw	r26, 0x01	; 1
			while (*song == '=') song++;  // Salteo '='
 220:	01 c0       	rjmp	.+2      	; 0x224 <play_song+0xe6>
 222:	11 96       	adiw	r26, 0x01	; 1
 224:	8c 91       	ld	r24, X
 226:	8d 33       	cpi	r24, 0x3D	; 61
 228:	e1 f3       	breq	.-8      	; 0x222 <play_song+0xe4>
 22a:	01 c0       	rjmp	.+2      	; 0x22e <play_song+0xf0>
			while (*song == ' ') song++;  // Salteo los espacios
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	8c 91       	ld	r24, X
 230:	80 32       	cpi	r24, 0x20	; 32
 232:	e1 f3       	breq	.-8      	; 0x22c <play_song+0xee>
			// Ahora leo el seteo del tempo (puede tener 3 d?gitos de largo)
			if (*song>='0' && *song<='9') tempo = *song - '0';
 234:	90 ed       	ldi	r25, 0xD0	; 208
 236:	98 0f       	add	r25, r24
 238:	9a 30       	cpi	r25, 0x0A	; 10
 23a:	30 f4       	brcc	.+12     	; 0x248 <play_song+0x10a>
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	c0 97       	sbiw	r24, 0x30	; 48
 240:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <__data_end+0x1>
 244:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <__data_end>
			song++;                   // Avanzo al pr?ximo caracter
 248:	fd 01       	movw	r30, r26
 24a:	31 96       	adiw	r30, 0x01	; 1
			if (*song>='0' && *song<='9')
 24c:	11 96       	adiw	r26, 0x01	; 1
 24e:	4c 91       	ld	r20, X
 250:	11 97       	sbiw	r26, 0x01	; 1
 252:	80 ed       	ldi	r24, 0xD0	; 208
 254:	84 0f       	add	r24, r20
 256:	8a 30       	cpi	r24, 0x0A	; 10
 258:	90 f5       	brcc	.+100    	; 0x2be <play_song+0x180>
			{
				tempo = tempo*10 + (*song - '0'); // El tempo tiene dos d?gitos
 25a:	20 91 88 08 	lds	r18, 0x0888	; 0x800888 <__data_end>
 25e:	30 91 89 08 	lds	r19, 0x0889	; 0x800889 <__data_end+0x1>
 262:	c9 01       	movw	r24, r18
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	82 0f       	add	r24, r18
 276:	93 1f       	adc	r25, r19
 278:	84 0f       	add	r24, r20
 27a:	91 1d       	adc	r25, r1
 27c:	c0 97       	sbiw	r24, 0x30	; 48
 27e:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <__data_end+0x1>
 282:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <__data_end>
				song++;                 // Avanzo al pr?ximo caracter
 286:	31 96       	adiw	r30, 0x01	; 1
				if (*song>='0' && *song<='9')
 288:	12 96       	adiw	r26, 0x02	; 2
 28a:	2c 91       	ld	r18, X
 28c:	30 ed       	ldi	r19, 0xD0	; 208
 28e:	32 0f       	add	r19, r18
 290:	3a 30       	cpi	r19, 0x0A	; 10
 292:	a8 f4       	brcc	.+42     	; 0x2be <play_song+0x180>
				{
					tempo = tempo*10 + (*song - '0'); // El tempo tiene tres d?gitos
 294:	ac 01       	movw	r20, r24
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	84 0f       	add	r24, r20
 2a8:	95 1f       	adc	r25, r21
 2aa:	82 0f       	add	r24, r18
 2ac:	91 1d       	adc	r25, r1
 2ae:	c0 97       	sbiw	r24, 0x30	; 48
 2b0:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <__data_end+0x1>
 2b4:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <__data_end>
					song++;               // Avanzo al pr?ximo caracter
 2b8:	31 96       	adiw	r30, 0x01	; 1
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <play_song+0x180>
				}
			}
			while (*song == ',') song++;  // Salteo ','
 2bc:	31 96       	adiw	r30, 0x01	; 1
 2be:	80 81       	ld	r24, Z
 2c0:	8c 32       	cpi	r24, 0x2C	; 44
 2c2:	e1 f3       	breq	.-8      	; 0x2bc <play_song+0x17e>
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <play_song+0x18a>
		}
		while (*song == ',') song++;    // Salteo ','
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	80 81       	ld	r24, Z
 2ca:	8c 32       	cpi	r24, 0x2C	; 44
 2cc:	e1 f3       	breq	.-8      	; 0x2c6 <play_song+0x188>
	duration = 4;                 // Duraci?n est?ndar = 4/4 = 1 beat
	tempo = 63;                   // Tempo est?ndar = 63 bpm
	octave = 6;                   // Octava est?ndar = 6th
	while (*song != ':') song++;  // Busca el primer ':'
	song++;                       // Saltea el primer ':'
	while (*song!=':')            // Repite hasta encontrar ':'
 2ce:	80 81       	ld	r24, Z
 2d0:	8a 33       	cpi	r24, 0x3A	; 58
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <play_song+0x198>
 2d4:	52 cf       	rjmp	.-348    	; 0x17a <play_song+0x3c>
			}
			while (*song == ',') song++;  // Salteo ','
		}
		while (*song == ',') song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
 2d6:	ef 01       	movw	r28, r30
 2d8:	21 96       	adiw	r28, 0x01	; 1
	// read the musical notes
	while (*song)                 // Repito hasta que el caracter sea null
 2da:	a5 c0       	rjmp	.+330    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
 2dc:	f0 90 8b 08 	lds	r15, 0x088B	; 0x80088b <octave>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
 2e0:	00 91 8a 08 	lds	r16, 0x088A	; 0x80088a <duration>
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
 2e4:	80 53       	subi	r24, 0x30	; 48
 2e6:	8a 30       	cpi	r24, 0x0A	; 10
 2e8:	a0 f4       	brcc	.+40     	; 0x312 <play_song+0x1d4>
		{
			temp_duration = *song - '0';
			song++;
 2ea:	ae 01       	movw	r20, r28
 2ec:	4f 5f       	subi	r20, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
			if (*song>='0' && *song<='9')
 2f0:	99 81       	ldd	r25, Y+1	; 0x01
 2f2:	20 ed       	ldi	r18, 0xD0	; 208
 2f4:	29 0f       	add	r18, r25
 2f6:	2a 30       	cpi	r18, 0x0A	; 10
 2f8:	50 f4       	brcc	.+20     	; 0x30e <play_song+0x1d0>
			{
				temp_duration = temp_duration*10 + (*song - '0');
 2fa:	88 0f       	add	r24, r24
 2fc:	08 2f       	mov	r16, r24
 2fe:	00 0f       	add	r16, r16
 300:	00 0f       	add	r16, r16
 302:	80 0f       	add	r24, r16
 304:	08 2f       	mov	r16, r24
 306:	09 0f       	add	r16, r25
 308:	00 53       	subi	r16, 0x30	; 48
				song++;
 30a:	22 96       	adiw	r28, 0x02	; 2
 30c:	02 c0       	rjmp	.+4      	; 0x312 <play_song+0x1d4>
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
		dot_flag = 0;               // Borro el flag de detecci?n de punto
		// Busco un prefijo de duraci?n
		if (*song>='0' && *song<='9')
		{
			temp_duration = *song - '0';
 30e:	08 2f       	mov	r16, r24
			song++;
 310:	ea 01       	movw	r28, r20
				temp_duration = temp_duration*10 + (*song - '0');
				song++;
			}
		}
		// Busco una nota
		switch (*song)
 312:	e8 81       	ld	r30, Y
 314:	8e 2f       	mov	r24, r30
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	e1 56       	subi	r30, 0x61	; 97
 31c:	f1 09       	sbc	r31, r1
 31e:	e7 30       	cpi	r30, 0x07	; 7
 320:	f1 05       	cpc	r31, r1
 322:	20 f4       	brcc	.+8      	; 0x32c <play_song+0x1ee>
 324:	ec 5c       	subi	r30, 0xCC	; 204
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__tablejump2__>
	}
	song++;                       // Avanzo al pr?ximo caracter
	// read the musical notes
	while (*song)                 // Repito hasta que el caracter sea null
	{
		current_note = 255;         // Nota por defecto = pausa
 32c:	1f ef       	ldi	r17, 0xFF	; 255
 32e:	0d c0       	rjmp	.+26     	; 0x34a <play_song+0x20c>
		}
		// Busco una nota
		switch (*song)
		{
			case 'c': current_note = 0; break;    // C (do)
			case 'd': current_note = 2; break;    // D (re)
 330:	12 e0       	ldi	r17, 0x02	; 2
 332:	0b c0       	rjmp	.+22     	; 0x34a <play_song+0x20c>
			case 'e': current_note = 4; break;    // E (mi)
 334:	14 e0       	ldi	r17, 0x04	; 4
 336:	09 c0       	rjmp	.+18     	; 0x34a <play_song+0x20c>
			case 'f': current_note = 5; break;    // F (fa)
 338:	15 e0       	ldi	r17, 0x05	; 5
 33a:	07 c0       	rjmp	.+14     	; 0x34a <play_song+0x20c>
			case 'g': current_note = 7; break;    // G (sol)
 33c:	17 e0       	ldi	r17, 0x07	; 7
 33e:	05 c0       	rjmp	.+10     	; 0x34a <play_song+0x20c>
			case 'a': current_note = 9; break;    // A (la)
 340:	19 e0       	ldi	r17, 0x09	; 9
 342:	03 c0       	rjmp	.+6      	; 0x34a <play_song+0x20c>
			case 'b': current_note = 11; break;   // B (si)
 344:	1b e0       	ldi	r17, 0x0B	; 11
 346:	01 c0       	rjmp	.+2      	; 0x34a <play_song+0x20c>
			}
		}
		// Busco una nota
		switch (*song)
		{
			case 'c': current_note = 0; break;    // C (do)
 348:	10 e0       	ldi	r17, 0x00	; 0
			case 'g': current_note = 7; break;    // G (sol)
			case 'a': current_note = 9; break;    // A (la)
			case 'b': current_note = 11; break;   // B (si)
			case 'p': current_note = 255; break;  // pausa
		}
		song++;                     // Avanzo al pr?ximo caracter
 34a:	fe 01       	movw	r30, r28
 34c:	31 96       	adiw	r30, 0x01	; 1
		// Busco un '#' siguiendo la nota
		if (*song=='#')
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	83 32       	cpi	r24, 0x23	; 35
 352:	11 f4       	brne	.+4      	; 0x358 <play_song+0x21a>
		{
			current_note++;   // Incremento la nota (A->A#, C->C#, D->D#, F->F#, G->G#)
 354:	1f 5f       	subi	r17, 0xFF	; 255
			song++;                   // Avanzo al pr?ximo caracter
 356:	31 96       	adiw	r30, 0x01	; 1




		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
 358:	80 81       	ld	r24, Z
 35a:	8e 32       	cpi	r24, 0x2E	; 46
 35c:	21 f4       	brne	.+8      	; 0x366 <play_song+0x228>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 35e:	31 96       	adiw	r30, 0x01	; 1


		// Busco '.' (extiende la duraci?n de la nota un 50%)
		if (*song=='.')
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 360:	ee 24       	eor	r14, r14
 362:	e3 94       	inc	r14
 364:	01 c0       	rjmp	.+2      	; 0x368 <play_song+0x22a>
	while (*song)                 // Repito hasta que el caracter sea null
	{
		current_note = 255;         // Nota por defecto = pausa
		temp_octave = octave;       // Seteo la octava a la por defecto de la canci?n
		temp_duration = duration;   // Seteo la duraci?n a la por defecto de la canci?n
		dot_flag = 0;               // Borro el flag de detecci?n de punto
 366:	e1 2c       	mov	r14, r1
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
 368:	80 81       	ld	r24, Z
 36a:	80 53       	subi	r24, 0x30	; 48
 36c:	8a 30       	cpi	r24, 0x0A	; 10
 36e:	10 f4       	brcc	.+4      	; 0x374 <play_song+0x236>
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
 370:	31 96       	adiw	r30, 0x01	; 1
			song++;                   // Avanzo al pr?ximo caracter
		}
		// Busco un sufijo de una octava
		if (*song>='0' && *song<='9')
		{
			temp_octave = *song - '0';// Seteo la octava en consecuencia
 372:	f8 2e       	mov	r15, r24
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
 374:	80 81       	ld	r24, Z
 376:	8e 32       	cpi	r24, 0x2E	; 46
 378:	19 f4       	brne	.+6      	; 0x380 <play_song+0x242>
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
			song++;                   // Avanzo al pr?ximo caracter
 37a:	31 96       	adiw	r30, 0x01	; 1
			temp_octave = *song - '0';// Seteo la octava en consecuencia
			song++;                   // Avanzo al pr?ximo caracter
		}
		if (*song=='.') // Un punto puede ser encontrado incluso despu?s de una octava
		{
			dot_flag = 1;             // Si se encuentra '.', seteo el flag
 37c:	ee 24       	eor	r14, r14
 37e:	e3 94       	inc	r14
 380:	ef 01       	movw	r28, r30
 382:	01 c0       	rjmp	.+2      	; 0x386 <play_song+0x248>
			song++;                   // Avanzo al pr?ximo caracter
		}
		while (*song == ',') song++;    // Salteo ','
 384:	21 96       	adiw	r28, 0x01	; 1
 386:	88 81       	ld	r24, Y
 388:	8c 32       	cpi	r24, 0x2C	; 44
 38a:	e1 f3       	breq	.-8      	; 0x384 <play_song+0x246>
		// Calculo la duraci?n de la nota
		calc_duration = (60000/tempo)/(temp_duration);
 38c:	20 91 88 08 	lds	r18, 0x0888	; 0x800888 <__data_end>
 390:	30 91 89 08 	lds	r19, 0x0889	; 0x800889 <__data_end+0x1>
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	60 e6       	ldi	r22, 0x60	; 96
 39a:	7a ee       	ldi	r23, 0xEA	; 234
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__divmodsi4>
 3a4:	80 2e       	mov	r8, r16
 3a6:	91 2c       	mov	r9, r1
 3a8:	a1 2c       	mov	r10, r1
 3aa:	b1 2c       	mov	r11, r1
 3ac:	ca 01       	movw	r24, r20
 3ae:	b9 01       	movw	r22, r18
 3b0:	a5 01       	movw	r20, r10
 3b2:	94 01       	movw	r18, r8
 3b4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__divmodsi4>
		calc_duration *= 4;         // La nota completa tiene cuatro beats
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
		// Chequeo si el flag de punto est? activado, de ser as?, extiendo la duraci?n en un 50%
		if (dot_flag) calc_duration = (calc_duration*3)/2;
 3c0:	ee 20       	and	r14, r14
 3c2:	39 f0       	breq	.+14     	; 0x3d2 <play_song+0x294>
 3c4:	b9 01       	movw	r22, r18
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	26 0f       	add	r18, r22
 3cc:	37 1f       	adc	r19, r23
 3ce:	36 95       	lsr	r19
 3d0:	27 95       	ror	r18
		// Si la nota actual NO es una pausa, reproduzco la nota usando la funci?n sound
		if (current_note<255) sound(note[temp_octave-4][current_note],calc_duration);
 3d2:	1f 3f       	cpi	r17, 0xFF	; 255
 3d4:	c1 f0       	breq	.+48     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d6:	8f 2d       	mov	r24, r15
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	04 97       	sbiw	r24, 0x04	; 4
 3dc:	fc 01       	movw	r30, r24
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	e8 0f       	add	r30, r24
 3e4:	f9 1f       	adc	r31, r25
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	ee 0f       	add	r30, r30
 3ec:	ff 1f       	adc	r31, r31
 3ee:	e1 0f       	add	r30, r17
 3f0:	f1 1d       	adc	r31, r1
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	ea 5e       	subi	r30, 0xEA	; 234
 3f8:	fe 4f       	sbci	r31, 0xFE	; 254
 3fa:	b9 01       	movw	r22, r18
 3fc:	80 81       	ld	r24, Z
 3fe:	91 81       	ldd	r25, Z+1	; 0x01
 400:	0e 94 7a 00 	call	0xf4	; 0xf4 <sound>
 404:	0a c0       	rjmp	.+20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		else
		{ // Si la nota actual es una pausa (255), espero dicha cantidad de tiempo
			duration_timer = calc_duration;
 406:	30 93 8d 08 	sts	0x088D, r19	; 0x80088d <duration_timer+0x1>
 40a:	20 93 8c 08 	sts	0x088C, r18	; 0x80088c <duration_timer>
			sound_playing = 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	90 93 8f 08 	sts	0x088F, r25	; 0x80088f <sound_playing+0x1>
 416:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <sound_playing>
		}
		while (sound_playing);      // Espero a la que nota/pausa en curso finalice
 41a:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <sound_playing>
 41e:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <sound_playing+0x1>
 422:	89 2b       	or	r24, r25
 424:	d1 f7       	brne	.-12     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		}
		while (*song == ',') song++;    // Salteo ','
	}
	song++;                       // Avanzo al pr?ximo caracter
	// read the musical notes
	while (*song)                 // Repito hasta que el caracter sea null
 426:	88 81       	ld	r24, Y
 428:	81 11       	cpse	r24, r1
 42a:	58 cf       	rjmp	.-336    	; 0x2dc <play_song+0x19e>
			duration_timer = calc_duration;
			sound_playing = 1;
		}
		while (sound_playing);      // Espero a la que nota/pausa en curso finalice
	}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	bf 90       	pop	r11
 43a:	af 90       	pop	r10
 43c:	9f 90       	pop	r9
 43e:	8f 90       	pop	r8
 440:	08 95       	ret

00000442 <main>:
unsigned int duration_timer;

int main(void)
{
	// Declaraciones de variables
	sound_playing = 0;
 442:	10 92 8f 08 	sts	0x088F, r1	; 0x80088f <sound_playing+0x1>
 446:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <sound_playing>
	
	
	// ------------------------ Timer 0 ------------------------
	
	// Configuro una interrupci?n cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz 
 44a:	88 ef       	ldi	r24, 0xF8	; 248
 44c:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 452:	93 e0       	ldi	r25, 0x03	; 3
 454:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci?n de comparaci?n
 456:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	
	// ------------------------ Timer 1 ------------------------
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
 45a:	e0 e8       	ldi	r30, 0x80	; 128
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	80 64       	ori	r24, 0x40	; 64
 462:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 464:	e1 e8       	ldi	r30, 0x81	; 129
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	89 60       	ori	r24, 0x09	; 9
 46c:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB ser? el pin de salida
 46e:	84 b1       	in	r24, 0x04	; 4
 470:	82 60       	ori	r24, 0x02	; 2
 472:	84 b9       	out	0x04, r24	; 4


	//Habilito la m?scara de interrupciones
	
	sei();
 474:	78 94       	sei
	{
		//Main
		for (song_sel=8;song_sel<11;song_sel++)
		{
			song_sel=8;
			play_song(rtttl_library[song_sel]); // Reproduzco la canci?n
 476:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
 47a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__DATA_REGION_ORIGIN__+0x11>
 47e:	0e 94 9f 00 	call	0x13e	; 0x13e <play_song>
			// Espero dos segundos antes de comenzar la siguiente canci?n
			duration_timer = 2000;
 482:	80 ed       	ldi	r24, 0xD0	; 208
 484:	97 e0       	ldi	r25, 0x07	; 7
 486:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <duration_timer+0x1>
 48a:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <duration_timer>
			sound_playing = 1;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	90 93 8f 08 	sts	0x088F, r25	; 0x80088f <sound_playing+0x1>
 496:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <sound_playing>
			while (sound_playing);
 49a:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <sound_playing>
 49e:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <sound_playing+0x1>
 4a2:	89 2b       	or	r24, r25
 4a4:	d1 f7       	brne	.-12     	; 0x49a <main+0x58>
 4a6:	e7 cf       	rjmp	.-50     	; 0x476 <main+0x34>

000004a8 <__divmodsi4>:
 4a8:	05 2e       	mov	r0, r21
 4aa:	97 fb       	bst	r25, 7
 4ac:	1e f4       	brtc	.+6      	; 0x4b4 <__divmodsi4+0xc>
 4ae:	00 94       	com	r0
 4b0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__negsi2>
 4b4:	57 fd       	sbrc	r21, 7
 4b6:	07 d0       	rcall	.+14     	; 0x4c6 <__divmodsi4_neg2>
 4b8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__udivmodsi4>
 4bc:	07 fc       	sbrc	r0, 7
 4be:	03 d0       	rcall	.+6      	; 0x4c6 <__divmodsi4_neg2>
 4c0:	4e f4       	brtc	.+18     	; 0x4d4 <__divmodsi4_exit>
 4c2:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__negsi2>

000004c6 <__divmodsi4_neg2>:
 4c6:	50 95       	com	r21
 4c8:	40 95       	com	r20
 4ca:	30 95       	com	r19
 4cc:	21 95       	neg	r18
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
 4d0:	4f 4f       	sbci	r20, 0xFF	; 255
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255

000004d4 <__divmodsi4_exit>:
 4d4:	08 95       	ret

000004d6 <__negsi2>:
 4d6:	90 95       	com	r25
 4d8:	80 95       	com	r24
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__tablejump2__>:
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	05 90       	lpm	r0, Z+
 4ec:	f4 91       	lpm	r31, Z
 4ee:	e0 2d       	mov	r30, r0
 4f0:	09 94       	ijmp

000004f2 <__udivmodsi4>:
 4f2:	a1 e2       	ldi	r26, 0x21	; 33
 4f4:	1a 2e       	mov	r1, r26
 4f6:	aa 1b       	sub	r26, r26
 4f8:	bb 1b       	sub	r27, r27
 4fa:	fd 01       	movw	r30, r26
 4fc:	0d c0       	rjmp	.+26     	; 0x518 <__udivmodsi4_ep>

000004fe <__udivmodsi4_loop>:
 4fe:	aa 1f       	adc	r26, r26
 500:	bb 1f       	adc	r27, r27
 502:	ee 1f       	adc	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	a2 17       	cp	r26, r18
 508:	b3 07       	cpc	r27, r19
 50a:	e4 07       	cpc	r30, r20
 50c:	f5 07       	cpc	r31, r21
 50e:	20 f0       	brcs	.+8      	; 0x518 <__udivmodsi4_ep>
 510:	a2 1b       	sub	r26, r18
 512:	b3 0b       	sbc	r27, r19
 514:	e4 0b       	sbc	r30, r20
 516:	f5 0b       	sbc	r31, r21

00000518 <__udivmodsi4_ep>:
 518:	66 1f       	adc	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	88 1f       	adc	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	1a 94       	dec	r1
 522:	69 f7       	brne	.-38     	; 0x4fe <__udivmodsi4_loop>
 524:	60 95       	com	r22
 526:	70 95       	com	r23
 528:	80 95       	com	r24
 52a:	90 95       	com	r25
 52c:	9b 01       	movw	r18, r22
 52e:	ac 01       	movw	r20, r24
 530:	bd 01       	movw	r22, r26
 532:	cf 01       	movw	r24, r30
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
